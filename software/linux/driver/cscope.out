cscope 15 /home/testadvs/Downloads/k7_connectivity_trd_v1_5/linux_driver_app/driver -q 0000001843 0000382731
	@include/xbasic_types.h

73 #i‚de‡
XBASIC_TYPES_H


74 
	#XBASIC_TYPES_H


	)

76 #ifde‡
__˝lu•lus


86 #i‚de‡
TRUE


87 
	#TRUE
 1

	)

90 #i‚de‡
FALSE


91 
	#FALSE
 0

	)

94 #i‚de‡
NULL


95 
	#NULL
 0

	)

98 
	#XNULL
 
NULL


	)

99 
	#XTRUE
 
TRUE


	)

100 
	#XFALSE
 
FALSE


	)

102 
	#XCOMPONENT_IS_READY
 0x11111111

	)

103 
	#XCOMPONENT_IS_STARTED
 0x22222222

	)

105 
	#XIL_COMPONENT_IS_READY
 
XCOMPONENT_IS_READY


	)

106 
	#XIL_COMPONENT_IS_STARTED
 
XCOMPONENT_IS_STARTED


	)

111 
	#XTEST_PASSED
 0

	)

112 
	#XTEST_FAILED
 1

	)

114 
	#XASSERT_NONE
 0

	)

115 
	#XASSERT_OCCURRED
 1

	)

117 
XAs£πSètus
;

118 
XAs£π
(*, );

126 
	tXuöt8
;

127 
	tXöt8
;

128 
	tXuöt16
;

129 
	tXöt16
;

130 
	tXuöt32
;

131 
	tXöt32
;

132 
	tXÊﬂt32
;

133 
	tXÊﬂt64
;

134 
	tXboﬁón
;

138 
Xuöt32
 
	gUµî
;

139 
Xuöt32
 
	gLowî
;

140 } 
	tXuöt64
;

146 #i‚de‡
__KERNEL__


147 
Xuöt32
 
	tu32
;

148 
Xuöt16
 
	tu16
;

149 
Xuöt8
 
	tu8
;

151 
	~<löux/ty≥s.h
>

160 (*
	gXI¡îru±H™dÀr
Ë(*
	tIn°™˚På
);

166 (*
	gXEx˚±i⁄H™dÀr
Ë(*
	tIn°™˚På
);

172 (*
	gXAs£πCÆlback
Ë(*
	tFûíamePå
, 
	tLöeNumbî
);

187 
	#XUINT64_MSW
(
x
Ë((x).
Uµî
)

	)

200 
	#XUINT64_LSW
(
x
Ë((x).
Lowî
)

	)

203 #i‚de‡
NDEBUG


220 
	#XASSERT_VOID
(
ex¥essi⁄
) \

222 i‡(
ex¥essi⁄
) \

224 
XAs£πSètus
 = 
XASSERT_NONE
; \

228 
	`XAs£π
(
__FILE__
, 
__LINE__
); \

229 
XAs£πSètus
 = 
XASSERT_OCCURRED
; \

232 }

	)

249 
	#XASSERT_NONVOID
(
ex¥essi⁄
) \

251 i‡(
ex¥essi⁄
) \

253 
XAs£πSètus
 = 
XASSERT_NONE
; \

257 
	`XAs£π
(
__FILE__
, 
__LINE__
); \

258 
XAs£πSètus
 = 
XASSERT_OCCURRED
; \

261 }

	)

275 
	#XASSERT_VOID_ALWAYS
() \

277 
	`XAs£π
(
__FILE__
, 
__LINE__
); \

278 
XAs£πSètus
 = 
XASSERT_OCCURRED
; \

280 }

	)

293 
	#XASSERT_NONVOID_ALWAYS
() \

295 
	`XAs£π
(
__FILE__
, 
__LINE__
); \

296 
XAs£πSètus
 = 
XASSERT_OCCURRED
; \

298 }

	)

300 
	#Xû_As£πVoid
 
XASSERT_VOID


	)

301 
	#Xû_As£πN⁄void
 
XASSERT_NONVOID


	)

302 
	#Xû_As£πVoidAlways
 
XASSERT_VOID_ALWAYS


	)

303 
	#Xû_As£πN⁄VoidAlways
 
XASSERT_NONVOID_ALWAYS


	)

307 
	#XASSERT_VOID
(
ex¥essi⁄
)

	)

308 
	#XASSERT_VOID_ALWAYS
()

	)

309 
	#XASSERT_NONVOID
(
ex¥essi⁄
)

	)

310 
	#XASSERT_NONVOID_ALWAYS
()

	)

315 
XAs£πSëCÆlback
(
XAs£πCÆlback
 
Routöe
);

316 
XNuŒH™dÀr
(*
NuŒP¨amëî
);

318 #ifde‡
__˝lu•lus


	@include/xdebug.h

73 #ifde‡
__˝lu•lus


80 #i‚de‡
XDEBUG


81 
	#XDEBUG


	)

84 #i‡
deföed
(
MYDEBUG
Ë&& !deföed(
NDEBUG
)

86 #i‚de‡
XDEBUG_WARNING


87 
	#XDEBUG_WARNING


	)

91 
	#XDBG_DEBUG_ERROR
 0x00000001

	)

92 
	#XDBG_DEBUG_GENERAL
 0x00000002

	)

93 
	#XDBG_DEBUG_ALL
 0xFFFFFFFF

	)

95 
	#XDBG_DEBUG_FIFO_REG
 0x00000100

	)

96 
	#XDBG_DEBUG_FIFO_RX
 0x00000101

	)

97 
	#XDBG_DEBUG_FIFO_TX
 0x00000102

	)

98 
	#XDBG_DEBUG_FIFO_ALL
 0x0000010F

	)

100 
	#XDBG_DEBUG_TEMAC_REG
 0x00000400

	)

101 
	#XDBG_DEBUG_TEMAC_RX
 0x00000401

	)

102 
	#XDBG_DEBUG_TEMAC_TX
 0x00000402

	)

103 
	#XDBG_DEBUG_TEMAC_ALL
 0x0000040F

	)

105 
	#XDBG_DEBUG_TEMAC_ADPT_RX
 0x00000800

	)

106 
	#XDBG_DEBUG_TEMAC_ADPT_TX
 0x00000801

	)

107 
	#XDBG_DEBUG_TEMAC_ADPT_IOCTL
 0x00000802

	)

108 
	#XDBG_DEBUG_TEMAC_ADPT_MISC
 0x00000803

	)

109 
	#XDBG_DEBUG_TEMAC_ADPT_ALL
 0x0000080F

	)

111 
	#xdbg_cuºít_ty≥s
 (
XDBG_DEBUG_ERROR
 | 
XDBG_DEBUG_GENERAL
 | 
XDBG_DEBUG_TEMAC_REG
)

	)

113 
	#xdbg_°m¡
(
x
Ë
	)
x

114 
	#xdbg_¥ötf
(
ty≥
, ...Ë((—y≥Ë& 
xdbg_cuºít_ty≥s
Ë? 
	`¥ötk
 (
__VA_ARGS__
Ë: 0)

	)

117 
	#xdbg_°m¡
(
x
)

	)

118 
	#xdbg_¥ötf
(...)

	)

129 #ifde‡
DEBUG_VERBOSE


131 
	#log_vîbo£
(
¨gs
...Ë
	`¥ötk
◊rgs)

	)

132 
	#log_n‹mÆ
(
¨gs
...Ë
	`¥ötk
◊rgs)

	)

134 #ñi‡
deföed
 
DEBUG_NORMAL


136 
	#log_vîbo£
(
x
...)

	)

137 
	#log_n‹mÆ
(
¨gs
...Ë
	`¥ötk
◊rgs)

	)

141 
	#log_n‹mÆ
(
x
...)

	)

142 
	#log_vîbo£
(
x
...)

	)

149 #ifde‡
__˝lu•lus


	@include/xdma_user.h

202 #i‚de‡
XDMA_USER_H


203 
	#XDMA_USER_H


	)

205 #ifde‡
__˝lu•lus


211 
	~<xpm⁄_be.h
>

212 
	~<löux/ëhtoﬁ.h
>

213 
	~<löux/dñay.h
>

215 
	~<löux/∑gem≠.h
>

216 
	~<löux/mm.h
>

225 
	#UNINITIALIZED
 0

	)

226 
	#INITIALIZED
 1

	)

227 
	#USER_ASSIGNED
 2

	)

228 
	#UNREGISTERING
 3

	)

229 #ifde‡
PM_SUPPORT


230 
	#PM_PREPARE
 4

	)

239 
	#PKT_SOP
 0x80000000

	)

240 
	#PKT_EOP
 0x40000000

	)

241 
	#PKT_ERROR
 0x10000000

	)

242 
	#PKT_UNUSED
 0x00004000

	)

243 
	#PKT_ALL
 0x00800000

	)

246 
	#STATUS_REG_OFFSET
 0x9008

	)

248 #ifde‡
FIFO_EMPTY_CHECK


250 
	#STABILITY_WAIT_TIME
 5

251 
	#FIFO_EMPTY_TIMEOUT
 100

252 

	)

253 
	#DIR_TYPE_S2C
 0

254 
	#DIR_TYPE_C2S
 1

255 

	)

256 
	#EMPTY_MASK_SHIFT
 2

	)

257 
	#AXI_MIG_RST_SHIFT
 1

	)

259 
	#HANDLE_0
 0

260 
	#HANDLE_1
 2

261 

	)

266 
	#PERFORMANCE_MODE
 0

	)

267 
	#ETHERNET_APPMODE
 1

	)

268 
	#RAWETHERNET_MODE
 2

	)

295 * 
pktBuf
;

296 * 
bufInfo
;

297 
size
;

298 
Êags
;

299 
u£rInfo
;

300 * 
∑geAddr
;

301 
∑geOff£t
;

302 } 
	tPktBuf
;

313 
LökSèã
;

314 
D©aMism©ch
;

315 
Buf„rs
;

316 
MöPktSize
;

317 
MaxPktSize
;

318 
Te°Mode
;

319 } 
	tU£rSèã
;

324 #ifde‡
X86_64


327 
u64
 
¥ivD©a
;

328 
u64
 
vîsi⁄Reg
;

329 
mode
;

330 (* 
U£rInô
)(
u64
 
b¨ba£
, u64);

332 (* 
U£rRemove
)(* 
h™dÀ
, 
u64
 
¥ivd©a
);

336 (* 
U£rI¡r
)(* 
h™dÀ
, 
u64
 
¥ivd©a
);

338 (* 
U£rGëPkt
)(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
, 
u64
 
¥ivd©a
);

340 (* 
U£rPutPkt
)(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
u64
 
¥ivd©a
);

342 (* 
U£rSëSèã
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

344 (* 
U£rGëSèã
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

346 #ifde‡
PM_SUPPORT


348 (* 
U£rSu•íd_E¨ly
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

350 (* 
U£rSu•íd_L©e
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

352 (* 
U£rResume
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

356 } 
	tU£rPås
;

359 
¥ivD©a
;

360 
vîsi⁄Reg
;

361 
mode
;

362 (* 
U£rInô
)(
b¨ba£
, 
¥ivd©a
);

364 (* 
U£rRemove
)(* 
h™dÀ
, 
¥ivd©a
);

368 (* 
U£rI¡r
)(* 
h™dÀ
, 
¥ivd©a
);

370 (* 
U£rGëPkt
)(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
, 
¥ivd©a
);

372 (* 
U£rPutPkt
)(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
);

374 (* 
U£rSëSèã
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

376 (* 
U£rGëSèã
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

378 #ifde‡
PM_SUPPORT


380 (* 
U£rSu•íd_E¨ly
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

382 (* 
U£rSu•íd_L©e
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

384 (* 
U£rResume
)(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

388 } 
	tU£rPås
;

398 * 
DmaRegi°î
(
ígöe
, 
b¨
, 
U£rPås
 * 
u±r
, 
pktsize
);

399 
DmaUƒegi°î
(* 
h™dÀ
);

400 #ifde‡
FIFO_EMPTY_CHECK


401 
DmaFifoEm±yWaô
(
h™dÀId
, 
u32
 
ty≥
);

403 * 
DmaBa£Addªss
(
b¨
);

404 
DmaMac_WrôeReg
(
off£t
, 
d©a
);

405 
DmaMac_RódReg
(
off£t
);

407 
DmaSídPages_Tx
(* 
h™dÀ
, 
PktBuf
 ** 
pkts
, 
numpkts
);

408 
DmaSídPages
(* 
h™dÀ
, 
PktBuf
 ** 
pkts
, 
numpkts
);

409 
DmaSídPkt
(* 
h™dÀ
, 
PktBuf
 * 
pkts
, 
numpkts
);

410 
Dma_gë_rög∑øm
(*
h™dÀ
, 
ëhtoﬁ_rög∑øm
 *
îög
);

413 #ifde‡
__˝lu•lus


	@include/xio.h

68 #i‚de‡
XIO_H


69 
	#XIO_H


	)

71 #ifde‡
__˝lu•lus


77 
	~"xbasic_ty≥s.h
"

89 
Xuöt32
 
	tXIo_Addªss
;

98 #i‡
deföed
 
__GNUC__


99 
	#SYNCHRONIZE_IO
 
__asm__
 vﬁ©ûê("eõio")

	)

101 
	#SYNCHRONIZE_IO


	)

114 
	#XIo_EndünNo›
(
Sour˚
, 
De°På
Ë(*De°På = Sour˚)

	)

116 #i‡
deföed
 
__GNUC__
 && !deföed 
X86_PC


118 
	#XIo_EndünSw≠16
(
Sour˚
, 
De°På
Ë
__asm__
 
	`__vﬁ©ûe__
(\

120 : : "r" (
Sour˚
), "r" (
De°På
)\

121 )

	)

123 
	#XIo_EndünSw≠32
(
Sour˚
, 
De°På
Ë
__asm__
 
	`__vﬁ©ûe__
(\

125 : : "r" (
Sour˚
), "r" (
De°På
)\

126 )

	)

129 
	#XIo_EndünSw≠16
(
Sour˚
, 
De°På
) \

131 
Xuöt16
 
§c
 = (
Sour˚
); \

132 
Xuöt16
 *
de°±r
 = (
De°På
); \

133 *
de°±r
 = 
§c
 >> 8; \

134 *
de°±r
 |(
§c
 << 8); \

135 }

	)

137 
	#XIo_EndünSw≠32
(
Sour˚
, 
De°På
) \

139 
§c
 = (
Sour˚
); \

140 *
de°±r
 = (
De°På
); \

141 *
de°±r
 = 
§c
 >> 24; \

142 *
de°±r
 |((
§c
 >> 8) & 0x0000FF00); \

143 *
de°±r
 |((
§c
 << 8) & 0x00FF0000); \

144 *
de°±r
 |((
§c
 << 24) & 0xFF000000); \

145 }

	)

149 #ifde‡
XLITTLE_ENDIAN


152 
	#XIo_ToLôéeEndün16
 
XIo_EndünNo›


	)

153 
	#XIo_ToLôéeEndün32
 
XIo_EndünNo›


	)

154 
	#XIo_FromLôéeEndün16
 
XIo_EndünNo›


	)

155 
	#XIo_FromLôéeEndün32
 
XIo_EndünNo›


	)

157 
	#XIo_ToBigEndün16
(
Sour˚
, 
De°På
Ë
	`XIo_EndünSw≠16
(Sour˚, De°På)

	)

158 
	#XIo_ToBigEndün32
(
Sour˚
, 
De°På
Ë
	`XIo_EndünSw≠32
(Sour˚, De°På);

	)

159 
	#XIo_FromBigEndün16
 
XIo_ToBigEndün16


	)

160 
	#XIo_FromBigEndün32
(
Sour˚
, 
De°På
Ë
	`XIo_ToBigEndün32
(Sour˚, De°På);

	)

165 
	#XIo_ToLôéeEndün16
(
Sour˚
, 
De°På
Ë
	`XIo_EndünSw≠16
(Sour˚, De°På)

	)

166 
	#XIo_ToLôéeEndün32
(
Sour˚
, 
De°På
Ë
	`XIo_EndünSw≠32
(Sour˚, De°På)

	)

167 
	#XIo_FromLôéeEndün16
 
XIo_ToLôéeEndün16


	)

168 
	#XIo_FromLôéeEndün32
 
XIo_ToLôéeEndün32


	)

170 
	#XIo_ToBigEndün16
 
XIo_EndünNo›


	)

171 
	#XIo_ToBigEndün32
 
XIo_EndünNo›


	)

172 
	#XIo_FromBigEndün16
 
XIo_EndünNo›


	)

173 
	#XIo_FromBigEndün32
 
XIo_EndünNo›


	)

186 #i‚de‡
USE_IO_MACROS


189 
Xuöt8
 
XIo_In8
(
XIo_Addªss
 
InAddªss
);

190 
Xuöt16
 
XIo_In16
(
XIo_Addªss
 
InAddªss
);

191 
Xuöt32
 
XIo_In32
(
XIo_Addªss
 
InAddªss
);

193 
XIo_Out8
(
XIo_Addªss
 
OutAddªss
, 
Xuöt8
 
VÆue
);

194 
XIo_Out16
(
XIo_Addªss
 
OutAddªss
, 
Xuöt16
 
VÆue
);

195 
XIo_Out32
(
XIo_Addªss
 
OutAddªss
, 
Xuöt32
 
VÆue
);

204 #ifde‡
X86_PC


206 
	~<asm/io.h
>

208 #ifde‡
NWLDMA


211 
	#XIo_In32
(
addr
Ë(
	`ªadl
((*)◊ddr)))

	)

212 
	#XIo_Out32
(
addr
, 
d©a
Ë(
	`wrôñ
((d©a), (*)◊ddr)))

	)

216 
ölöe
 
ªadbe2À
(* 
addr
)

218 
sour˚
, 
de°
;

219 
sour˚
 = 
ªadl
(
addr
);

220 
XIo_FromBigEndün32
(
sour˚
, &
de°
);

221  
de°
;

223 
ölöe
 
wrôñe2be
(
d©a
, * 
addr
)

225 
wde°
;

226 
XIo_ToBigEndün32
((
d©a
), &
wde°
);

227 
wrôñ
(
wde°
, (*)(
addr
));

230 
	#XIo_In32
(
addr
Ë(
	`ªadbe2À
((*)◊ddr)))

	)

231 
	#XIo_Out32
(
addr
, 
d©a
Ë(
	`wrôñe2be
((d©a), (*)◊ddr)))

	)

235 
	#Xû_In32
 
XIo_In32


	)

236 
	#Xû_Out32
 
XIo_Out32


	)

240 
	#XIo_In8
(
I≈utPå
Ë(*(vﬁ©ûê
Xuöt8
 *)(I≈utPå)); 
SYNCHRONIZE_IO
;

	)

241 
	#XIo_In16
(
I≈utPå
Ë(*(vﬁ©ûê
Xuöt16
 *)(I≈utPå)); 
SYNCHRONIZE_IO
;

	)

242 
	#XIo_In32
(
I≈utPå
Ë(*(vﬁ©ûê
Xuöt32
 *)(I≈utPå)); 
SYNCHRONIZE_IO
;

	)

244 
	#XIo_Out8
(
OuçutPå
, 
VÆue
) \

245 { (*(vﬁ©ûê
Xuöt8
 *)(
OuçutPå
Ë
VÆue
); 
SYNCHRONIZE_IO
; }

	)

246 
	#XIo_Out16
(
OuçutPå
, 
VÆue
) \

247 { (*(vﬁ©ûê
Xuöt16
 *)(
OuçutPå
Ë
VÆue
); 
SYNCHRONIZE_IO
; }

	)

248 
	#XIo_Out32
(
OuçutPå
, 
VÆue
) \

249 { (*(vﬁ©ûê
Xuöt32
 *)(
OuçutPå
Ë
VÆue
); 
SYNCHRONIZE_IO
; }

	)

258 
Xuöt16
 
XIo_InSw≠16
(
XIo_Addªss
 
InAddªss
);

259 
Xuöt32
 
XIo_InSw≠32
(
XIo_Addªss
 
InAddªss
);

260 
XIo_OutSw≠16
(
XIo_Addªss
 
OutAddªss
, 
Xuöt16
 
VÆue
);

261 
XIo_OutSw≠32
(
XIo_Addªss
 
OutAddªss
, 
Xuöt32
 
VÆue
);

263 #ifde‡
__˝lu•lus


	@include/xpmon_be.h

125 #i‚de‡
XPMON_BE_H


126 
	#XPMON_BE_H


	)

128 #ifde‡
__˝lu•lus


152 
	#XPMON_MAGIC
 'C'

	)

154 #ifde‡
PM_SUPPORT


155 
	#XPMON_MAX_CMD
 16

	)

157 
	#XPMON_MAX_CMD
 11

	)

161 
	#IGET_TEST_STATE
 
	`_IOR
(
XPMON_MAGIC
, 1, 
Te°Cmd
)

	)

164 
	#ISTART_TEST
 
	`_IOW
(
XPMON_MAGIC
, 2, 
Te°Cmd
)

	)

167 
	#ISTOP_TEST
 
	`_IOW
(
XPMON_MAGIC
, 3, 
Te°Cmd
)

	)

170 
	#IGET_PCI_STATE
 
	`_IOR
(
XPMON_MAGIC
, 4, 
PCISèã
)

	)

173 
	#IGET_ENG_STATE
 
	`_IOR
(
XPMON_MAGIC
, 5, 
EngSèã
)

	)

176 
	#IGET_DMA_STATISTICS
 
	`_IOR
(
XPMON_MAGIC
, 6, 
EngSètsAºay
)

	)

179 
	#IGET_TRN_STATISTICS
 
	`_IOR
(
XPMON_MAGIC
, 7, 
TRNSètsAºay
)

	)

182 
	#IGET_SW_STATISTICS
 
	`_IOR
(
XPMON_MAGIC
, 8, 
SWSètsAºay
)

	)

185 
	#IGET_TRN_TXUSRINFO
 
	`_IOR
(
XPMON_MAGIC
, 9, 
TxU§Info
)

	)

188 
	#IGET_TRN_RXUSRINFO
 
	`_IOR
(
XPMON_MAGIC
, 10, 
RxU§Info
)

	)

191 
	#IGET_LED_STATISTICS
 
	`_IOR
(
XPMON_MAGIC
, 11, 
LedSèts
)

	)

193 #ifde‡
PM_SUPPORT


195 
	#ISET_PCI_LINKSPEED
 
	`_IOW
(
XPMON_MAGIC
, 12, 
Dúe˘LökChg
)

	)

198 
	#ISET_PCI_LINKWIDTH
 
	`_IOW
(
XPMON_MAGIC
, 13, 
Dúe˘LökChg
)

	)

201 
	#ISET_PCI_RUNTIME_SUSPEND
 
	`_IOR
(
XPMON_MAGIC
, 14, 
PCISèã
)

	)

204 
	#ISET_PCI_RUNTIME_RESUME
 
	`_IOR
(
XPMON_MAGIC
, 15, 
PCISèã
)

	)

206 
	#IGET_PMVAL
 
	`_IOR
(
XPMON_MAGIC
, 16, 
PowîM⁄ô‹VÆ
)

	)

210 
	#TEST_STOP
 0x00000000

	)

211 
	#TEST_START
 0x00008000

	)

212 
	#TEST_IN_PROGRESS
 0x00004000

	)

214 
	#ENABLE_PKTCHK
 0x00000100

	)

215 
	#ENABLE_PKTGEN
 0x00000400

	)

216 
	#ENABLE_LOOPBACK
 0x00000200

	)

217 
	#ENABLE_CRISCROSS
 0x00002000

	)

220 
	#LINK_UP
 1

	)

221 
	#LINK_DOWN
 0

	)

224 
	#INT_MSIX
 0x3

	)

225 
	#INT_MSI
 0x2

	)

226 
	#INT_LEGACY
 0x1

	)

227 
	#INT_NONE
 0x0

	)

228 
	#LINK_SPEED_25
 1

	)

229 
	#LINK_SPEED_5
 2

	)

235 
	#MAX_ENGS
 4

	)

236 
	#MAX_TRN
 2

	)

237 
	#TX_MODE
 0x1

	)

238 
	#RX_MODE
 0x2

	)

239 
	#MAX_SIZE_DONE
 100

	)

241 
	#TX_CONFIG_SEQNO
 512

	)

251 
Vîsi⁄
;

252 
LökSèã
;

253 
LökS≥ed
;

254 
LökWidth
;

255 
LökUpC≠
;

256 
Víd‹Id
;

257 
Devi˚Id
;

258 
I¡Mode
;

259 
MPS
;

260 
MRRS
;

261 
InôFCC∂D
;

262 
InôFCC∂H
;

263 
InôFCNPD
;

264 
InôFCNPH
;

265 
InôFCPD
;

266 
InôFCPH
;

267 } 
	tPCISèã
;

271 
Engöe
;

272 
BDs
;

273 
Buf„rs
;

274 
MöPktSize
;

275 
MaxPktSize
;

276 
BDîrs
;

277 
BDSîrs
;

278 
D©aMism©ch
;

279 
I¡E«b
;

280 
Te°Mode
;

281 } 
	tEngSèã
;

285 
Engöe
;

286 
LBR
;

287 
LAT
;

288 
LWT
;

289 } 
	tDMASèti°ics
;

293 
Cou¡
;

294 
DMASèti°ics
 * 
íg±r
;

295 } 
	tEngSètsAºay
;

299 
LTX
;

300 
LRX
;

301 } 
	tTRNSèti°ics
;

305 
Cou¡
;

306 
TRNSèti°ics
 * 
å≈å
;

307 } 
	tTRNSètsAºay
;

311 
Engöe
;

312 
LBR
;

313 } 
	tSWSèti°ics
;

317 
Cou¡
;

318 
SWSèti°ics
 * 
sw±r
;

319 } 
	tSWSètsAºay
;

321 #ifde‡
PM_SUPPORT


323 
LökS≥ed
;

324 
LökWidth
;

325 } 
	tDúe˘LökChg
;

328 
vcc
;

329 
vcˇux
;

330 
vcc3v3
;

331 
vadj
;

332 
vcc2v5
;

333 
vcc1v5
;

334 
mgt_avcc
;

335 
mgt_avâ
;

336 
vcˇux_io
;

337 
vccbøm
;

338 
mgt_vcˇux
;

339 
pwr_rsvd
;

340 
dõ_ãmp
;

341 }
	tPowîM⁄ô‹VÆ
;

346 
Engöe
;

347 
Te°Mode
;

348 
MöPktSize
;

349 
MaxPktSize
;

350 } 
	tTe°Cmd
;

355 
DdrCÆib
;

356 
Phy0
;

357 
Phy1
;

358 } 
	tLedSèts
;

362 
buffSize
;

363 *
buf„rAddªss
;

364 *
ídAddªss
;

365 
ídSize
;

366 
noPages
;

367 }
	tBuf„rInfo
;

369 
	#MAX_LIST
 1024

	)

372 
Buf„rInfo
 
buffLi°
[
MAX_LIST
];

373 
ex≥˘ed
;

374 }
	tFªeInfo
;

378 * 
u§Buf
;

379 
pktSize
;

380 } 
	tTxU§Info
;

383 * 
u§Buf
;

384 
pktSize
;

385 } 
	tRxU§Info
;

391 #ifde‡
__˝lu•lus


	@include/xstatus.h

70 #i‚de‡
XSTATUS_H


71 
	#XSTATUS_H


	)

73 #ifde‡
__˝lu•lus


79 
	~"xbasic_ty≥s.h
"

85 
	#XST_SUCCESS
 0L

	)

86 
	#XST_FAILURE
 1L

	)

87 
	#XST_DEVICE_IS_STARTED
 5L

	)

88 
	#XST_DEVICE_IS_STOPPED
 6L

	)

89 
	#XST_INVALID_PARAM
 15L

	)

90 
	#XST_IS_STARTED
 23L

	)

91 
	#XST_IS_STOPPED
 24L

	)

95 
	#XST_DMA_SG_LIST_EMPTY
 513L

	)

96 
	#XST_DMA_SG_IS_STARTED
 514L

	)

97 
	#XST_DMA_SG_IS_STOPPED
 515L

	)

98 
	#XST_DMA_SG_LIST_FULL
 517L

	)

99 
	#XST_DMA_SG_NO_LIST
 523L

	)

100 
	#XST_DMA_SG_LIST_ERROR
 526L

	)

107 #ifde‡
__˝lu•lus


	@xdma/xdma.c

70 
	~<löux/°rög.h
>

71 
	~<löux/kî√l.h
>

73 
	~"xbasic_ty≥s.h
"

74 
	~"xdebug.h
"

75 
	~"x°©us.h
"

76 
	~"xio.h
"

77 
	~"xdma.h
"

78 
	~"xdma_hw.h
"

109 #ifde‡
X86_64


110 
	$Dma_Inôülize
(
Dma_Engöe
 * 
In°™˚På
, 
u64
 
Ba£Addªss
, 
u32
 
Ty≥
)

113 
	$Dma_Inôülize
(
Dma_Engöe
 * 
In°™˚På
, 
u32
 
Ba£Addªss
, u32 
Ty≥
)

116 
	`log_vîbo£
(
KERN_INFO
 "Initializing DMA()\n");

119 
	`log_vîbo£
(
KERN_INFO
 "CÀ¨ög DMA in°™˚ %p\n", 
In°™˚På
);

120 
	`mem£t
(
In°™˚På
, 0, (
Dma_Engöe
));

122 
	`log_vîbo£
(
KERN_INFO
 "DMA ba£áddªs†i†0x%x\n", 
Ba£Addªss
);

123 
In°™˚På
->
RegBa£
 = 
Ba£Addªss
;

124 
In°™˚På
->
Ty≥
 = Type;

127 
In°™˚På
->
BdRög
.
RunSèã
 = 
XST_DMA_SG_IS_STOPPED
;

128 
In°™˚På
->
EngöeSèã
 = 
INITIALIZED
;

131 
In°™˚På
->
BdRög
.
Ch™Ba£
 = 
Ba£Addªss
;

132 if(
Ty≥
 =
DMA_ENG_C2S
)

133 
In°™˚På
->
BdRög
.
IsRxCh™√l
 = 1;

135 
In°™˚På
->
BdRög
.
IsRxCh™√l
 = 0;

138 
	`Dma_Re£t
(
In°™˚På
);

139 
	}
}

161 
	$Dma_Re£t
(
Dma_Engöe
 * 
In°™˚På
)

163 
Dma_BdRög
 *
RögPå
;

164 
i
=0;

165 
u32
 
dúqvÆ
;

167 
	`log_vîbo£
(
KERN_INFO
 "Re£âög DMA in°™˚ %p\n", 
In°™˚På
);

169 
RögPå
 = &
	`Dma_mGëRög
(
In°™˚På
);

172 
	`Dma_mEngI¡DißbÀ
(
In°™˚På
);

178 
	`log_vîbo£
(
KERN_INFO
 "Disabling DMA. UserÑesetÑequest.\n");

179 
i
=0;

180 
	`Dma_mSëCrSr
(
In°™˚På
, (
DMA_ENG_DISABLE
|
DMA_ENG_USER_RESET
));

183 
	`Dma_mGëCrSr
(
In°™˚På
) &

184 (
DMA_ENG_STATE_MASK
|
DMA_ENG_USER_RESET
)) {

185 
i
++;

186 if(
i
 >= 100000)

188 
	`log_vîbo£
(
KERN_INFO
 "CR i†now 0x%x\n", 
	`Dma_mGëCrSr
(
In°™˚På
));

194 
	`log_vîbo£
(
KERN_INFO
 "DMAÑesetÑequest.\n");

195 
i
=0;

196 
	`Dma_mSëCrSr
(
In°™˚På
, (
DMA_ENG_RESET
));

199 
	`Dma_mGëCrSr
(
In°™˚På
Ë& 
DMA_ENG_RESET
) {

200 
i
++;

201 if(
i
 >= 100000)

203 
	`log_vîbo£
(
KERN_INFO
 "CR i†now 0x%x\n", 
	`Dma_mGëCrSr
(
In°™˚På
));

212 
dúqvÆ
 = 
	`Dma_mGëCrSr
(
In°™˚På
);

213 
	`¥ötk
("Whûêª£âögÉngöe, gŸ %x i¿íg sètu†ªg\n", 
dúqvÆ
);

214 if(
dúqvÆ
 & 
DMA_ENG_INT_ACTIVE_MASK
)

215 
	`Dma_mEngI¡Ack
(
In°™˚På
, (
dúqvÆ
 & 
DMA_ENG_ALLINT_MASK
));

217 
RögPå
->
RunSèã
 = 
XST_DMA_SG_IS_STOPPED
;

218 
	}
}

	@xdma/xdma.h

413 #i‚de‡
XDMA_H


414 
	#XDMA_H


	)

416 #ifde‡
__˝lu•lus


422 
	~<löux/timî.h
>

424 
	~"xbasic_ty≥s.h
"

425 
	~"xdma_bdrög.h
"

426 
	~"xdma_u£r.h
"

427 
	~<xpm⁄_be.h
>

430 
	#MAX_BARS
 6

	)

431 
	#MAX_DMA_ENGINES
 64

	)

433 
	#DMA_ALL_BDS
 0xFFFFFFFF

	)

440 #ifde‡
X86_64


442 
pci_dev
 * 
pdev
;

443 
u64
 
RegBa£
;

445 
u32
 
EngöeSèã
;

446 
Dma_BdRög
 
BdRög
;

447 
u32
 
Ty≥
;

448 
U£rPås
 
u£r
;

449 
pktSize
;

451 #ifde‡
TH_BH_ISR


452 
öåCou¡
;

455 
dma_addr_t
 
descS∑˚PA
;

456 
u32
 
descS∑˚Size
;

457 
u64
 * 
descS∑˚VA
;

458 
u32
 
dñè
;

459 } 
	tDma_Engöe
;

462 
pci_dev
 * 
pdev
;

463 
u32
 
RegBa£
;

465 
u32
 
EngöeSèã
;

466 
Dma_BdRög
 
BdRög
;

467 
u32
 
Ty≥
;

468 
U£rPås
 
u£r
;

469 
pktSize
;

471 #ifde‡
TH_BH_ISR


472 
öåCou¡
;

475 
dma_addr_t
 
descS∑˚PA
;

476 
u32
 
descS∑˚Size
;

477 
u32
 * 
descS∑˚VA
;

478 
u32
 
dñè
;

479 } 
	tDma_Engöe
;

488 
	s¥ivD©a
 {

489 
pci_dev
 * 
pdev
;

494 
u32
 
b¨Mask
;

496 
ba£PAddr
;

497 
ba£Lí
;

498 
__iomem
 * 
ba£VAddr
;

499 } 
b¨Info
[
MAX_BARS
];

504 
u32
 
ödex
;

512 
ígöeMask
;

513 
Dma_Engöe
 
Dma
[
MAX_DMA_ENGINES
];

515 
u£rCou¡
;

517 
¥ivD©a
 * 
dmaD©a
;

520 
u32
 
DrivîSèã
;

523 
•ölock_t
 
DmaLock
;

524 
•ölock_t
 
DmaTXLock
;

525 
•ölock_t
 
DmaRXLock
;

535 
des¸ùt‹_öô
(
pci_dev
 *
pdev
, 
Dma_Engöe
 * 
ïå
);

536 
des¸ùt‹_‰ì
(
pci_dev
 *
pdev
, 
Dma_Engöe
 * 
ïå
);

537 #ifde‡
X86_64


538 
Dma_Inôülize
(
Dma_Engöe
 * 
In°™˚På
, 
u64
 
Ba£Addªss
, 
u32
 
Ty≥
);

540 
Dma_Inôülize
(
Dma_Engöe
 * 
In°™˚På
, 
u32
 
Ba£Addªss
, u32 
Ty≥
);

543 
Dma_Re£t
(
Dma_Engöe
 * 
In°™˚På
);

549 #ifde‡
__˝lu•lus


	@xdma/xdma_base.c

76 
	~<löux/pci.h
>

77 
	~<löux/öãºu±.h
>

78 
	~<löux/moduÀ.h
>

79 
	~<löux/kî√l.h
>

80 
	~<löux/•ölock.h
>

81 
	~<löux/fs.h
>

82 
	~<löux/ty≥s.h
>

83 
	~<löux/kdev_t.h
>

84 
	~<löux/cdev.h
>

85 
	~<asm/uac˚ss.h
>

86 
	~<löux/vîsi⁄.h
>

87 
	~<löux/ëhtoﬁ.h
>

88 #ifde‡
PM_SUPPORT


89 
	~<löux/pm.h
>

91 
	~<löux/mm.h
>

92 
	~<löux/•ölock.h
>

93 
	~<löux/∑gem≠.h
>

94 
	~<asm/sˇâîli°.h
>

96 
	~<löux/dñay.h
>

98 
	~<xpm⁄_be.h
>

99 
	~"xdebug.h
"

100 
	~"xbasic_ty≥s.h
"

101 
	~"x°©us.h
"

102 
	~"xdma.h
"

103 
	~"xdma_hw.h
"

104 
	~"xdma_bdrög.h
"

105 
	~"xdma_u£r.h
"

113 
	#PCI_VENDOR_ID_DMA
 0x10EE

	)

115 
	#PCI_DEVICE_ID_DMA
 0x7082

	)

118 
	#DRIVER_NAME
 "xdma_drivî"

	)

119 
	#DRIVER_DESCRIPTION
 "Xûöx DMA Löux drivî"

	)

120 
	#DRIVER_VERSION
 "1.0"

	)

123 
MODULE_AUTHOR
("Xilinx, Inc.");

124 
MODULE_DESCRIPTION
(
DRIVER_DESCRIPTION
);

125 
MODULE_VERSION
(
DRIVER_VERSION
);

126 
MODULE_LICENSE
("GPL");

129 
pci_devi˚_id
 
	gids
[] = {

130 { 
PCI_VENDOR_ID_DMA
, 
PCI_DEVICE_ID_DMA
,

131 
PCI_ANY_ID
, PCI_ANY_ID,

140 
MODULE_DEVICE_TABLE
(
pci
, 
ids
);

145 
	#DMA_ENGINE_PER_SIZE
 0x100

	)

146 
	#DMA_OFFSET
 0

	)

148 
	#DMA_SIZE
 (
MAX_DMA_ENGINES
 * 
DMA_ENGINE_PER_SIZE
)

	)

155 
	#DMA_BD_CNT
 1999

	)

158 
	#MAX_POOL
 10

	)

161 
	#MAX_STATS
 100

	)

163 
	#TX_UTIL_BC
 0x900¯

	)

164 
	#RX_UTIL_BC
 0x9010

	)

165 
	#UPSTR_MEMWR_BC
 0x9014

	)

166 
	#DOWNSTR_COMPBYTE_COUNTR
 0x9018

	)

167 
	#MInôFCC∂D
 0x901¯

	)

168 
	#MInôFCC∂H
 0x9020

	)

169 
	#MInôFCNPD
 0x9024

	)

170 
	#MInôFCNPH
 0x9028

	)

171 
	#MInôFCPD
 0x902¯

	)

172 
	#MInôFCPH
 0x9030

	)

173 
	#PCIE_DESIGN_VERSION
 0x9000

	)

175 #ifde‡
PM_SUPPORT


176 
	#PVTMON_VCCINT
 0x9040

	)

177 
	#PVTMON_VCCAUX
 0x9044

	)

178 
	#PVTMON_VCC3V3
 0x9048

	)

179 
	#PVTMON_VADJ
 0x904C

	)

180 
	#PVTMON_VCC2V5
 0x9050

	)

181 
	#PVTMON_VCC1V5
 0x9054

	)

182 
	#PVTMON_MGT_AVCC
 0x9058

	)

183 
	#PVTMON_MGT_AVTT
 0x905C

	)

184 
	#PVTMON_VCCAUX_IO
 0x9060

	)

185 
	#PVTMON_VCC_BRAM
 0x9064

	)

186 
	#PVTMON_MGT_VCCAUX
 0x9068

	)

187 
	#PVTMON_RSVD
 0x906C

	)

188 
	#DIE_TEMP
 0x9070

	)

193 
	sPktPoﬁ


195 
PktBuf
 * 
	mpbuf
;

196 
PktPoﬁ
 * 
	m√xt
;

199 
PktBuf
 
	gpktAºay
[
MAX_POOL
][
DMA_BD_CNT
];

200 
PktPoﬁ
 
	gpktPoﬁ
[
MAX_POOL
];

201 
PktPoﬁ
 * 
	gpktPoﬁHód
=
NULL
;

202 
PktPoﬁ
 * 
	gpktPoﬁTaû
=
NULL
;

204 
timî_li°
 
	g°©s_timî
;

205 
timî_li°
 
	gpﬁl_timî
;

207 
cdev
 * 
	gxdmaCdev
=
NULL
;

210 
¥ivD©a
 * 
	gdmaD©a
 = 
NULL
;

211 
u32
 
	gDrivîSèã
 = 
UNINITIALIZED
;

214 
DEFINE_SPINLOCK
(
DmaSètsLock
);

215 
DEFINE_SPINLOCK
(
DmaLock
);

216 
DEFINE_SPINLOCK
(
I¡rLock
);

217 
DEFINE_SPINLOCK
(
PktPoﬁLock
);

220 
	gU£rO≥n
=0;

221 
DMASèti°ics
 
	gDSèts
[
MAX_DMA_ENGINES
][
MAX_STATS
];

222 
SWSèti°ics
 
	gSSèts
[
MAX_DMA_ENGINES
][
MAX_STATS
];

223 
TRNSèti°ics
 
	gTSèts
[
MAX_STATS
];

224 #ifde‡
PM_SUPPORT


225 
PowîM⁄ô‹VÆ
 
	gpmvÆ
;

228 
	gd°©sRód
[
MAX_DMA_ENGINES
], 
	gd°©sWrôe
[MAX_DMA_ENGINES];

229 
	gd°©sNum
[
MAX_DMA_ENGINES
], 
	gs°©sRód
[MAX_DMA_ENGINES];

230 
	gs°©sWrôe
[
MAX_DMA_ENGINES
], 
	gs°©sNum
[MAX_DMA_ENGINES];

231 
	gt°©sRód
, 
	gt°©sWrôe
, 
	gt°©sNum
;

232 
u32
 
	gSWøã
[
MAX_DMA_ENGINES
];

236 
__devöô
 
xdma_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
ít
);

237 
__devexô
 
xdma_ªmove
(
pci_dev
 *
pdev
);

238 
xdma_dev_›í
(
öode
 * 
ö
, 
fûe
 * 
fûp
);

239 
xdma_dev_ªÀa£
(
öode
 * 
ö
, 
fûe
 * 
fûp
);

241 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36)

242 
xdma_dev_io˘l
(
öode
 * 
ö
, 
fûe
 * 
fûp
,

243 
cmd
, 
¨g
);

245 
xdma_dev_io˘l
(
fûe
 * 
fûp
,

246 
cmd
, 
¨g
);

248 
RódPCISèã
(
pci_dev
 * 
pdev
, 
PCISèã
 * 
pci°©e
);

249 #ifde‡
PM_SUPPORT


250 
SëLökS≥ed
(
pci_dev
 * 
pdev
, 
Dúe˘LökChg
 * 
dl
);

251 
SëLökWidth
(
pci_dev
 * 
pdev
, 
Dúe˘LökChg
 * 
dl
);

252 
SëRu¡imeSu•íd
(
pci_dev
 * 
pdev
);

253 
SëRu¡imeResume
(
pci_dev
 * 
pdev
);

255 #ifde‡
DEBUG_VERBOSE


256 
di•_bd_rög
(
Dma_BdRög
 *);

259 
PutUnu£dPkts
(
Dma_Engöe
 * 
ïå
, 
PktBuf
 * 
pbuf
, 
numpkts
);

261 
DmaSëupRecvBuf„rs
(
pci_dev
 *, 
Dma_Engöe
 *);

267 
PktH™dÀr
(
íg
, 
Dma_Engöe
 * 
ïå
);

269 
pﬁl_routöe
(
__›aque
);

271 #ifde‡
TH_BH_ISR


272 
	gPídögMask
 = 0x0LL;

273 
	gLa°I¡r
[
MAX_DMA_ENGINES
]={ 0, };

274 
	gMSIE«bÀd
=0;

275 
I¡rBH
(
unu£d
);

276 
DECLARE_TASKLET
(
DmaBH
, 
I¡rBH
, 0);

279 
RódDMAEngöeC⁄figuøti⁄
(
pci_dev
 *, 
¥ivD©a
 *);

280 
pﬁl_°©s
(
__›aque
);

282 #ifde‡
DEBUG_VERBOSE


283 
di•_‰ag
(*, 
u32
);

284 
RódRoŸ
(
pci_dev
 *);

287 #i‡
deföed
(
DEBUG_VERBOSE
Ë|| deföed(
DEBUG_NORMAL
)

288 
RódC⁄fig
(
pci_dev
 *);

291 #ifde‡
PM_SUPPORT


305 
	$xdma_pm_¥ï¨e
(
devi˚
 *
dev
)

308 
DrivîSèã
 = 
PM_PREPARE
;

310 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_prepare\n");

312 
	}
}

313 
	$xdma_pm_com∂ëe
(
devi˚
 *
dev
)

315 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_complete\n");

317 
	}
}

319 
	$xdma_pm_su•íd
(
devi˚
 *
dev
)

321 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

322 
Dma_Engöe
 *
txïå
[16], *
rxïå
[16];

323 
ãng
[16], 
ªng
[16];

324 
Dma_Engöe
 * 
ïå
;

325 
Dma_BdRög
 *
Ωå
;

326 
U£rPås
 * 
u±r
;

327 
¥ivD©a
 *
Õ
;

328 
i
,
j
, 
t
,
r
;

329 
‰ì_bd_cou¡
;

330 #ifde‡
TH_BH_ISR


331 #ifde‡
X86_64


332 
u32
 
gúqvÆ
;

333 
u64
 
ba£
;

335 
u32
 
gúqvÆ
, 
ba£
;

339 
	`log_vîbo£
(
KERN_ERR
 "PM.... begin: xdma_pm_suspend\n");

341 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

342 
txïå
[0] = 
NULL
;

343 
rxïå
[0] = 
NULL
;

348 
	`log_vîbo£
(
KERN_ERR
 "PM.... step1: getállÅxándÑxÉnginesÅo be down\n");

349 
i
=0,
t
=0,
r
=0; i<
MAX_DMA_ENGINES
; i++)

351 
ïå
 = &(
Õ
->
Dma
[
i
]);

352 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

355 
u±r
 = &(
ïå
->
u£r
);

356 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

359 
Ωå
 = &(
ïå
->
BdRög
);

360 if(
Ωå
->
IsRxCh™√l
){

361 
rxïå
[
r
] = 
ïå
;

362 
ªng
[
r
] = 
i
;

363 
r
++;

366 
txïå
[
t
] = 
ïå
;

367 
ãng
[
t
] = 
i
;

368 
t
++;

371 
txïå
[
t
] = 
NULL
;

372 
rxïå
[
r
] = 
NULL
;

377 
i
=0; i<
MAX_DMA_ENGINES
; i++)

379 
ïå
 = &(
Õ
->
Dma
[
i
]);

380 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

383 
u±r
 = &(
ïå
->
u£r
);

384 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

387 
Ωå
 = &(
ïå
->
BdRög
);

390 if(
u±r
->
U£rSu•íd_E¨ly
) {

391 
	`log_vîbo£
(
KERN_ERR
 "PM.... cÆlög U£rSu•íd_E¨ly f‹Éngöê%d\n", 
i
);

392 (
u±r
->
U£rSu•íd_E¨ly
)(
ïå
, 
NULL
, u±r->
¥ivD©a
);

393 
	`m¶ìp
(3);

397 
	`m¶ìp
(1000);

402 
i
=0; 
txïå
[i] !
NULL
; i++)

404 
ïå
 = 
txïå
[
i
];

405 
u±r
 = &(
ïå
->
u£r
);

406 
Ωå
 = &(
ïå
->
BdRög
);

408 if(!(
u±r
->
U£rSu•íd_E¨ly
) )

411 
	`log_vîbo£
(
KERN_ERR
 "PM.... waôög f‹ TX bdrög fªêf‹Éngöe:%d\n", 
ãng
[
i
]);

414 
j
=0;

416 
‰ì_bd_cou¡
 = 
	`Dma_mBdRögGëFªeC¡
(
Ωå
);

417 
	`log_vîbo£
(
KERN_ERR
 "%d:Åxeng free_bd_count=%d DMA_BD_CNT=%d\n",

418 
ãng
[
i
], 
‰ì_bd_cou¡
, 
DMA_BD_CNT
);

419 
	`m¶ìp
(3);

420 } (
‰ì_bd_cou¡
+2Ë< (
DMA_BD_CNT
) );

426 
i
=0; 
rxïå
[i] !
NULL
; i++)

428 
ïå
 = 
rxïå
[
i
];

429 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

432 
u±r
 = &(
ïå
->
u£r
);

433 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

436 
Ωå
 = &(
ïå
->
BdRög
);

437 if(!(
u±r
->
U£rSu•íd_E¨ly
) )

440 
	`log_vîbo£
(
KERN_ERR
 "PM.... waôög f‹ RX bdrög fuŒ f‹Éngöê“ÿrx):%d\n", 
ªng
[
i
]);

442 
j
=0;

444 
‰ì_bd_cou¡
 = 
	`Dma_mBdRögGëFªeC¡
(
Ωå
);

445 
	`log_vîbo£
(
KERN_ERR
 "%d:Ñxeng free_bd_count=%d DMA_BD_CNT=%d\n",

446 
ªng
[
i
], 
‰ì_bd_cou¡
, 
DMA_BD_CNT
);

447 
	`m¶ìp
(100);

448 } 
‰ì_bd_cou¡
 > 2);

450 
	`m¶ìp
(2);

453 
i
=0; i<
MAX_DMA_ENGINES
; i++)

455 
ïå
 = &(
Õ
->
Dma
[
i
]);

456 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

459 
u±r
 = &(
ïå
->
u£r
);

460 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

463 if(!(
u±r
->
U£rSu•íd_E¨ly
) )

466 
	`log_vîbo£
(
KERN_ERR
 "PM.... fªeögÅhêdes¸ùt‹ÅabÀ f‹Éngöê:%d\n", 
ªng
[
i
]);

467 
	`des¸ùt‹_‰ì
(
pdev
, 
ïå
);

473 
i
=0; i<
MAX_DMA_ENGINES
; i++)

475 
ïå
 = &(
Õ
->
Dma
[
i
]);

476 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

479 
u±r
 = &(
ïå
->
u£r
);

480 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

483 
Ωå
 = &(
ïå
->
BdRög
);

486 if(
u±r
->
U£rSu•íd_L©e
) {

487 
	`log_vîbo£
(
KERN_ERR
 "PM.... calling UserSuspend_Late\n");

488 (
u±r
->
U£rSu•íd_L©e
)(
ïå
, 
NULL
, u±r->
¥ivD©a
);

489 
	`m¶ìp
(1);

497 
	`log_vîbo£
(
KERN_ERR
 "PM.... disable interrupts,timers,polling\n");

498 
	`•ö_lock_bh
(&
DmaSètsLock
);

499 
	`dñ_timî_sync
(&
°©s_timî
);

500 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

502 
	`•ö_lock_bh
(&
DmaLock
);

503 
	`dñ_timî_sync
(&
pﬁl_timî
);

504 
	`•ö_u∆ock_bh
(&
DmaLock
);

506 #ifde‡
TH_BH_ISR


507 #ifde‡
X86_64


508 
ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

510 
ba£
 = (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

512 
	`Dma_mI¡DißbÀ
(
ba£
);

514 
	`‰ì_úq
(
pdev
->
úq
,Ödev);

515 if(
MSIE«bÀd
Ë
	`pci_dißbÀ_msi
(
pdev
);

516 
gúqvÆ
 = 
	`Dma_mRódReg
(
ba£
, 
REG_DMA_CTRL_STATUS
);

517 
	`log_vîbo£
("Whûêdißblög i¡îru±s, gŸ %x\n", 
gúqvÆ
);

524 
	`log_vîbo£
(
KERN_ERR
 "PM.... doing DMA, BDÑeset.\n");

525 
i
=0; i<
MAX_DMA_ENGINES
; i++)

527 
ïå
 = &(
Õ
->
Dma
[
i
]);

529 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

532 
	`log_vîbo£
(
KERN_ERR
 "PM.... doög BD st› %d.\n",
i
);

533 
	`Dma_Re£t
(
ïå
);

536 
	`m¶ìp
(5);

538 
	`pci_dißbÀ_devi˚
(
pdev
);

540 
	`log_vîbo£
(
KERN_ERR
 "PM....Öci_save_state\n");

541 
	`pci_ßve_°©e
(
pdev
);

545 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xdma_pm_suspend\n");

547 
	}
}

549 
	$xdma_pm_ªsume
(
devi˚
 *
dev
)

551 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

552 
Dma_Engöe
 * 
ïå
;

553 
U£rPås
 * 
u±r
;

554 
¥ivD©a
 *
Õ
;

555 
i
;

556 
pciRë
;

557 #ifde‡
X86_64


558 
u64
 
b¨ba£
;

560 
u32
 
b¨ba£
;

562 
	`log_vîbo£
(
KERN_ERR
 "PM.... begin: xdma_pm_resume\n");

563 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

572 
	`pci_ª°‹e_°©e
(
pdev
);

573 
pciRë
 = 
	`pci_íabÀ_devi˚
(
pdev
);

574 i‡(
pciRë
 < 0)

576 
	`log_vîbo£
(
KERN_ERR
 "PM....Ñesume: PCI deviceÉnable failed.\n");

577  
pciRë
;

579 
	`log_vîbo£
(
KERN_ERR
 ".... set master.\n");

580 
	`pci_£t_ma°î
(
pdev
);

582 
	`log_vîbo£
(
KERN_ERR
 "B¨ mask i†0x%x\n", (
dmaD©a
->
b¨Mask
));

583 
	`log_vîbo£
(
KERN_ERR
 "DMA Ba£ VA %x\n", (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
));

586 
i
=0; i<
MAX_DMA_ENGINES
; i++)

588 
d°©sRód
[
i
] = 
d°©sWrôe
[i] = 
d°©sNum
[i] = 0;

589 
s°©sRód
[
i
] = 
s°©sWrôe
[i] = 
s°©sNum
[i] = 0;

590 
SWøã
[
i
] = 0;

592 
t°©sRód
 = 
t°©sWrôe
 = 
t°©sNum
 = 0;

595 
DrivîSèã
 = 
INITIALIZED
;

600 
i
=0; i<
MAX_DMA_ENGINES
; i++)

602 
ïå
 = &(
Õ
->
Dma
[
i
]);

603 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

606 
u±r
 = &(
ïå
->
u£r
);

607 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

609 #ifde‡
X86_64


610 
b¨ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

612 
b¨ba£
 = (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

614 
u±r
->
vîsi⁄Reg
 = (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
Ë+
PCIE_DESIGN_VERSION
;

615 if(
u±r
->
U£rResume
) {

616 
	`log_vîbo£
(
KERN_ERR
 ".... invokêU£rInô wôh b¨ba£ 0x%x\n", 
b¨ba£
);

617 (
u±r
->
U£rInô
)(
b¨ba£
, u±r->
¥ivD©a
);

620 
	`log_vîbo£
(
KERN_ERR
 ".... invokêdes¸ùt‹_öô f‹Éng %d\n", 
i
);

621 
	`des¸ùt‹_öô
(
ïå
->
pdev
,Éptr);

623 
	`log_vîbo£
(
KERN_ERR
 ".... invokêDma_BdrögSèπ f‹Éngöê%d\n", 
i
);

624 
	`Dma_BdRögSèπ
(&(
ïå
->
BdRög
));

626 if(
u±r
->
U£rResume
) {

627 
	`log_vîbo£
(
KERN_ERR
 "PM.... invokêU£rResume,Éngöe:%d\n", 
i
);

628 (
u±r
->
U£rResume
)(
ïå
, 
NULL
, u±r->
¥ivD©a
);

636 
	`¥ötk
(
KERN_ERR
 ".... sèπög sèt†pﬁ»routöêwôh %x\n",(
u32
)
pdev
);

638 
°©s_timî
.
expúes
=
jiffõs
 + 
HZ
;

639 
°©s_timî
.
d©a
=(Ë
pdev
;

640 
	`add_timî
(&
°©s_timî
);

643 
	`¥ötk
(
KERN_ERR
 ".... sèπögÖﬁ»routöêwôh %x\n", (
u32
)
pdev
);

644 
pﬁl_timî
.
expúes
=
jiffõs
 + (
HZ
/500);

645 
pﬁl_timî
.
d©a
=(Ë
pdev
;

646 
	`add_timî
(&
pﬁl_timî
);

648 #ifde‡
TH_BH_ISR


650 if(!
	`pci_íabÀ_msi
(
pdev
))

652 
	`log_vîbo£
(
KERN_ERR
 "MSIÉnabled\n");

653 
MSIE«bÀd
 = 1;

657 
i
=0; i<
MAX_DMA_ENGINES
; i++)

658 
La°I¡r
[
i
] = 
jiffõs
;

659 
	`Dma_mI¡E«bÀ
(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

662 
	`log_vîbo£
("VÆuêo‡HZ i†%d\n", 
HZ
);

666 
DrivîSèã
 = 
INITIALIZED
;

667 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xdma_pm_resume\n");

670 
	}
}

673 
	$xdma_pm_‰ìze
(
devi˚
 *
dev
)

675 
pci_dev
 *
pdev
 = 
	`to_pci_dev
(
dev
);

677 
	`log_vîbo£
(
KERN_ERR
 "PM.... begin: xdma_pm_freeze\n");

678 
	`xdma_pm_su•íd
(
dev
);

680 
	`log_vîbo£
(
KERN_ERR
 "PM....Öci_save_state\n");

681 
	`pci_ßve_°©e
(
pdev
);

683 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xdma_pm_freeze\n");

685 
	}
}

686 
	$xdma_pm_thaw
(
devi˚
 *
dev
)

688 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_thaw\n");

690 
	}
}

691 
	$xdma_pm_powîoff
(
devi˚
 *
dev
)

694 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_poweroff\n");

697 
	}
}

698 
	$xdma_pm_ª°‹e
(
devi˚
 *
dev
)

701 
	`log_vîbo£
(
KERN_ERR
 "PM.... begin: xdma_pm_restore\n");

702 
	`log_vîbo£
(
KERN_ERR
 "PM.... invoke xdma_pm_resume from xdma_pm_restore\n");

703 
	`xdma_pm_ªsume
(
dev
);

705 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xdma_pm_restore\n");

707 
	}
}

710 
	$xdma_pm_su•íd_noúq
(
devi˚
 *
dev
)

712 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_suspend_noirq\n");

714 
	}
}

715 
	$xdma_pm_ªsume_noúq
(
devi˚
 *
dev
)

717 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_resume_noirq\n");

719 
	}
}

720 
	$xdma_pm_‰ìze_noúq
(
devi˚
 *
dev
)

722 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_freeze_noirq\n");

724 
	}
}

725 
	$xdma_pm_thaw_noúq
(
devi˚
 *
dev
)

727 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_thaw_noirq\n");

729 
	}
}

730 
	$xdma_pm_powîoff_noúq
(
devi˚
 *
dev
)

732 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_poweroff_noirq\n");

734 
	}
}

735 
	$xdma_pm_ª°‹e_noúq
(
devi˚
 *
dev
)

737 
	`log_vîbo£
(
KERN_ERR
 "PM.... xdma_pm_restore_noirq\n");

739 
	}
}

741 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,33))

742 
pm_ext_›s
 
	gxdma_pm_›s
 = {

743 .
ba£
 = {

744 .
¥ï¨e
 = 
xdma_pm_¥ï¨e
,

745 .
	gcom∂ëe
 = 
xdma_pm_com∂ëe
,

746 .
	gsu•íd
 = 
xdma_pm_su•íd
,

747 .
	gªsume
 = 
xdma_pm_ªsume
,

748 .
	g‰ìze
 = 
xdma_pm_‰ìze
,

749 .
	gthaw
 = 
xdma_pm_thaw
,

750 .
	gpowîoff
 = 
xdma_pm_powîoff
,

751 .
	gª°‹e
 = 
xdma_pm_ª°‹e
,

754 .
	gsu•íd_noúq
 = 
xdma_pm_su•íd_noúq
,

755 .
	gªsume_noúq
 = 
xdma_pm_ªsume_noúq
,

756 .
	g‰ìze_noúq
 = 
xdma_pm_‰ìze_noúq
,

757 .
	gthaw_noúq
 = 
xdma_pm_thaw_noúq
,

758 .
	gpowîoff_noúq
 = 
xdma_pm_powîoff_noúq
,

759 .
	gª°‹e_noúq
 = 
xdma_pm_ª°‹e_noúq
,

762 
dev_pm_›s
 
	gxdma_pm_›s
 = {

763 .
¥ï¨e
 = 
xdma_pm_¥ï¨e
,

764 .
	gcom∂ëe
 = 
xdma_pm_com∂ëe
,

765 .
	gsu•íd
 = 
xdma_pm_su•íd
,

766 .
	gªsume
 = 
xdma_pm_ªsume
,

767 .
	g‰ìze
 = 
xdma_pm_‰ìze
,

768 .
	gthaw
 = 
xdma_pm_thaw
,

769 .
	gpowîoff
 = 
xdma_pm_powîoff
,

770 .
	gª°‹e
 = 
xdma_pm_ª°‹e
,

771 .
	gsu•íd_noúq
 = 
xdma_pm_su•íd_noúq
,

772 .
	gªsume_noúq
 = 
xdma_pm_ªsume_noúq
,

773 .
	g‰ìze_noúq
 = 
xdma_pm_‰ìze_noúq
,

774 .
	gthaw_noúq
 = 
xdma_pm_thaw_noúq
,

775 .
	gpowîoff_noúq
 = 
xdma_pm_powîoff_noúq
,

776 .
	gª°‹e_noúq
 = 
xdma_pm_ª°‹e_noúq
,

781 #ifde‡
PM_SUPPORT


782 
	#PM_OPS
 (&
xdma_pm_›s
)

	)

784 
	#PM_OPS
 
NULL


	)

788 
pci_drivî
 
	gxdma_drivî
 = {

789 .
«me
 = 
DRIVER_NAME
,

790 .
	gid_èbÀ
 = 
ids
,

791 .
	g¥obe
 = 
xdma_¥obe
,

792 .
	gªmove
 = 
__devexô_p
(
xdma_ªmove
),

793 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,33))

794 .
	gpm
 = 
PM_OPS
,

796 .
	gdrivî
.
	gpm
 = 
PM_OPS
,

803 
PktPoﬁ
 * 
	$DQPoﬁ
()

805 
PktPoﬁ
 * 
µoﬁ
;

806 
Êags
;

808 
	`•ö_lock_úqßve
(&
PktPoﬁLock
, 
Êags
);

809 
µoﬁ
 = 
pktPoﬁHód
;

810 
pktPoﬁHód
 = 
µoﬁ
->
√xt
;

811 if(
pktPoﬁHód
 =
NULL
)

812 
	`log_vîbo£
(
KERN_ERR
 "pktPoolHead is NULL. This shouldÇever happen\n");

813 
	`•ö_u∆ock_úqª°‹e
(&
PktPoﬁLock
, 
Êags
);

815  
µoﬁ
;

816 
	}
}

818 
	$EQPoﬁ
(
PktPoﬁ
 * 
µ
)

820 
Êags
;

822 
	`•ö_lock_úqßve
(&
PktPoﬁLock
, 
Êags
);

823 
pktPoﬁTaû
->
√xt
 = 
µ
;

824 
µ
->
√xt
 = 
NULL
;

825 
pktPoﬁTaû
 = 
µ
;

826 
	`•ö_u∆ock_úqª°‹e
(&
PktPoﬁLock
, 
Êags
);

827 
	}
}

829 #ifde‡
TH_BH_ISR


831 
	$I¡rBH
(
unu£d
)

833 
pci_dev
 *
pdev
;

834 
¥ivD©a
 *
Õ
;

835 
Dma_Engöe
 * 
ïå
;

836 
Êags
;

837 
i
;

839 
pdev
 = 
dmaD©a
->pdev;

840 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

842 
	`log_vîbo£
("I¡rBH wôh PídögMask %Œx\n", 
PídögMask
);

844 
i
=0; 
PídögMask
 && i<
MAX_DMA_ENGINES
; i++)

846 if(!(
PídögMask
 & (1LL << 
i
))) ;

847 
	`•ö_lock_úqßve
(&
I¡rLock
, 
Êags
);

852 
PídögMask
 &~(1LL << 
i
);

854 
	`•ö_u∆ock_úqª°‹e
(&
I¡rLock
, 
Êags
);

856 
ïå
 = &(
Õ
->
Dma
[
i
]);

857 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

860 
	`PktH™dÀr
(
i
, 
ïå
);

862 
	`•ö_lock_úqßve
(&
I¡rLock
, 
Êags
);

863 
	`Dma_mEngI¡E«bÀ
(
ïå
);

866 
La°I¡r
[
i
] = 
jiffõs
;

867 
	`•ö_u∆ock_úqª°‹e
(&
I¡rLock
, 
Êags
);

869 
	}
}

871 
u32
 
	$Acks
(
u32
 
dúqvÆ
)

873 
u32
 
ªtvÆ
=0;

875 
ªtvÆ
 |(
dúqvÆ
 & 
DMA_ENG_ENABLE_MASK
Ë? 
DMA_ENG_ENABLE
 : 0;

876 
ªtvÆ
 |(
dúqvÆ
 & 
DMA_ENG_INT_ACTIVE_MASK
Ë? 
DMA_ENG_INT_ACK
 : 0;

877 
ªtvÆ
 |(
dúqvÆ
 & 
DMA_ENG_INT_BDCOMP
Ë? 
DMA_ENG_INT_BDCOMP_ACK
 : 0;

878 
ªtvÆ
 |(
dúqvÆ
 & 
DMA_ENG_INT_ALERR
Ë? 
DMA_ENG_INT_ALERR_ACK
 : 0;

879 
ªtvÆ
 |(
dúqvÆ
 & 
DMA_ENG_INT_FETERR
Ë? 
DMA_ENG_INT_FETERR_ACK
 : 0;

880 
ªtvÆ
 |(
dúqvÆ
 & 
DMA_ENG_INT_ABORTERR
Ë? 
DMA_ENG_INT_ABORTERR_ACK
 : 0;

881 
ªtvÆ
 |(
dúqvÆ
 & 
DMA_ENG_INT_CHAINEND
Ë? 
DMA_ENG_INT_CHAINEND_ACK
 : 0;

883 if(
dúqvÆ
 & 
DMA_ENG_INT_ACTIVE_MASK
)

884 
ªtvÆ
 &~(
DMA_ENG_INT_ENABLE
); \

886 
	`log_vîbo£
(
KERN_INFO
 "Ackög %x wôh %x\n", 
dúqvÆ
, 
ªtvÆ
);

887  
ªtvÆ
;

888 
	}
}

894 
	$I¡rCheck
(
pci_dev
 * 
dev
)

896 
u32
 
gúqvÆ
, 
dúqvÆ
;

897 
¥ivD©a
 *
Õ
;

898 #ifde‡
X86_64


899 
u64
 
ba£
;

900 
u32
 
imask
;

902 
u32
 
ba£
, 
imask
;

904 
Dma_Engöe
 * 
ïå
;

905 
i
, 
ªtvÆ
=
XST_FAILURE
;

906 
cou¡0
=0, 
cou¡1
=0, 
cou¡2
=0, 
cou¡3
=0;

908 
Õ
 = 
	`pci_gë_drvd©a
(
dev
);

909 
	`log_vîbo£
(
KERN_INFO
 "I¡rCheck: devi˚ %x\n", (
u32
Ë
dev
);

910 #ifde‡
X86_64


911 
ba£
 = (
Õ
->
b¨Info
[0].
ba£VAddr
);

913 
ba£
 = (
u32
)(
Õ
->
b¨Info
[0].
ba£VAddr
);

915 
gúqvÆ
 = 
	`Dma_mRódReg
(
ba£
, 
REG_DMA_CTRL_STATUS
);

921 
imask
 = (
gúqvÆ
 & 
DMA_S2C_ENG_INT_VAL
) >> 16;

922 
i
=0; i<7; i++)

924 if(!
imask
) ;

925 if(!(
imask
 & (0x01<<
i
))) ;

927 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

930 
ïå
 = &(
Õ
->
Dma
[
i
]);

932 
dúqvÆ
 = 
	`Dma_mGëCrSr
(
ïå
);

933 
	`log_vîbo£
("Eng %d: dúqvÆ i†%x\n", 
i
, 
dúqvÆ
);

938 if((
dúqvÆ
 & 
DMA_ENG_INT_ACTIVE_MASK
) &&

939 (
dúqvÆ
 & 
DMA_ENG_INT_ENABLE
))

941 
	`•ö_lock
(&
I¡rLock
);

942 
	`Dma_mSëCrSr
(
ïå
, 
	`Acks
(
dúqvÆ
)); \

944 if(
dúqvÆ
 & (
DMA_ENG_INT_ALERR
|
DMA_ENG_INT_FETERR
|
DMA_ENG_INT_ABORTERR
))

945 
	`log_vîbo£
("Eng %d: CamêwôhÉº‹ dúqvÆ %x\n", 
i
, 
dúqvÆ
);

946 if(
dúqvÆ
 & 
DMA_ENG_INT_BDCOMP
)

948 
PídögMask
 |(1LL << 
i
);

950 
	`•ö_u∆ock
(&
I¡rLock
);

952 if(
i
==0Ë
cou¡0
++;

953 if(
i
==1Ë
cou¡1
++;

954 
ªtvÆ
 = 
XST_SUCCESS
;

956 if(
dúqvÆ
 & 
DMA_ENG_INT_ACTIVE_MASK
Ë
	`log_n‹mÆ
("1");

960 
imask
 = (
gúqvÆ
 & 
DMA_C2S_ENG_INT_VAL
) >> 24;

961 
i
=32; i<39; i++)

963 if(!
imask
) ;

964 if(!(
imask
 & (0x01<<(
i
-32)))) ;

966 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

969 
ïå
 = &(
Õ
->
Dma
[
i
]);

971 
dúqvÆ
 = 
	`Dma_mGëCrSr
(
ïå
);

972 
	`log_vîbo£
("Eng %d: dúqvÆ i†%x\n", 
i
, 
dúqvÆ
);

977 if((
dúqvÆ
 & 
DMA_ENG_INT_ACTIVE_MASK
) &&

978 (
dúqvÆ
 & 
DMA_ENG_INT_ENABLE
))

980 
	`•ö_lock
(&
I¡rLock
);

981 
	`Dma_mEngI¡Ack
(
ïå
, 
	`Acks
(
dúqvÆ
));

983 if(
dúqvÆ
 & (
DMA_ENG_INT_ALERR
|
DMA_ENG_INT_FETERR
|
DMA_ENG_INT_ABORTERR
))

984 
	`log_vîbo£
("Eng %d: CamêwôhÉº‹ dúqvÆ %x\n", 
i
, 
dúqvÆ
);

985 if(
dúqvÆ
 & 
DMA_ENG_INT_BDCOMP
)

987 
	`Dma_mEngI¡DißbÀ
(
ïå
);

988 
PídögMask
 |(1LL << 
i
);

990 
	`•ö_u∆ock
(&
I¡rLock
);

992 if(
i
==32Ë
cou¡2
++;

993 if(
i
==33Ë
cou¡3
++;

994 
ªtvÆ
 = 
XST_SUCCESS
;

996 if(
dúqvÆ
 & 
DMA_ENG_INT_ACTIVE_MASK
Ë
	`log_n‹mÆ
("~");

999 
	`•ö_lock
(&
I¡rLock
);

1000 if(
PídögMask
 && (
ªtvÆ
 =
XST_SUCCESS
))

1002 
	`èskÀt_scheduÀ
(&
DmaBH
);

1004 
	`•ö_u∆ock
(&
I¡rLock
);

1006  
ªtvÆ
;

1007 
	}
}

1009 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,19)

1010 
úqªtu∫_t
 
	$DmaI¡îru±
(
úq
, *
dev_id
, 
±_ªgs
 *
ªgs
)

1012 
úqªtu∫_t
 
	$DmaI¡îru±
(
úq
, *
dev_id
)

1015 
pci_dev
 *
dev
 = 
dev_id
;

1018 if(
	`I¡rCheck
(
dev
Ë=
XST_SUCCESS
)

1019  
IRQ_HANDLED
;

1021  
IRQ_NONE
;

1022 
	}
}

1028 
	$PktH™dÀr
(
íg
, 
Dma_Engöe
 * 
ïå
)

1030 
pci_dev
 * 
pdev
;

1031 
Dma_BdRög
 * 
Ωå
;

1032 
U£rPås
 * 
u±r
;

1033 
Dma_Bd
 *
BdPå
, *
BdCurPå
;

1034 
ªsu…
 = 
XST_SUCCESS
;

1035 
bd_¥o˚s£d
, 
bd_¥o˚s£d_ßve
;

1036 
dma_addr_t
 
bufPA
;

1037 
j
;

1038 
txcou¡
 = 0;

1039 
rxcou¡
 = 0;

1040 
PktBuf
 * 
pbuf
;

1041 
PktPoﬁ
 * 
µoﬁ
;

1042 
u32
 
Êag
;

1043 * 
bufInfo
;

1045 
Ωå
 = &(
ïå
->
BdRög
);

1046 
u±r
 = &(
ïå
->
u£r
);

1047 
pdev
 = 
ïå
->pdev;

1049 if(
Ωå
->
IsRxCh™√l
)

1050 
Êag
 = 
PCI_DMA_FROMDEVICE
;

1051 
Êag
 = 
PCI_DMA_TODEVICE
;

1054 
	`•ö_lock_bh
(&
DmaLock
);

1057 
bd_¥o˚s£d_ßve
 = 0;

1058 i‡((
bd_¥o˚s£d
 = 
	`Dma_BdRögFromHw
(
Ωå
, 
DMA_BD_CNT
, &
BdPå
)) > 0)

1062 
µoﬁ
 = 
	`DQPoﬁ
();

1064 if(
Ωå
->
IsRxCh™√l
Ë
rxcou¡
 +
bd_¥o˚s£d
;

1065 
txcou¡
 +
bd_¥o˚s£d
;

1067 
bd_¥o˚s£d_ßve
 = 
bd_¥o˚s£d
;

1068 
BdCurPå
 = 
BdPå
;

1069 
j
 = 0;

1072 
pbuf
 = &((
µoﬁ
->pbuf)[
j
]);

1073 
bufPA
 = (
dma_addr_t
Ë
	`Dma_mBdGëBufAddr
(
BdCurPå
);

1074 
bufInfo
 = (*)
	`Dma_mBdGëId
(
BdCurPå
);

1076 if(
Êag
 =
PCI_DMA_FROMDEVICE
)

1078 
pbuf
->
size
 = 
	`Dma_mBdGëSètLígth
(
BdCurPå
);

1079 
pbuf
->
bufInfo
 = bufInfo;

1080 
pbuf
->
Êags
 = 
	`Dma_mBdGëSètus
(
BdCurPå
);

1081 
pbuf
->
u£rInfo
 = 
	`Dma_mBdGëU£rD©a
(
BdCurPå
);

1082 
pbuf
->
∑geAddr
 = (*)
	`Dma_mBdGëPageAddr
(
BdCurPå
);

1085 if–
pbuf
->
∑geAddr
 !
NULL
)

1087 if(!
	`PageRe£rved
(
pbuf
->
∑geAddr
))

1089 
	`SëPageDúty
(
pbuf
->
∑geAddr
);

1093 
	`¥ötk
("###SetPage###");

1099 
	`pci_unm≠_∑ge
(
pdev
, 
bufPA
,0x1000, 
Êag
);

1104 
bufPA
 = 
	`Dma_mBdGëBufAddr
(
BdCurPå
);

1105 
pbuf
->
size
 = 
	`Dma_mBdGëSètLígth
(
BdCurPå
);

1106 
pbuf
->
Êags
 = 
	`Dma_mBdGëCål
(
BdCurPå
);

1107 
pbuf
->
bufInfo
 = (*)
	`Dma_mBdGëId
(
BdCurPå
);

1108 
pbuf
->
∑geAddr
 = (*)
	`Dma_mBdGëPageAddr
(
BdCurPå
);

1111 
	`pci_unm≠_∑ge
(
pdev
, 
bufPA
, 
pbuf
->
size
, 
Êag
);

1117 #ifde‡
X86_64


1118 
	`Dma_mBdSëId_NULL
(
BdCurPå
, 
NULL
);

1119 
	`Dma_mBdSëPageAddr
(
BdCurPå
,
NULL
);

1121 
	`Dma_mBdSëId
(
BdCurPå
, 
NULL
);

1122 
	`Dma_mBdSëPageAddr
(
BdCurPå
,
NULL
);

1125 
	`Dma_mBdSëSètus
(
BdCurPå
,0);

1127 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

1128 
bd_¥o˚s£d
--;

1129 
j
++;

1132 
	`•ö_lock_bh
(&
DmaSètsLock
);

1133 
SWøã
[
íg
] +
pbuf
->
size
;

1134 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

1135 } 
bd_¥o˚s£d
 > 0);

1137 
ªsu…
 = 
	`Dma_BdRögFªe
(
Ωå
, 
bd_¥o˚s£d_ßve
, 
BdPå
);

1138 i‡(
ªsu…
 !
XST_SUCCESS
) {

1139 
	`¥ötk
(
KERN_ERR
 "PktH™dÀr: BdRögFªe(Ëîr‹ %d.\n", 
ªsu…
);

1140 
	`EQPoﬁ
(
µoﬁ
);

1141 
	`•ö_u∆ock_bh
(&
DmaLock
);

1145 
	`•ö_u∆ock_bh
(&
DmaLock
);

1146 i‡(
bd_¥o˚s£d_ßve
)

1148 
	`log_vîbo£
(
KERN_INFO
 "PktH™dÀ∏¥o˚s£d %d BDs\n", 
bd_¥o˚s£d_ßve
);

1149 (
u±r
->
U£rPutPkt
)(
ïå
, 
µoﬁ
->
pbuf
, 
bd_¥o˚s£d_ßve
, u±r->
¥ivD©a
);

1152 
	`EQPoﬁ
(
µoﬁ
);

1153 
	`•ö_lock_bh
(&
DmaLock
);

1155 if(
u±r
->
mode
 =
ETHERNET_APPMODE
)

1158 if(
Ωå
->
IsRxCh™√l
)

1161 
	`DmaSëupRecvBuf„rs
(
pdev
, 
ïå
);

1164 
	`•ö_u∆ock_bh
(&
DmaLock
);

1165 
	}
}

1168 
	$pﬁl_routöe
(
__›aque
)

1170 
pci_dev
 *
pdev
 = (pci_dev *)
__›aque
;

1171 
Dma_Engöe
 * 
ïå
;

1172 
¥ivD©a
 *
Õ
;

1173 
i
, 
off£t
;

1175 if(
DrivîSèã
 =
UNREGISTERING
)

1178 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

1180 
i
=0; i<
MAX_DMA_ENGINES
; i++)

1182 #ifde‡
TH_BH_ISR


1186 if(
jiffõs
 < (
La°I¡r
[
i
] + (
HZ
/50))) ;

1189 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

1192 
ïå
 = &(
Õ
->
Dma
[
i
]);

1193 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
)

1199 
	`PktH™dÀr
(
i
, 
ïå
);

1205 #ifde‡
TH_BH_ISR


1206 
off£t
 = 
HZ
 / 50;

1208 
off£t
 = 0;

1210 
pﬁl_timî
.
expúes
 = 
jiffõs
 + 
off£t
;

1211 
	`add_timî
(&
pﬁl_timî
);

1212 
	}
}

1214 
	$pﬁl_°©s
(
__›aque
)

1216 
pci_dev
 *
pdev
 = (pci_dev *)
__›aque
;

1217 
¥ivD©a
 *
Õ
;

1218 
Dma_Engöe
 * 
ïå
;

1219 
Dma_BdRög
 * 
Ωå
;

1220 
i
, 
off£t
 = 0;

1221 
u32
 
©
, 
wt
, 
cb
, 
t1
, 
t2
;

1222 #ifde‡
X86_64


1223 
u64
 
ba£
;

1225 
u32
 
ba£
;

1228 if(
DrivîSèã
 =
UNREGISTERING
)

1231 #ifde‡
PM_SUPPORT


1232 if(
DrivîSèã
 =
PM_PREPARE
)

1236 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

1237 
	`log_vîbo£
("s%d ", 
	`gë_˝u
());

1240 
i
=0; i<
MAX_DMA_ENGINES
; i++)

1242 if(!((
Õ
->
ígöeMask
Ë& (1LL << 
i
)))

1245 
ïå
 = &(
Õ
->
Dma
[
i
]);

1246 
Ωå
 = &(
ïå
->
BdRög
);

1248 
	`•ö_lock
(&
DmaSètsLock
);

1251 
©
 = 
	`Dma_mRódReg
(
Ωå
->
Ch™Ba£
, 
REG_DMA_ENG_ACTIVE_TIME
);

1252 
wt
 = 
	`Dma_mRódReg
(
Ωå
->
Ch™Ba£
, 
REG_DMA_ENG_WAIT_TIME
);

1253 
cb
 = 
	`Dma_mRódReg
(
Ωå
->
Ch™Ba£
, 
REG_DMA_ENG_COMP_BYTES
);

1259 
DSèts
[
i
][
d°©sWrôe
[i]].
LAT
 = 4*(
©
>>2);

1260 
DSèts
[
i
][
d°©sWrôe
[i]].
LWT
 = 4*(
wt
>>2);

1261 
DSèts
[
i
][
d°©sWrôe
[i]].
LBR
 = 4*(
cb
>>2);

1263 
d°©sWrôe
[
i
] += 1;

1264 if(
d°©sWrôe
[
i
] >
MAX_STATS
) dstatsWrite[i] = 0;

1266 if(
d°©sNum
[
i
] < 
MAX_STATS
)

1267 
d°©sNum
[
i
] += 1;

1271 
d°©sRód
[
i
] += 1;

1272 if(
d°©sRód
[
i
] >
MAX_STATS
) dstatsRead[i] = 0;

1276 
t1
 = 
SWøã
[
i
];

1277 
SSèts
[
i
][
s°©sWrôe
[i]].
LBR
 = 
t1
;

1278 
SWøã
[
i
] = 0;

1279 
s°©sWrôe
[
i
] += 1;

1280 if(
s°©sWrôe
[
i
] >
MAX_STATS
) sstatsWrite[i] = 0;

1282 if(
s°©sNum
[
i
] < 
MAX_STATS
)

1283 
s°©sNum
[
i
] += 1;

1287 
s°©sRód
[
i
] += 1;

1288 if(
s°©sRód
[
i
] >
MAX_STATS
) sstatsRead[i] = 0;

1291 
	`log_n‹mÆ
(
KERN_INFO
 "[%d]:áctive=[%d]%u, wait=[%d]%u, comp bytes=[%d]%u, sw=%u\n",

1292 
i
, (
©
&0x3), 4*◊t>>2), (
wt
&0x3), 4*(wt>>2),

1293 (
cb
&0x3), 4*(cb>>2), 
t1
);

1295 
	`•ö_u∆ock
(&
DmaSètsLock
);

1301 #ifde‡
X86_64


1302 
ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

1304 
ba£
 = (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

1308 
t1
 = 
	`XIo_In32
(
ba£
+
TX_UTIL_BC
);

1309 
t2
 = 
	`XIo_In32
(
ba£
+
RX_UTIL_BC
);

1310 
TSèts
[
t°©sWrôe
].
LTX
 = 4*(
t1
>>2);

1312 
TSèts
[
t°©sWrôe
].
LRX
 = 4*(
t2
>>2);

1314 
t°©sWrôe
 += 1;

1315 if(
t°©sWrôe
 >
MAX_STATS
)ÅstatsWrite = 0;

1317 if(
t°©sNum
 < 
MAX_STATS
)

1318 
t°©sNum
 += 1;

1322 
t°©sRód
 += 1;

1323 if(
t°©sRód
 >
MAX_STATS
)ÅstatsRead = 0;

1327 
t1
 = 
	`XIo_In32
(
ba£
+
UPSTR_MEMWR_BC
);

1328 
t2
 = 
	`XIo_In32
(
ba£
+
DOWNSTR_COMPBYTE_COUNTR
);

1329 #ifde‡
PM_SUPPORT


1330 
	`•ö_lock
(&
DmaSètsLock
);

1331 
pmvÆ
.
vcc
 = 
	`XIo_In32
(
ba£
+
PVTMON_VCCINT
);

1332 
pmvÆ
.
vcˇux
 = 
	`XIo_In32
(
ba£
+
PVTMON_VCCAUX
);

1333 
pmvÆ
.
vcc3v3
 = 
	`XIo_In32
(
ba£
+
PVTMON_VCC3V3
);

1334 
pmvÆ
.
vadj
 = 
	`XIo_In32
(
ba£
+
PVTMON_VADJ
);

1335 
pmvÆ
.
vcc2v5
 = 
	`XIo_In32
(
ba£
+
PVTMON_VCC2V5
);

1336 
pmvÆ
.
vcc1v5
 = 
	`XIo_In32
(
ba£
+
PVTMON_VCC1V5
);

1337 
pmvÆ
.
mgt_avcc
 = 
	`XIo_In32
(
ba£
+
PVTMON_MGT_AVCC
);

1338 
pmvÆ
.
mgt_avâ
 = 
	`XIo_In32
(
ba£
+
PVTMON_MGT_AVTT
);

1339 
pmvÆ
.
vcˇux_io
 = 
	`XIo_In32
(
ba£
+
PVTMON_VCCAUX_IO
);

1340 
pmvÆ
.
vccbøm
 = 
	`XIo_In32
(
ba£
+
PVTMON_VCC_BRAM
);

1341 
pmvÆ
.
mgt_vcˇux
 = 
	`XIo_In32
(
ba£
+
PVTMON_MGT_VCCAUX
);

1342 
pmvÆ
.
pwr_rsvd
 = 
	`XIo_In32
(
ba£
+
PVTMON_RSVD
);

1343 
pmvÆ
.
dõ_ãmp
 = (
	`XIo_In32
(
ba£
+
DIE_TEMP
)*504)/1024 -273;

1344 #ifde‡
DEBUG_VERBOSE


1345 
	`log_vîbo£
(
KERN_INFO
 "VCCINT=%x",
pmvÆ
.
vcc
);

1346 
	`log_vîbo£
(
KERN_INFO
 "VCCAUX=%x",
pmvÆ
.
vcˇux
);

1347 
	`log_vîbo£
(
KERN_INFO
 "VCC3V3=%x",
pmvÆ
.
vcc3v3
);

1348 
	`log_vîbo£
(
KERN_INFO
 "MGT_AVCC=%x",
pmvÆ
.
mgt_avcc
);

1349 
	`log_vîbo£
(
KERN_INFO
 "MGT_AVTT=%x",
pmvÆ
.
mgt_avâ
);

1350 
	`log_vîbo£
(
KERN_INFO
 "VCCAUX_IO=%x",
pmvÆ
.
vcˇux_io
);

1351 
	`log_vîbo£
(
KERN_INFO
 "VCCBRAM=%x",
pmvÆ
.
vccbøm
);

1352 
	`log_vîbo£
(
KERN_INFO
 "DIE_TEMP=%x",
pmvÆ
.
dõ_ãmp
);

1354 
	`•ö_u∆ock
(&
DmaSètsLock
);

1357 
off£t
 = -3;

1358 
°©s_timî
.
expúes
 = 
jiffõs
 + 
HZ
 + 
off£t
;

1359 
	`add_timî
(&
°©s_timî
);

1360 
	}
}

1362 #ifde‡
DEBUG_VERBOSE


1363 
	$di•_‰ag
(* 
addr
, 
u32
 
Àn
)

1365 
i
;

1367 
i
=0; i<
Àn
; i++)

1369 
	`¥ötk
("%02x ", 
addr
[
i
]);

1370 if(!((
i
+1)%4))

1371 
	`¥ötk
(", ");

1372 if(!((
i
+1)%16))

1373 
	`¥ötk
("\n");

1375 
	`¥ötk
("\n");

1376 
	}
}

1383 
	$PutUnu£dPkts
(
Dma_Engöe
 * 
ïå
, 
PktBuf
 * 
pbuf
, 
numpkts
)

1385 
i
;

1386 
U£rPås
 * 
u±r
;

1388 
u±r
 = &(
ïå
->
u£r
);

1390 
i
=0; i < 
numpkts
; i++)

1391 
pbuf
[
i
].
Êags
 = 
PKT_UNUSED
;

1393 (
u±r
->
U£rPutPkt
)(
ïå
, 
pbuf
, 
numpkts
, u±r->
¥ivD©a
);

1394 
	}
}

1400 
	$DmaSëupRecvBuf„rs
(
pci_dev
 *
pdev
, 
Dma_Engöe
 * 
ïå
)

1402 
¥ivD©a
 *
Õ
 = 
NULL
;

1403 
Dma_BdRög
 * 
Ωå
;

1404 
U£rPås
 * 
u±r
;

1405 
‰ì_bd_cou¡
 ;

1406 
numbds
;

1407 
dma_addr_t
 
bufPA
;

1408 
Dma_Bd
 *
BdPå
, *
BdCurPå
;

1409 
ªsu…
, 
num
, 
numgŸ
;

1410 
i
, 
Àn
;

1411 
PktPoﬁ
 * 
µoﬁ
;

1412 #ifde‡
TH_BH_ISR


1413 
u32
 
mask
;

1416 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

1417 
Ωå
 = &(
ïå
->
BdRög
);

1418 
u±r
 = &(
ïå
->
u£r
);

1419 
‰ì_bd_cou¡
 = 
	`Dma_mBdRögGëFªeC¡
(
Ωå
);

1425 if(
‰ì_bd_cou¡
 > 2) free_bd_count -= 2;

1428 
	`log_vîbo£
(
KERN_INFO
 "SëupRecv: FªêBD cou¡ i†%d\n", 
‰ì_bd_cou¡
);

1431 
µoﬁ
 = 
	`DQPoﬁ
();

1433 
numbds
 = 0;

1436 
num
 = 
‰ì_bd_cou¡
;

1437 
	`log_vîbo£
(
KERN_INFO
 "TryögÅÿgë %d buf„r†‰om u£∏drivî\n", 
num
);

1438 
numgŸ
 = (
u±r
->
U£rGëPkt
)(
ïå
, 
µoﬁ
->
pbuf
,É±r->
pktSize
, 
num
, u±r->
¥ivD©a
);

1439 i‡(!
numgŸ
) {

1440 
	`log_vîbo£
(
KERN_ERR
 "CouldÇot getányÖacket for RX from user\n");

1445 
ªsu…
 = 
	`Dma_BdRögAŒoc
(
Ωå
, 
numgŸ
, &
BdPå
);

1446 i‡(
ªsu…
 !
XST_SUCCESS
) {

1448 
	`¥ötk
(
KERN_ERR
 "DmaSetupRecvBuffers: BdRingAlloc unsuccessful (%d)\n",

1449 
ªsu…
);

1450 
	`PutUnu£dPkts
(
ïå
, 
µoﬁ
->
pbuf
, 
numgŸ
);

1454 
	`log_vîbo£
(
KERN_INFO
 "U£∏ªtu∫ed %d RX buf„rs\n", 
numgŸ
);

1455 
BdCurPå
 = 
BdPå
;

1456 
i
 = 0; i < 
numgŸ
; i++)

1458 
PktBuf
 * 
pbuf
;

1460 
pbuf
 = &((
µoﬁ
->pbuf)[
i
]);

1461 
bufPA
 = 
	`pci_m≠_sögÀ
(
pdev
, (
u32
 *)(
pbuf
->
pktBuf
),Öbuf->
size
, 
PCI_DMA_FROMDEVICE
);

1462 
	`log_vîbo£
(
KERN_INFO
 "The bufferáfterálloc isát VA %x PA %x size %d\n",

1463 (
u32
Ë
pbuf
->
pktBuf
, ()
bufPA
,Öbuf->
size
);

1465 
	`Dma_mBdSëBufAddr
(
BdCurPå
, 
bufPA
);

1466 
	`Dma_mBdSëCålLígth
(
BdCurPå
, 
pbuf
->
size
);

1467 
	`Dma_mBdSëId
(
BdCurPå
, 
pbuf
->
bufInfo
);

1468 
	`Dma_mBdSëCål
(
BdCurPå
, 0);

1469 
	`Dma_mBdSëU£rD©a
(
BdCurPå
, 0LL);

1471 #ifde‡
TH_BH_ISR


1475 
mask
 = 
DMA_BD_INT_ERROR_MASK
;

1476 if(!(
ïå
->
öåCou¡
 % 
INT_COAL_CNT
))

1477 
mask
 |
DMA_BD_INT_COMP_MASK
;

1478 
ïå
->
öåCou¡
 += 1;

1479 
	`Dma_mBdSëCål
(
BdCurPå
, 
mask
);

1482 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

1488 
ªsu…
 = 
	`Dma_BdRögToHw
(
Ωå
, 
numgŸ
, 
BdPå
);

1489 i‡(
ªsu…
 !
XST_SUCCESS
) {

1493 
	`¥ötk
(
KERN_ERR
 "DmaSetupRecvBuffers: BdRingToHw unsuccessful (%d)\n",

1494 
ªsu…
);

1495 
BdCurPå
 = 
BdPå
;

1496 
i
=0; i < 
numgŸ
; i++)

1498 
bufPA
 = 
	`Dma_mBdGëBufAddr
(
BdCurPå
);

1499 
Àn
 = 
	`Dma_mBdGëCålLígth
(
BdCurPå
);

1500 
	`pci_unm≠_sögÀ
(
pdev
, 
bufPA
, 
Àn
, 
PCI_DMA_FROMDEVICE
);

1502 #ifde‡
X86_64


1503 
	`Dma_mBdSëId_NULL
(
BdCurPå
, 
NULL
);

1505 
	`Dma_mBdSëId
(
BdCurPå
, 
NULL
);

1507 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

1509 
	`Dma_BdRögUnAŒoc
(
Ωå
, 
numgŸ
, 
BdPå
);

1510 
	`PutUnu£dPkts
(
ïå
, 
µoﬁ
->
pbuf
, 
numgŸ
);

1514 
‰ì_bd_cou¡
 -
numgŸ
;

1515 
numbds
 +
numgŸ
;

1516 
	`log_vîbo£
(
KERN_INFO
 "free_bd_count %d,Çumbds %d,Çumgot %d\n",

1517 
‰ì_bd_cou¡
, 
numbds
, 
numgŸ
);

1518 } 
‰ì_bd_cou¡
 > 0);

1521 
	`EQPoﬁ
(
µoﬁ
);

1523 #ifde‡
DEBUG_VERBOSE


1524 if(
numbds
)

1525 
	`log_vîbo£
(
KERN_INFO
 "DmaSetupRecvBuffers: %dÇew RX BDs queued up\n",

1526 
numbds
);

1528 
	}
}

1546 
	$des¸ùt‹_öô
(
pci_dev
 *
pdev
, 
Dma_Engöe
 * 
ïå
)

1548 
d·size
, 
numbds
;

1549 #ifde‡
X86_64


1550 
u64
 * 
BdPå
;

1552 
u32
 * 
BdPå
;

1554 
dma_addr_t
 
BdPhyAddr
 ;

1555 
ªsu…
;

1556 
u32
 
dñè
 = 0;

1557 
U£rPås
 * 
u±r
;

1559 
u±r
 = &(
ïå
->
u£r
);

1563 
d·size
 = (
u32
Ë* 
DMA_BD_SW_NUM_WORDS
 * (
DMA_BD_CNT
 + 1);

1564 
	`log_n‹mÆ
(
KERN_INFO
 "XDMA: BD s∑˚: %d (0x%0x)\n", 
d·size
, dftsize);

1566 if((
BdPå
 = 
	`pci_Æloc_c⁄si°ít
(
pdev
, 
d·size
, &
BdPhyAddr
)Ë=
NULL
)

1568 
	`¥ötk
(
KERN_ERR
 "BDÑingÖci_alloc_consistent() failed\n");

1572 
	`log_n‹mÆ
(
KERN_INFO
 "BDÑing spaceállocated from %p, PA 0x%x\n",

1573 
BdPå
, ()
BdPhyAddr
);

1574 
numbds
 = 
	`Dma_BdRögAlign
((
u32
)
BdPå
, 
d·size
, 
DMA_BD_MINIMUM_ALIGNMENT
, &
dñè
);

1575 if(
numbds
 <= 0) {

1576 
	`log_n‹mÆ
(
KERN_ERR
 "UnableÅoálignállocated BD space\n");

1581 
ïå
->
descS∑˚PA
 = 
BdPhyAddr
 + 
dñè
;

1582 
ïå
->
descS∑˚VA
 = 
BdPå
 + 
dñè
;

1583 
ïå
->
descS∑˚Size
 = 
d·size
 - 
dñè
;

1584 
ïå
->
dñè
 = delta;

1586 i‡(
ïå
->
descS∑˚VA
 == 0) {

1590 
	`log_n‹mÆ
(
KERN_INFO


1592 (Ë
ïå
->
descS∑˚PA
, (Ëïå->
descS∑˚VA
,

1593 
ïå
->
descS∑˚Size
,É±r->
dñè
);

1594 #ifde‡
X86_64


1595 
ªsu…
 = 
	`Dma_BdRögCª©e
(&(
ïå
->
BdRög
),É±r->
descS∑˚PA
,

1596 
ïå
->
descS∑˚VA
, 
DMA_BD_MINIMUM_ALIGNMENT
, 
numbds
);

1599 
ªsu…
 = 
	`Dma_BdRögCª©e
(&(
ïå
->
BdRög
), (
u32
Ëïå->
descS∑˚PA
,

1600 (
u32
Ë
ïå
->
descS∑˚VA
, 
DMA_BD_MINIMUM_ALIGNMENT
, 
numbds
);

1602 i‡(
ªsu…
 !
XST_SUCCESS
)

1604 
	`¥ötk
(
KERN_ERR
 "XDMA: DMA Rög Cª©e. Eº‹: %d\n", 
ªsu…
);

1605  -
EIO
;

1607 if(
u±r
->
mode
 =
ETHERNET_APPMODE
)

1609 if((
ïå
->
Ty≥
 & 
DMA_ENG_DIRECTION_MASK
Ë=
DMA_ENG_C2S
)

1610 
	`DmaSëupRecvBuf„rs
(
pdev
, 
ïå
);

1612 #ifde‡
DEBUG_VERBOSE


1613 
	`log_vîbo£
(
KERN_INFO
 "BD Ring buffers:\n");

1614 
	`di•_bd_rög
(&
ïå
->
BdRög
);

1618 
	}
}

1639 
	$des¸ùt‹_‰ì
(
pci_dev
 *
pdev
, 
Dma_Engöe
 * 
ïå
)

1641 
Dma_Bd
 *
BdPå
, *
BdCurPå
;

1642 
bd_¥o˚s£d
, 
bd_¥o˚s£d_ßve
;

1643 
Dma_BdRög
 * 
Ωå
;

1644 
U£rPås
 * 
u±r
;

1645 
PktBuf
 * 
pbuf
;

1646 
dma_addr_t
 
bufPA
;

1647 
j
, 
ªsu…
;

1648 
PktPoﬁ
 * 
µoﬁ
;

1649 
u32
 
Êag
;

1651 
	`log_vîbo£
(
KERN_INFO
 "descriptor_free: \n");

1653 
Ωå
 = &(
ïå
->
BdRög
);

1654 
u±r
 = &(
ïå
->
u£r
);

1656 if(
Ωå
->
IsRxCh™√l
Ë
Êag
 = 
PCI_DMA_FROMDEVICE
;

1657 
Êag
 = 
PCI_DMA_TODEVICE
;

1659 
	`•ö_lock_bh
(&
DmaLock
);

1662 
bd_¥o˚s£d_ßve
 = 0;

1663 i‡((
bd_¥o˚s£d
 = 
	`Dma_BdRögF‹˚FromHw
(
Ωå
, 
DMA_BD_CNT
, &
BdPå
)) > 0)

1665 
	`log_n‹mÆ
(
KERN_INFO
 "des¸ùt‹_‰ì: F‹˚d %d BD†‰om hw\n", 
bd_¥o˚s£d
);

1667 
µoﬁ
 = 
	`DQPoﬁ
();

1669 
bd_¥o˚s£d_ßve
 = 
bd_¥o˚s£d
;

1670 
BdCurPå
 = 
BdPå
;

1671 
j
 = 0;

1674 
pbuf
 = &((
µoﬁ
->pbuf)[
j
]);

1676 
bufPA
 = (
dma_addr_t
Ë
	`Dma_mBdGëBufAddr
(
BdCurPå
);

1677 
pbuf
->
size
 = 
	`Dma_mBdGëCålLígth
(
BdCurPå
);

1678 
pbuf
->
bufInfo
 = (*)
	`Dma_mBdGëId
(
BdCurPå
);

1683 
pbuf
->
pktBuf
 =Öbuf->
bufInfo
;

1684 
pbuf
->
Êags
 = 
PKT_UNUSED
;

1685 
pbuf
->
u£rInfo
 = 
	`Dma_mBdGëU£rD©a
(
BdCurPå
);

1686 
pbuf
->
∑geAddr
 = (*)
	`Dma_mBdGëPageAddr
(
BdCurPå
);

1688 #ifde‡
DEBUG_VERBOSE


1689 
	`log_vîbo£
(
KERN_INFO
 "Lígth %d Bu‡%x\n", 
pbuf
->
size
, (
u32
Ë
bufPA
);

1691 
	`pci_unm≠_∑ge
(
pdev
, 
bufPA
, 
pbuf
->
size
, 
Êag
);

1695 #ifde‡
X86_64


1696 
	`Dma_mBdSëId_NULL
(
BdCurPå
, 
NULL
);

1698 
	`Dma_mBdSëId
(
BdCurPå
, 
NULL
);

1700 
	`Dma_mBdSëPageAddr
(
BdCurPå
,
NULL
);

1702 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

1703 
bd_¥o˚s£d
--;

1704 
j
++;

1705 } 
bd_¥o˚s£d
 > 0);

1707 
	`•ö_u∆ock_bh
(&
DmaLock
);

1709 i‡(
bd_¥o˚s£d_ßve
)

1711 
	`log_n‹mÆ
("DmaUƒegi°îÖushög %d buf„r†tÿu£r\n", 
bd_¥o˚s£d_ßve
);

1712 (
u±r
->
U£rPutPkt
)(
ïå
, 
µoﬁ
->
pbuf
, 
bd_¥o˚s£d_ßve
, u±r->
¥ivD©a
);

1715 
	`•ö_lock_bh
(&
DmaLock
);

1717 
ªsu…
 = 
	`Dma_BdRögFªe
(
Ωå
, 
bd_¥o˚s£d_ßve
, 
BdPå
);

1718 i‡(
ªsu…
 !
XST_SUCCESS
) {

1720 
	`¥ötk
(
KERN_ERR
 "DmaUƒegi°î: BdRögFªe(Ëîr‹ %d.\n", 
ªsu…
);

1724 
	`EQPoﬁ
(
µoﬁ
);

1726 
	`•ö_u∆ock_bh
(&
DmaLock
);

1729 i‡(
ïå
->
descS∑˚VA
 == 0) {

1730 
	`¥ötk
(
KERN_ERR
 "UnableÅo free BDÑing NULL\n");

1734 
	`log_vîbo£
(
KERN_INFO


1736 (Ë(
ïå
->
descS∑˚PA
 -É±r->
dñè
),

1737 (Ë(
ïå
->
descS∑˚VA
 -É±r->
dñè
),

1738 (
ïå
->
descS∑˚Size
 +É±r->
dñè
),Éptr->delta);

1739 
	`pci_‰ì_c⁄si°ít
(
pdev
, (
ïå
->
descS∑˚Size
 +É±r->
dñè
),

1740 (
ïå
->
descS∑˚VA
 -É±r->
dñè
),

1741 (
ïå
->
descS∑˚PA
 -É±r->
dñè
));

1743 
	}
}

1745 #ifde‡
DEBUG_VERBOSE


1747 
	$di•_bd_rög
(
Dma_BdRög
 *
bd_rög
)

1749 
num_bds
 = 
bd_rög
->
AŒC¡
;

1750 
u32
 *
d±r
 ;

1751 
idx
;

1753 #ifde‡
DEBUG_VERBOSE


1754 
	`¥ötk
("Ch™Ba£: %p\n", (*Ë
bd_rög
->
Ch™Ba£
);

1755 
	`¥ötk
("Fú°BdPhysAddr: %p\n", (*Ë
bd_rög
->
Fú°BdPhysAddr
);

1756 
	`¥ötk
("Fú°BdAddr: %p\n", (*Ë
bd_rög
->
Fú°BdAddr
);

1757 
	`¥ötk
("La°BdAddr: %p\n", (*Ë
bd_rög
->
La°BdAddr
);

1758 
	`¥ötk
("Lígth: %d (0x%0x)\n", 
bd_rög
->
Lígth
, bd_ring->Length);

1759 
	`¥ötk
("RunSèã: %d (0x%0x)\n", 
bd_rög
->
RunSèã
, bd_ring->RunState);

1760 
	`¥ötk
("Sï¨©i⁄: %d (0x%0x)\n", 
bd_rög
->
Sï¨©i⁄
,

1761 
bd_rög
->
Sï¨©i⁄
);

1762 
	`¥ötk
("BD Cou¡: %d\n", 
bd_rög
->
AŒC¡
);

1764 
	`¥ötk
("\n");

1766 
	`¥ötk
("FªeHód: %p\n", (*Ë
bd_rög
->
FªeHód
);

1767 
	`¥ötk
("PªHód: %p\n", (*Ë
bd_rög
->
PªHód
);

1768 
	`¥ötk
("HwHód: %p\n", (*Ë
bd_rög
->
HwHód
);

1769 
	`¥ötk
("HwTaû: %p\n", (*Ë
bd_rög
->
HwTaû
);

1770 
	`¥ötk
("Po°Hód: %p\n", (*Ë
bd_rög
->
Po°Hód
);

1771 
	`¥ötk
("BdaRe°¨t: %p\n", (*Ë
bd_rög
->
BdaRe°¨t
);

1773 
	`¥ötk
("Rög %∞C⁄ã¡s:\n", 
bd_rög
);

1774 
	`¥ötk
("Idx Status / UStatusL UStatusH CAddrL Control/ SysAddrL SysAddrH NextBD\n");

1775 
	`¥ötk
(" BC CAddrH/BC \n");

1776 
	`¥ötk
("--- -------- -------- -------- -------- -------- -------- -------- --------\n");

1777 #ifde‡
X86_64


1778 
d±r
 = (
Dma_BdRög
 *)
bd_rög
->
Fú°BdAddr
;

1780 
d±r
 = (
u32
 *)
bd_rög
->
Fú°BdAddr
;

1782 
idx
 = 0; idx < 
num_bds
; idx++)

1784 
i
;

1785 
	`¥ötk
("%3d ", 
idx
);

1786 
i
=0; i<8; i++)

1788 
	`¥ötk
("%08x ", *
d±r
);

1789 
d±r
++;

1791 
	`¥ötk
("\n");

1792 
	`¥ötk
(" ");

1793 
i
=0; i<8; i++)

1795 
	`¥ötk
("%08x ", *
d±r
);

1796 
d±r
++;

1798 
	`¥ötk
("\n");

1801 
	`¥ötk
("--------------------------------------- Done ---------------------------------------\n");

1802 
	}
}

1806 #i‡
deföed
(
DEBUG_VERBOSE
Ë|| deföed(
DEBUG_NORMAL
)

1807 
	$RódC⁄fig
(
pci_dev
 * 
pdev
)

1809 
i
;

1810 
u8
 
vÆb
;

1811 
u16
 
vÆw
;

1812 
u32
 
vÆdw
;

1813 
ªg_ba£
, 
ªg_Àn
;

1816 
	`¥ötk
(
KERN_INFO
 "PCI Configuration Space:\n");

1817 
i
=0; i<0x40; i++)

1819 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
i
, &
vÆb
);

1820 
	`¥ötk
("0x%x ", 
vÆb
);

1821 if((
i
 % 0x10) == 0xf)

1822 
	`¥ötk
("\n");

1824 
	`¥ötk
("\n");

1829 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_VENDOR_ID
, &
vÆw
);

1830 
	`¥ötk
("Víd‹ ID: 0x%x, ", 
vÆw
);

1833 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_DEVICE_ID
, &
vÆw
);

1834 
	`¥ötk
("Devi˚ ID: 0x%x, ", 
vÆw
);

1837 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_COMMAND
, &
vÆw
);

1838 
	`¥ötk
("Cmd Reg: 0x%x, ", 
vÆw
);

1841 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_STATUS
, &
vÆw
);

1842 
	`¥ötk
("SèàReg: 0x%x, ", 
vÆw
);

1845 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_REVISION_ID
, &
vÆb
);

1846 
	`¥ötk
("Revisi⁄ ID: 0x%x, ", 
vÆb
);

1856 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_CLASS_PROG
, &
vÆb
);

1857 
	`¥ötk
("Cœs†Prog: 0x%x, ", 
vÆb
);

1860 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_CLASS_DEVICE
, &
vÆw
);

1861 
	`¥ötk
("Devi˚ Cœss: 0x%x, ", 
vÆw
);

1864 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_CACHE_LINE_SIZE
, &
vÆb
);

1865 
	`¥ötk
("CachêLöêSize: 0x%x, ", 
vÆb
);

1868 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_LATENCY_TIMER
, &
vÆb
);

1869 
	`¥ötk
("L©ícy Timî: 0x%x, ", 
vÆb
);

1872 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_HEADER_TYPE
, &
vÆb
);

1873 
	`¥ötk
("Hódî Ty≥: 0x%x, ", 
vÆb
);

1876 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_BIST
, &
vÆb
);

1877 
	`¥ötk
("BIST: 0x%x\n", 
vÆb
);

1880 
i
=0; i<=5; i++)

1883 
ªg_ba£
 = 
	`pci_ªsour˚_°¨t
(
pdev
, 
i
);

1884 
ªg_Àn
 = 
	`pci_ªsour˚_Àn
(
pdev
, 
i
);

1885 
	`¥ötk
("BAR%d: Addr:0x%lx Lí:0x%lx, ", 
i
, 
ªg_ba£
, 
ªg_Àn
);

1888 if((
	`pci_ªsour˚_Êags
(
pdev
, 
i
Ë& 
IORESOURCE_MEM
))

1889 
	`¥ötk
("Region is for memory\n");

1890 if((
	`pci_ªsour˚_Êags
(
pdev
, 
i
Ë& 
IORESOURCE_IO
))

1891 
	`¥ötk
("Region is for I/O\n");

1893 
	`¥ötk
("\n");

1896 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 
PCI_CARDBUS_CIS
, &
vÆdw
);

1897 
	`¥ötk
("C¨dBu†CIS Poöãr: 0x%x, ", 
vÆdw
);

1900 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_SUBSYSTEM_VENDOR_ID
, &
vÆw
);

1901 
	`¥ötk
("Subsy°em Víd‹ ID: 0x%x, ", 
vÆw
);

1904 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
PCI_SUBSYSTEM_ID
, &
vÆw
);

1905 
	`¥ötk
("Subsy°em Devi˚ ID: 0x%x\n", 
vÆw
);

1908 
	`pci_ªad_c⁄fig_dw‹d
(
pdev
, 
PCI_ROM_ADDRESS
, &
vÆdw
);

1909 
	`¥ötk
("Ex∑nsi⁄ ROM Ba£ Addªss: 0x%x\n", 
vÆdw
);

1912 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_INTERRUPT_LINE
, &
vÆb
);

1913 
	`¥ötk
("IRQ Löe: 0x%x, ", 
vÆb
);

1916 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_INTERRUPT_PIN
, &
vÆb
);

1917 
	`¥ötk
("IRQ Pö: 0x%x, ", 
vÆb
);

1920 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_MIN_GNT
, &
vÆb
);

1921 
	`¥ötk
("Mö G¡: 0x%x, ", 
vÆb
);

1924 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_MAX_LAT
, &
vÆb
);

1925 
	`¥ötk
("Max L©: 0x%x\n", 
vÆb
);

1926 
	}
}

1929 #ifde‡
DEBUG_VERBOSE


1930 
	$RódRoŸ
(
pci_dev
 * 
pdev
)

1932 
i
;

1933 
u8
 
vÆb
;

1934 
pci_bus
 * 
∑ª¡
;

1935 
pci_bus
 * 
me
;

1938 
∑ª¡
 = 
pdev
->
bus
->parent;

1939 
i
=0; i<256; i++)

1941 
	`pci_bus_ªad_c⁄fig_byã
(
∑ª¡
, 8, 
i
, &
vÆb
);

1942 
	`¥ötk
("%02x ", 
vÆb
);

1943 if(!((
i
+1Ë% 16)Ë
	`¥ötk
("\n");

1946 
	`¥ötk
("Devi˚ %∞dëaûs:\n", 
pdev
);

1947 
	`¥ötk
("Bus_li° %p\n", &(
pdev
->
bus_li°
));

1948 
	`¥ötk
("Bu†%p\n", 
pdev
->
bus
);

1949 
	`¥ötk
("Sub‹dö©ê%p\n", 
pdev
->
sub‹dö©e
);

1950 
	`¥ötk
("Sysd©®%p\n", 
pdev
->
sysd©a
);

1951 
	`¥ötk
("Pro˚¡ %p\n", 
pdev
->
¥o˚¡
);

1952 
	`¥ötk
("Dev‚ %d\n", 
pdev
->
dev‚
);

1953 
	`¥ötk
("Víd‹ %x\n", 
pdev
->
víd‹
);

1954 
	`¥ötk
("Devi˚ %x\n", 
pdev
->
devi˚
);

1955 
	`¥ötk
("Subsy°em_víd‹ %x\n", 
pdev
->
subsy°em_víd‹
);

1956 
	`¥ötk
("Subsy°em_devi˚ %x\n", 
pdev
->
subsy°em_devi˚
);

1957 
	`¥ötk
("Cœs†%d\n", 
pdev
->
˛ass
);

1958 
	`¥ötk
("Hdr_ty≥ %d\n", 
pdev
->
hdr_ty≥
);

1959 
	`¥ötk
("Rom_ba£_ªg %d\n", 
pdev
->
rom_ba£_ªg
);

1960 
	`¥ötk
("Pö %d\n", 
pdev
->
pö
);

1961 
	`¥ötk
("Drivî %p\n", 
pdev
->
drivî
);

1962 
	`¥ötk
("Dma_mask %lx\n", ()(
pdev
->
dma_mask
));

1963 
	`¥ötk
("Cfg_sizê%d\n", 
pdev
->
cfg_size
);

1964 
	`¥ötk
("Irq %d\n", 
pdev
->
úq
);

1965 
	`¥ötk
("Tøn•¨íà%d\n", 
pdev
->
å™•¨ít
);

1966 
	`¥ötk
("Mu…ifun˘i⁄ %d\n", 
pdev
->
mu…ifun˘i⁄
);

1967 
	`¥ötk
("Is_busma°î %d\n", 
pdev
->
is_busma°î
);

1968 
	`¥ötk
("No_msò%d\n", 
pdev
->
no_msi
);

1969 
	`¥ötk
("No_dld2 %d\n", 
pdev
->
no_d1d2
);

1970 
	`¥ötk
("Block_ucfg_ac˚s†%d\n", 
pdev
->
block_ucfg_ac˚ss
);

1971 
	`¥ötk
("Brokí_∑rôy_°©u†%d\n", 
pdev
->
brokí_∑rôy_°©us
);

1972 
	`¥ötk
("Msi_íabÀd %d\n", 
pdev
->
msi_íabÀd
);

1973 
	`¥ötk
("Msix_íabÀd %d\n", 
pdev
->
msix_íabÀd
);

1974 
	`¥ötk
("Rom_©å_íabÀd %d\n", 
pdev
->
rom_©å_íabÀd
);

1976 
me
 = 
pdev
->
bus
;

1977 
	`¥ötk
("Bus details:\n");

1978 
	`¥ötk
("P¨íà%p\n", 
me
->
∑ª¡
);

1979 
	`¥ötk
("Chûdª¿%p\n", &(
me
->
chûdªn
));

1980 
	`¥ötk
("Devi˚†%p\n", &(
me
->
devi˚s
));

1981 
	`¥ötk
("Sñ‡%p\n", 
me
->
£lf
);

1982 
	`¥ötk
("Sysd©®%p\n", 
me
->
sysd©a
);

1983 
	`¥ötk
("Procdú %p\n", 
me
->
¥ocdú
);

1984 
	`¥ötk
("Numbî %d\n", 
me
->
numbî
);

1985 
	`¥ötk
("Prim¨y %d\n", 
me
->
¥im¨y
);

1986 
	`¥ötk
("Sec⁄d¨y %d\n", 
me
->
£c⁄d¨y
);

1987 
	`¥ötk
("Sub‹dö©ê%d\n", 
me
->
sub‹dö©e
);

1988 
	`¥ötk
("Namê%s\n", 
me
->
«me
);

1989 
	`¥ötk
("Bridge_˘»%d\n", 
me
->
bridge_˘l
);

1990 
	`¥ötk
("Bridgê%p\n", 
me
->
bridge
);

1991 
	}
}

1994 
	$RódDMAEngöeC⁄figuøti⁄
(
pci_dev
 * 
pdev
, 
¥ivD©a
 * 
dmaInfo
)

1996 #ifde‡
X86_64


1997 
u64
 
ba£
, 
off£t
;

1999 
u32
 
ba£
, 
off£t
;

2001 
u32
 
vÆ
, 
ty≥
, 
dún
, 
num
, 
bc
;

2002 
i
;

2003 
Dma_Engöe
 * 
ïå
;

2006 #ifde‡
X86_64


2007 
ba£
 = (
dmaInfo
->
b¨Info
[0].
ba£VAddr
);

2009 
ba£
 = (
u32
)(
dmaInfo
->
b¨Info
[0].
ba£VAddr
);

2012 
off£t
 = 
DMA_OFFSET
, 
i
=0; off£à< 
DMA_SIZE
; off£à+
DMA_ENGINE_PER_SIZE
, i++)

2014 
	`log_vîbo£
(
KERN_INFO
 "ReadingÉngine capability from %x\n",

2015 (
ba£
+
off£t
+
REG_DMA_ENG_CAP
));

2016 
vÆ
 = 
	`Dma_mRódReg
((
ba£
+
off£t
), 
REG_DMA_ENG_CAP
);

2017 
	`log_vîbo£
(
KERN_INFO
 "REG_DMA_ENG_CAPÑëu∫ed %x\n", 
vÆ
);

2020 if(
vÆ
 & 
DMA_ENG_PRESENT_MASK
)

2022 
	`log_vîbo£
(
KERN_INFO
 "Engöêˇ∑bûôy i†%x\n", 
vÆ
);

2023 
ïå
 = &(
dmaInfo
->
Dma
[
i
]);

2025 
	`log_vîbo£
(
KERN_INFO
 "DMA Engöê¥e£¡áàoff£à%x: ", 
off£t
);

2027 
dún
 = (
vÆ
 & 
DMA_ENG_DIRECTION_MASK
);

2028 if(
dún
 =
DMA_ENG_C2S
)

2029 
	`¥ötk
("C2S, ");

2031 
	`¥ötk
("S2C, ");

2033 
ty≥
 = (
vÆ
 & 
DMA_ENG_TYPE_MASK
);

2034 if(
ty≥
 =
DMA_ENG_BLOCK
)

2035 
	`¥ötk
("Block DMA, ");

2036 if(
ty≥
 =
DMA_ENG_PACKET
)

2037 
	`¥ötk
("Packet DMA, ");

2039 
	`¥ötk
("Unknow¿DMA %x, ", 
ty≥
);

2041 
num
 = (
vÆ
 & 
DMA_ENG_NUMBER
Ë>> 
DMA_ENG_NUMBER_SHIFT
;

2042 
	`¥ötk
("Eng. Numbî %d, ", 
num
);

2044 
bc
 = (
vÆ
 & 
DMA_ENG_BD_MAX_BC
Ë>> 
DMA_ENG_BD_MAX_BC_SHIFT
;

2045 
	`¥ötk
("Max Byã Cou¡ 2^%d\n", 
bc
);

2047 if(
ty≥
 !
DMA_ENG_PACKET
) {

2048 
	`log_n‹mÆ
(
KERN_ERR
 "This driver is capable of only Packet DMA\n");

2055 
	`Dma_Inôülize
(
ïå
, (
ba£
 + 
off£t
), 
dún
);

2056 
ïå
->
pdev
 =Ödev;

2058 
dmaInfo
->
ígöeMask
 |(1LL << 
i
);

2061 
	`log_vîbo£
(
KERN_INFO
 "Engöêmask i†0x%Œx\n", 
dmaInfo
->
ígöeMask
);

2062 
	}
}

2065 
	$xdma_dev_›í
(
öode
 * 
ö
, 
fûe
 * 
fûp
)

2067 if(
DrivîSèã
 !
INITIALIZED
)

2069 
	`¥ötk
("DriverÇot yetÑeady!\n");

2072 #ifde‡
PM_SUPPORT


2073 if(
DrivîSèã
 =
PM_PREPARE
)

2075 
	`¥ötk
("Driver isÉntering Power Down state. No more device open!\n");

2079 #i‚de‡
PM_SUPPORT


2080 if(
U£rO≥n
)

2082 
	`¥ötk
("Deviceálready in use\n");

2083  -
EBUSY
;

2087 
	`•ö_lock_bh
(&
DmaSètsLock
);

2088 
U£rO≥n
++;

2089 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

2092 
	}
}

2094 
	$xdma_dev_ªÀa£
(
öode
 * 
ö
, 
fûe
 * 
fûp
)

2096 if(!
U£rO≥n
)

2099 
	`¥ötk
("DeviceÇot in use\n");

2100  -
EFAULT
;

2103 
	`•ö_lock_bh
(&
DmaSètsLock
);

2104 
U£rO≥n
-- ;

2105 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

2108 
	}
}

2110 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2,6,36)

2111 
	$xdma_dev_io˘l
(
öode
 * 
ö
, 
fûe
 * 
fûp
,

2112 
cmd
, 
¨g
)

2114 
	$xdma_dev_io˘l
(
fûe
 * 
fûp
,

2115 
cmd
, 
¨g
)

2118 
ªtvÆ
=0;

2119 
EngSèã
 
íg
;

2120 
EngSètsAºay
 
es
;

2121 
TRNSètsAºay
 
tß
;

2122 
SWSètsAºay
 
sß
;

2123 
DMASèti°ics
 * 
ds
;

2124 
TRNSèti°ics
 * 
ts
;

2125 
SWSèti°ics
 * 
ss
;

2126 
Te°Cmd
 
tc
;

2127 
U£rSèã
 
u°©e
;

2128 
PCISèã
 
pci°©e
;

2129 
LedSèts
 
l°©s
;

2130 #ifde‡
PM_SUPPORT


2131 
Dúe˘LökChg
 
dl
;

2132 
PowîM⁄ô‹VÆ
 
pmvÆ_ãmp
;

2134 
Àn
, 
i
;

2135 
Dma_Engöe
 * 
ïå
;

2136 
Dma_BdRög
 * 
Ωå
;

2137 
U£rPås
 * 
u±r
;

2138 
Sètus_Reg
=0;

2140 if(
DrivîSèã
 !
INITIALIZED
)

2143 
	`¥ötk
("DriverÇot yetÑeady!\n");

2148 if(
	`_IOC_TYPE
(
cmd
Ë!
XPMON_MAGIC
Ë -
ENOTTY
;

2149 if(
	`_IOC_NR
(
cmd
Ë> 
XPMON_MAX_CMD
Ë -
ENOTTY
;

2152 if(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_READ
)

2153 if(!
	`ac˚ss_ok
(
VERIFY_WRITE
, (*)
¨g
, 
	`_IOC_SIZE
(
cmd
)))

2154  -
EFAULT
;

2155 if(
	`_IOC_DIR
(
cmd
Ë& 
_IOC_WRITE
)

2156 if(!
	`ac˚ss_ok
(
VERIFY_READ
, (*)
¨g
, 
	`_IOC_SIZE
(
cmd
)))

2157  -
EFAULT
;

2159 
cmd
)

2161 
IGET_TEST_STATE
:

2162 if(
	`c›y_‰om_u£r
(&
tc
, (
Te°Cmd
 *)
¨g
, (TestCmd)))

2164 
	`¥ötk
("copy_from_user failed\n");

2165 
ªtvÆ
 = -
EFAULT
;

2169 
i
 = 
tc
.
Engöe
;

2172 if((
i
 >
MAX_DMA_ENGINES
) ||

2173 (!((
dmaD©a
->
ígöeMask
Ë& (1LL << 
i
))))

2175 
	`¥ötk
("InvÆidÉngöê%d\n", 
i
);

2176 
ªtvÆ
 = -
EFAULT
;

2179 
ïå
 = &(
dmaD©a
->
Dma
[
i
]);

2180 
u±r
 = &(
ïå
->
u£r
);

2183 if((
ïå
->
EngöeSèã
 !
USER_ASSIGNED
) ||

2184 (
u±r
->
U£rGëSèã
 =
NULL
))

2186 
	`log_n‹mÆ
(
KERN_ERR
 "UserGetState function doesÇotÉxist\n");

2187 
ªtvÆ
 = -
EFAULT
;

2191 if(!(
u±r
->
U£rGëSèã
)(
ïå
, &
u°©e
, u±r->
¥ivD©a
))

2193 
tc
.
Te°Mode
 = 
u°©e
.TestMode;

2194 
tc
.
MöPktSize
 = 
u°©e
.MinPktSize;

2195 
tc
.
MaxPktSize
 = 
u°©e
.MaxPktSize;

2196 if(
	`c›y_to_u£r
((
Te°Cmd
 *)
¨g
, &
tc
, (TestCmd)))

2198 
	`¥ötk
("copy_to_user failed\n");

2199 
ªtvÆ
 = -
EFAULT
;

2205 
	`¥ötk
("UserGetStateÑeturned failure\n");

2206 
ªtvÆ
 = -
EFAULT
;

2211 
ISTART_TEST
:

2212 
ISTOP_TEST
:

2214 if(
	`c›y_‰om_u£r
(&
tc
, (
Te°Cmd
 *)
¨g
, (TestCmd)))

2216 
	`¥ötk
("copy_from_user failed\n");

2217 
ªtvÆ
 = -
EFAULT
;

2221 
i
 = 
tc
.
Engöe
;

2225 if((
i
 >
MAX_DMA_ENGINES
) ||

2226 (!((
dmaD©a
->
ígöeMask
Ë& (1LL << 
i
))))

2228 
	`¥ötk
("InvÆidÉngöê%d\n", 
i
);

2229 
ªtvÆ
 = -
EFAULT
;

2232 
ïå
 = &(
dmaD©a
->
Dma
[
i
]);

2233 
Ωå
 = &(
ïå
->
BdRög
);

2234 
u±r
 = &(
ïå
->
u£r
);

2237 if((
ïå
->
EngöeSèã
 !
USER_ASSIGNED
) ||

2238 (
u±r
->
U£rGëSèã
 =
NULL
))

2240 
	`log_n‹mÆ
(
KERN_ERR
 "UserSetState function doesÇotÉxist\n");

2241 
ªtvÆ
 = -
EFAULT
;

2248 
	`log_vîbo£
("F‹Éngöê%d, Te°Modê%x\n", 
i
, 
tc
.
Te°Mode
);

2249 
u°©e
.
Te°Mode
 = 
tc
.TestMode;

2250 
u°©e
.
MöPktSize
 = 
tc
.MinPktSize;

2251 
u°©e
.
MaxPktSize
 = 
tc
.MaxPktSize;

2252 
ªtvÆ
 = (
u±r
->
U£rSëSèã
)(
ïå
, &
u°©e
, u±r->
¥ivD©a
);

2253 if(
ªtvÆ
)

2254 
	`¥ötk
("U£rSëSèãÑëu∫ed faûuª %d\n", 
ªtvÆ
);

2255 #ifde‡
DEBUG_VERBOSE


2256 if(
cmd
 =
ISTOP_TEST
)

2258 if(
tc
.
Engöe
 == 0)

2260 
ïå
 = &(
dmaD©a
->
Dma
[32]);

2261 
Ωå
 = &(
ïå
->
BdRög
);

2262 
	`log_vîbo£
("## P©h 0 %d %d %d %d ##\n",
Ωå
->
FªeC¡
,Ωå->
PªC¡
,Ωå->
HwC¡
,Ωå->
Po°C¡
);

2264 if(
tc
.
Engöe
 == 1)

2266 
ïå
 = &(
dmaD©a
->
Dma
[33]);

2267 
Ωå
 = &(
ïå
->
BdRög
);

2268 
	`log_vîbo£
("## P©h 1 %d %d %d %d ##\n",
Ωå
->
FªeC¡
,Ωå->
PªC¡
,Ωå->
HwC¡
,Ωå->
Po°C¡
);

2275 
IGET_PCI_STATE
:

2276 
	`RódPCISèã
(
dmaD©a
->
pdev
, &
pci°©e
);

2277 if(
	`c›y_to_u£r
((
PCISèã
 *)
¨g
, &
pci°©e
, (PCIState)))

2279 
	`¥ötk
("copy_to_user failed\n");

2280 
ªtvÆ
 = -
EFAULT
;

2284 
IGET_LED_STATISTICS
:

2286 
Sètus_Reg
 = 
	`XIo_In32
(
dmaD©a
->
b¨Info
[0].
ba£VAddr
 + 
STATUS_REG_OFFSET
);

2287 
l°©s
.
DdrCÆib
 = 
Sètus_Reg
 & 0x1;

2288 
l°©s
.
Phy0
 = (
Sètus_Reg
 >> 30) & 0x1;

2289 
l°©s
.
Phy1
 = (
Sètus_Reg
 >> 31) & 0x1;

2291 if(
	`c›y_to_u£r
((
LedSèts
 *)
¨g
, &
l°©s
, (LedStats)))

2293 
	`¥ötk
("copy_to_user failed\n");

2294 
ªtvÆ
 = -
EFAULT
;

2298 #ifde‡
PM_SUPPORT


2299 
ISET_PCI_LINKSPEED
:

2300 if(
	`c›y_‰om_u£r
(&
dl
, (
Dúe˘LökChg
 *)
¨g
, (DirectLinkChg)))

2302 
	`¥ötk
("copy_from_user failed\n");

2303 
ªtvÆ
 = -
EFAULT
;

2307 
ªtvÆ
 = 
	`SëLökS≥ed
(
dmaD©a
->
pdev
, &
dl
);

2310 
ISET_PCI_LINKWIDTH
:

2311 if(
	`c›y_‰om_u£r
(&
dl
, (
Dúe˘LökChg
 *)
¨g
, (DirectLinkChg)))

2313 
	`¥ötk
("copy_from_user failed\n");

2314 
ªtvÆ
 = -
EFAULT
;

2318 
ªtvÆ
 = 
	`SëLökWidth
(
dmaD©a
->
pdev
, &
dl
);

2321 
ISET_PCI_RUNTIME_SUSPEND
:

2322 
ªtvÆ
 = 
	`SëRu¡imeSu•íd
(
dmaD©a
->
pdev
);

2325 
ISET_PCI_RUNTIME_RESUME
:

2326 
ªtvÆ
 = 
	`SëRu¡imeResume
(
dmaD©a
->
pdev
);

2328 
IGET_PMVAL
:

2329 
	`•ö_lock_bh
(&
DmaSètsLock
);

2330 
	`mem˝y
(&
pmvÆ_ãmp
,&
pmvÆ
,(
PowîM⁄ô‹VÆ
));

2331 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

2332 if(
	`c›y_to_u£r
((
PowîM⁄ô‹VÆ
 *)
¨g
, &
pmvÆ_ãmp
, (PowerMonitorVal)))

2334 
	`¥ötk
("PMVAL copy_to_user failed\n");

2335 
ªtvÆ
 = -
EFAULT
;

2339 
IGET_ENG_STATE
:

2340 if(
	`c›y_‰om_u£r
(&
íg
, (
EngSèã
 *)
¨g
, (EngState)))

2342 
	`¥ötk
("\ncopy_from_user failed\n");

2343 
ªtvÆ
 = -
EFAULT
;

2347 
i
 = 
íg
.
Engöe
;

2350 if((
i
 >
MAX_DMA_ENGINES
) ||

2351 (!((
dmaD©a
->
ígöeMask
Ë& (1LL << 
i
))))

2353 
	`¥ötk
("InvÆidÉngöê%d\n", 
i
);

2354 
ªtvÆ
 = -
EFAULT
;

2357 
ïå
 = &(
dmaD©a
->
Dma
[
i
]);

2358 
Ωå
 = &(
ïå
->
BdRög
);

2359 
u±r
 = &(
ïå
->
u£r
);

2362 if((
ïå
->
EngöeSèã
 !
USER_ASSIGNED
) ||

2363 (
u±r
->
U£rGëSèã
 =
NULL
))

2365 
	`log_n‹mÆ
(
KERN_ERR
 "UserGetState function doesÇotÉxist\n");

2366 
ªtvÆ
 = -
EFAULT
;

2371 if(!(
u±r
->
U£rGëSèã
)(
ïå
, &
u°©e
, u±r->
¥ivD©a
))

2373 
íg
.
Buf„rs
 = 
u°©e
.Buffers;

2374 
íg
.
MöPktSize
 = 
u°©e
.MinPktSize;

2375 
íg
.
MaxPktSize
 = 
u°©e
.MaxPktSize;

2376 
íg
.
Te°Mode
 = 
u°©e
.TestMode;

2377 
íg
.
D©aMism©ch
 = 
u°©e
.DataMismatch;

2381 
	`¥ötk
("UserGetStateÑeturned failure\n");

2382 
ªtvÆ
 = -
EFAULT
;

2387 
íg
.
BDs
 = 
DMA_BD_CNT
;

2388 
íg
.
BDîrs
 = 
Ωå
->BDerrs;

2389 
íg
.
BDSîrs
 = 
Ωå
->BDSerrs;

2390 #ifde‡
TH_BH_ISR


2391 
íg
.
I¡E«b
 = 1;

2393 
íg
.
I¡E«b
 = 0;

2395 if(
	`c›y_to_u£r
((
EngSèã
 *)
¨g
, &
íg
, (EngState)))

2397 
	`¥ötk
("copy_to_user failed\n");

2398 
ªtvÆ
 = -
EFAULT
;

2403 
IGET_DMA_STATISTICS
:

2404 if(
	`c›y_‰om_u£r
(&
es
, (
EngSètsAºay
 *)
¨g
, (EngStatsArray)))

2406 
	`¥ötk
("copy_from_user failed\n");

2407 
ªtvÆ
 = -1;

2411 
ds
 = 
es
.
íg±r
;

2412 
Àn
 = 0;

2413 
i
=0; i<
es
.
Cou¡
; i++)

2415 
DMASèti°ics
 
‰om
;

2416 
j
;

2419 
j
=0; j<
MAX_DMA_ENGINES
; j++)

2421 if(!
d°©sNum
[
j
]) ;

2423 
	`•ö_lock_bh
(&
DmaSètsLock
);

2424 
‰om
 = 
DSèts
[
j
][
d°©sRód
[j]];

2425 
‰om
.
Engöe
 = 
j
;

2426 
d°©sNum
[
j
] -= 1;

2427 
d°©sRód
[
j
] += 1;

2428 if(
d°©sRód
[
j
] =
MAX_STATS
)

2429 
d°©sRód
[
j
] = 0;

2430 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

2432 if(
	`c›y_to_u£r
(
ds
, &
‰om
, (
DMASèti°ics
)))

2434 
	`¥ötk
("copy_to_user failed\n");

2435 
ªtvÆ
 = -
EFAULT
;

2439 
Àn
++;

2440 
i
++;

2441 if(
i
 >
es
.
Cou¡
) ;

2442 
ds
++;

2444 if(
ªtvÆ
 < 0) ;

2446 
es
.
Cou¡
 = 
Àn
;

2447 if(
	`c›y_to_u£r
((
EngSètsAºay
 *)
¨g
, &
es
, (EngStatsArray)))

2449 
	`¥ötk
("copy_to_user failed\n");

2450 
ªtvÆ
 = -
EFAULT
;

2455 
IGET_TRN_STATISTICS
:

2456 if(
	`c›y_‰om_u£r
(&
tß
, (
TRNSètsAºay
 *)
¨g
, (TRNStatsArray)))

2458 
	`¥ötk
("copy_from_user failed\n");

2459 
ªtvÆ
 = -1;

2463 
ts
 = 
tß
.
å≈å
;

2464 
Àn
 = 0;

2465 
i
=0; i<
tß
.
Cou¡
; i++)

2467 
TRNSèti°ics
 
‰om
;

2469 if(!
t°©sNum
) ;

2471 
	`•ö_lock_bh
(&
DmaSètsLock
);

2472 
‰om
 = 
TSèts
[
t°©sRód
];

2473 
t°©sNum
 -= 1;

2474 
t°©sRód
 += 1;

2475 if(
t°©sRód
 =
MAX_STATS
)

2476 
t°©sRód
 = 0;

2477 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

2479 if(
	`c›y_to_u£r
(
ts
, &
‰om
, (
TRNSèti°ics
)))

2481 
	`¥ötk
("copy_to_user failed\n");

2482 
ªtvÆ
 = -
EFAULT
;

2486 
Àn
++;

2487 
ts
++;

2489 
tß
.
Cou¡
 = 
Àn
;

2490 if(
	`c›y_to_u£r
((
TRNSètsAºay
 *)
¨g
, &
tß
, (TRNStatsArray)))

2492 
	`¥ötk
("copy_to_user failed\n");

2493 
ªtvÆ
 = -
EFAULT
;

2498 
IGET_SW_STATISTICS
:

2499 if(
	`c›y_‰om_u£r
(&
sß
, (
SWSètsAºay
 *)
¨g
, (SWStatsArray)))

2501 
	`¥ötk
("copy_from_user failed\n");

2502 
ªtvÆ
 = -1;

2506 
ss
 = 
sß
.
sw±r
;

2507 
Àn
 = 0;

2508 
i
=0; i<
sß
.
Cou¡
; i++)

2510 
SWSèti°ics
 
‰om
;

2511 
j
;

2514 
j
=0; j<
MAX_DMA_ENGINES
; j++)

2516 if(!
s°©sNum
[
j
]) ;

2518 
	`•ö_lock_bh
(&
DmaSètsLock
);

2519 
‰om
 = 
SSèts
[
j
][
s°©sRód
[j]];

2520 
‰om
.
Engöe
 = 
j
;

2521 
s°©sNum
[
j
] -= 1;

2522 
s°©sRód
[
j
] += 1;

2523 if(
s°©sRód
[
j
] =
MAX_STATS
)

2524 
s°©sRód
[
j
] = 0;

2525 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

2527 if(
	`c›y_to_u£r
(
ss
, &
‰om
, (
SWSèti°ics
)))

2529 
	`¥ötk
("copy_to_user failed\n");

2530 
ªtvÆ
 = -
EFAULT
;

2534 
Àn
++;

2535 
i
++;

2536 if(
i
 >
sß
.
Cou¡
) ;

2537 
ss
++;

2539 if(
ªtvÆ
 < 0) ;

2541 
sß
.
Cou¡
 = 
Àn
;

2542 if(
	`c›y_to_u£r
((
SWSètsAºay
 *)
¨g
, &
sß
, (SWStatsArray)))

2544 
	`¥ötk
("copy_to_user failed\n");

2545 
ªtvÆ
 = -
EFAULT
;

2551 
	`¥ötk
("InvÆid comm™d %d\n", 
cmd
);

2552 
ªtvÆ
 = -1;

2556  
ªtvÆ
;

2557 
	}
}

2559 #ifde‡
PM_SUPPORT


2561 
	#PCIE_CAP_REG
 0x9034

	)

2562 
	#PCIE_CTRL_REG
 0x9038

	)

2563 
	#PCIE_STS_REG
 0x903c

	)

2565 
	$SëLökS≥ed
(
pci_dev
 * 
pdev
, 
Dúe˘LökChg
 * 
dl
)

2567 
u32
 
ªg
;

2568 
curS≥ed
, 
√wS≥ed
 = 
dl
->
LökS≥ed
 - 1;

2569 
£lfGí2C≠
, 
∑πGí2C≠
;

2570 #ifde‡
X86_64


2571 
u64
 
ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

2573 
u32
 
ba£
 = (u32)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

2575 
	`log_vîbo£
(
KERN_ERR
 "..SëLökS≥ed: %d...\n", 
√wS≥ed
);

2576 if–
√wS≥ed
 > 1)

2578 
	`¥ötk
(
KERN_ERR
 "....√w s≥ed bey⁄d sëtög %d\n", (
√wS≥ed
+1) );

2582 
ªg
 = 
	`XIo_In32
(
ba£
+
PCIE_CAP_REG
);

2583 
	`log_vîbo£
(
KERN_ERR
 "....ªg = 0x%x\n", 
ªg
);

2591 
curS≥ed
 = (
ªg
>>1) & 0x1;

2592 
£lfGí2C≠
 = (
ªg
>>5) & 0x1;

2593 
∑πGí2C≠
 = (
ªg
>>6) & 0x1;

2602 if–
curS≥ed
 =
√wS≥ed
 )

2604 
	`¥ötk
(
KERN_ERR
 "....cuºíà•ìd i†ßmêa†√w s≥ed %d\n", 
curS≥ed
);

2607 if(
√wS≥ed
==1)

2609 if(
£lfGí2C≠
==0 )

2611 
	`¥ötk
(
KERN_ERR
 "....newspeed 5G, but XDMA isÇot gen2 capable.\n");

2614 if(
∑πGí2C≠
==0 )

2616 
	`¥ötk
(
KERN_ERR
 "....newspeed 5G, butÜinkÖartner isÇot gen2 capable.\n");

2624 
ªg
 = 
	`XIo_In32
(
ba£
+
PCIE_CTRL_REG
);

2625 
	`log_vîbo£
(
KERN_ERR
 "vÆuêªad from PCIE_CTRL_REG whûêch™gög s≥ed i†0x%x\n",
ªg
);

2626 
ªg
 &= ~(0x3);

2627 
ªg
 |
√wS≥ed
;

2628 
ªg
 |= 0x40000000;

2629 
	`log_vîbo£
(
KERN_ERR
 "vÆuêbeög wrôã¿tÿPCIE_CTRL_REG whûêch™gög s≥ed i†0x%x\n",
ªg
);

2630 
	`XIo_Out32
(
ba£
+
PCIE_CTRL_REG
, 
ªg
);

2632 
	`log_vîbo£
(
KERN_ERR
 "....•ìd ch™gêd⁄e. 0x%x\n", 
ªg
);

2634 
	}
}

2636 
	$SëLökWidth
(
pci_dev
 * 
pdev
, 
Dúe˘LökChg
 * 
dl
)

2638 
u32
 
ªg
;

2639 
curWidth
, 
öôWidth
, 
lökUpC≠
;

2640 
√wWidth
 = 
dl
->
LökWidth
-1;

2641 #ifde‡
X86_64


2642 
u64
 
ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

2644 
u32
 
ba£
 = (u32)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

2646 
	`log_vîbo£
("..SëLökWidth: %d...\n", 
√wWidth
);

2647 if–
√wWidth
 > 3)

2649 
	`¥ötk
(
KERN_ERR
 "....√w width bey⁄d sëtög %d\n", (
√wWidth
+1) );

2653 
ªg
 = 
	`XIo_In32
(
ba£
+
PCIE_CAP_REG
);

2654 
	`log_vîbo£
(
KERN_ERR
 "....ªg = 0x%x\n", 
ªg
);

2664 
curWidth
 = (
ªg
>>2) & 0x3;

2665 
öôWidth
(
ªg
>>7) & 0x7;

2666 
lökUpC≠
(
ªg
>>4) & 0x1;

2667 
	`log_vîbo£
(
KERN_ERR
 "√wWidth = %d curWidth =%d inôWidth = %dándÜökUpC≠ = %d\n",
√wWidth
,
curWidth
,
öôWidth
,
lökUpC≠
);

2678 if–
√wWidth
 =
curWidth
 )

2680 
	`¥ötk
(
KERN_ERR
 "....cuºíàwidth i†ßmêa†√w width %d\n", 
curWidth
);

2683 if(
öôWidth
 != 0)

2685 
öôWidth
 -= 1;

2686 if–(
√wWidth
 > 
öôWidth
Ë|| (
lökUpC≠
==0) )

2688 
	`¥ötk
(
KERN_ERR
 "....error1:ÇewWidth %d, initWidth %d,ÜinkUpCap %d.\n",

2689 
√wWidth
, 
öôWidth
, 
lökUpC≠
);

2697 
ªg
 = 
	`XIo_In32
(
ba£
+
PCIE_CTRL_REG
);

2698 
	`log_vîbo£
(
KERN_ERR
 "vÆuêªad from PCIE_CTRL_REG i†0x%x\n",
ªg
);

2699 
ªg
 &= ~(0x1c);

2700 
ªg
 |(
√wWidth
 << 2);

2701 
ªg
 |= 0x80000000;

2702 
	`log_vîbo£
(
KERN_ERR
 "vÆuêbeög wrôã¿ÅÿPCIE_CTRL_REG i†0x%x\n",
ªg
);

2703 
	`XIo_Out32
(
ba£
+
PCIE_CTRL_REG
, 
ªg
);

2705 
	`log_vîbo£
(
KERN_ERR
 "....width ch™gêd⁄e. 0x%x\n", 
ªg
);

2707 
	}
}

2709 
	$SëRu¡imeSu•íd
(
pci_dev
 * 
pdev
)

2711 
ªsu…
;

2712 
	`log_vîbo£
(
KERN_ERR
 "....invoking xdma_pm_suspend from SetRuntimeSuspend\n");

2713 
ªsu…
 = 
	`xdma_pm_su•íd
(&
pdev
->
dev
);

2714  
ªsu…
;

2715 
	}
}

2717 
	$SëRu¡imeResume
(
pci_dev
 * 
pdev
)

2719 
ªsu…
;

2720 
	`log_vîbo£
(
KERN_ERR
 "....invoking xdma_pm_resume from SetRuntimeResume\n");

2721 
ªsu…
 = 
	`xdma_pm_ªsume
(&
pdev
->
dev
);

2722  
ªsu…
;

2723 
	}
}

2725 
	$RódPCISèã
(
pci_dev
 * 
pdev
, 
PCISèã
 * 
pci°©e
)

2727 
pos
;

2728 
u16
 
vÆw
;

2729 
u8
 
vÆb
;

2730 
ªg
=0,
lökUpC≠
=0;

2731 #ifde‡
X86_64


2732 
u64
 
ba£
;

2733 
ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

2735 
u32
 
ba£
;

2736 
ba£
 = (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

2740 
pci°©e
->
LökSèã
 = 
LINK_UP
;

2741 
pci°©e
->
Víd‹Id
 = 
PCI_VENDOR_ID_DMA
;

2742 
pci°©e
->
Devi˚Id
 = 
PCI_DEVICE_ID_DMA
;

2745 
	`pci_ªad_c⁄fig_byã
(
pdev
, 
PCI_INTERRUPT_PIN
, &
vÆb
);

2746 if(!
vÆb
)

2748 if(
	`pci_föd_ˇ∑bûôy
(
pdev
, 
PCI_CAP_ID_MSIX
))

2749 
pci°©e
->
I¡Mode
 = 
INT_MSIX
;

2750 if(
	`pci_föd_ˇ∑bûôy
(
pdev
, 
PCI_CAP_ID_MSI
))

2751 
pci°©e
->
I¡Mode
 = 
INT_MSI
;

2753 
pci°©e
->
I¡Mode
 = 
INT_NONE
;

2755 if((
vÆb
 >= 1) && (valb <= 4))

2756 
pci°©e
->
I¡Mode
 = 
INT_LEGACY
;

2758 
pci°©e
->
I¡Mode
 = 
INT_NONE
;

2760 if((
pos
 = 
	`pci_föd_ˇ∑bûôy
(
pdev
, 
PCI_CAP_ID_EXP
)))

2763 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
pos
+
PCI_EXP_LNKSTA
, &
vÆw
);

2764 
pci°©e
->
LökS≥ed
 = (
vÆw
 & 0x0003);

2765 
pci°©e
->
LökWidth
 = (
vÆw
 & 0x03f0) >> 4;

2766 
ªg
=
	`XIo_In32
(
ba£
+
PCIE_CAP_REG
);

2767 
lökUpC≠
(
ªg
>>4) & 0x1;

2768 
pci°©e
->
LökUpC≠
 = 
lökUpC≠
;

2771 
	`pci_ªad_c⁄fig_w‹d
(
pdev
, 
pos
+
PCI_EXP_DEVCTL
, &
vÆw
);

2772 
pci°©e
->
MPS
 = 128 << ((
vÆw
 & 
PCI_EXP_DEVCTL_PAYLOAD
) >> 5);

2773 
pci°©e
->
MRRS
 = 128 << ((
vÆw
 & 
PCI_EXP_DEVCTL_READRQ
) >> 12);

2777 
	`¥ötk
("Cannot find PCI Express Capabilities\n");

2778 
pci°©e
->
LökS≥ed
 =Öci°©e->
LökWidth
 = 0;

2779 
pci°©e
->
MPS
 =Öci°©e->
MRRS
 = 0;

2782 #ifde‡
K7_TRD


2786 
pci°©e
->
InôFCC∂D
 = 
	`XIo_In32
(
ba£
+
MInôFCC∂D
)& 0x00000FFF;

2787 
pci°©e
->
InôFCC∂H
 = 
	`XIo_In32
(
ba£
+
MInôFCC∂H
)& 0x000000FF;

2788 
pci°©e
->
InôFCNPD
 = 
	`XIo_In32
(
ba£
+
MInôFCNPD
) & 0x00000FFF;

2789 
pci°©e
->
InôFCNPH
 = 
	`XIo_In32
(
ba£
+
MInôFCNPH
) & 0x000000FF;

2790 
pci°©e
->
InôFCPD
 = 
	`XIo_In32
(
ba£
+
MInôFCPD
) & 0x00000FFF;

2791 
pci°©e
->
InôFCPH
 = 
	`XIo_In32
(
ba£
+
MInôFCPH
) & 0x000000FF;

2792 
pci°©e
->
Vîsi⁄
 = 
	`XIo_In32
(
ba£
+
PCIE_DESIGN_VERSION
);

2796 
	}
}

2801 
__devöô
 
	$xdma_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
ít
)

2803 
pciRë
, 
chrRë
;

2804 
i
;

2805 
dev_t
 
xdmaDev
;

2806 
fûe_›î©i⁄s
 
xdmaDevFûeOps
;

2807 
timî_li°
 * 
timî
 = &
pﬁl_timî
;

2813 
pciRë
 = 
	`pci_íabÀ_devi˚
(
pdev
);

2814 i‡(
pciRë
 < 0)

2816 
	`¥ötk
(
KERN_ERR
 "PCI deviceÉnable failed.\n");

2817  
pciRë
;

2823 
i
=0; i<
MAX_POOL
; i++)

2825 
pktPoﬁ
[
i
].
pbuf
 = 
pktAºay
[i];

2827 if(
i
 =(
MAX_POOL
-1))

2828 
pktPoﬁ
[
i
].
√xt
 = 
NULL
;

2830 
pktPoﬁ
[
i
].
√xt
 = &pktPool[i+1];

2832 
pktPoﬁTaû
 = &
pktPoﬁ
[
MAX_POOL
-1];

2833 
pktPoﬁHód
 = &
pktPoﬁ
[0];

2834 #ifde‡
DEBUG_VERBOSE


2835 
i
=0; i<
MAX_POOL
; i++)

2836 
	`¥ötk
("pktPoﬁ[%d] %∞pkèºay %p\n", 
i
, &
pktPoﬁ
[i],ÖktPoﬁ[i].
pbuf
);

2837 
	`¥ötk
("pktPoﬁHód %∞pktPoﬁTaû %p\n", 
pktPoﬁHód
, 
pktPoﬁTaû
);

2842 
dmaD©a
 = 
	`kmÆloc
((
¥ivD©a
), 
GFP_KERNEL
);

2843 if(
dmaD©a
 =
NULL
)

2845 
	`¥ötk
(
KERN_ERR
 "UnableÅoállocate DMAÖrivate data.\n");

2846 
	`pci_dißbÀ_devi˚
(
pdev
);

2847  
XST_FAILURE
;

2850 
dmaD©a
->
b¨Mask
 = 0;

2851 
dmaD©a
->
ígöeMask
 = 0;

2852 
dmaD©a
->
u£rCou¡
 = 0;

2854 #i‡
	`deföed
(
DEBUG_NORMAL
Ë|| deföed(
DEBUG_VERBOSE
)

2856 
	`RódC⁄fig
(
pdev
);

2859 #ifde‡
DEBUG_VERBOSE


2861 
	`RódRoŸ
(
pdev
);

2868 
	`pci_£t_ma°î
(
pdev
);

2875 
pciRë
 = 
	`pci_ªque°_ªgi⁄s
(
pdev
, 
DRIVER_NAME
);

2876 i‡(
pciRë
 < 0) {

2877 
	`¥ötk
(
KERN_ERR
 "CouldÇotÑequest PCIÑegions.\n");

2878 
	`k‰ì
(
dmaD©a
);

2879 
	`pci_dißbÀ_devi˚
(
pdev
);

2880  
pciRë
;

2884 #ifde‡
X86_64


2885 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,36)

2886 
pciRë
 = 
	`pci_£t_dma_mask
(
pdev
, 
DMA_64BIT_MASK
);

2888 
pciRë
 = 
	`pci_£t_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(64));

2891 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2,6,36)

2892 
pciRë
 = 
	`pci_£t_dma_mask
(
pdev
, 
DMA_32BIT_MASK
);

2894 
pciRë
 = 
	`pci_£t_dma_mask
(
pdev
, 
	`DMA_BIT_MASK
(32));

2897 i‡(
pciRë
 < 0) {

2898 
	`¥ötk
(
KERN_ERR
 "pci_set_dma_mask failed\n");

2899 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

2900 
	`k‰ì
(
dmaD©a
);

2901 
	`pci_dißbÀ_devi˚
(
pdev
);

2902  
pciRë
;

2909 
i
=0; i<
MAX_BARS
; i++) {

2910 
u32
 
size
;

2913 i‡((
size
 = 
	`pci_ªsour˚_Àn
(
pdev
, 
i
)) == 0) {

2914 i‡(
i
 == 0) {

2915 
	`¥ötk
(
KERN_ERR
 "BAR 0Çot valid,áborting.\n");

2916 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

2917 
	`k‰ì
(
dmaD©a
);

2918 
	`pci_dißbÀ_devi˚
(
pdev
);

2919  
XST_FAILURE
;

2926 (
dmaD©a
->
b¨Mask
Ë|–1 << 
i
 );

2931 i‡(!(
	`pci_ªsour˚_Êags
(
pdev
, 
i
Ë& 
IORESOURCE_MEM
)) {

2932 
	`¥ötk
(
KERN_ERR
 "BAR %d i†o‡wr⁄gÅy≥,áb‹tög.\n", 
i
);

2933 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

2934 
	`k‰ì
(
dmaD©a
);

2935 
	`pci_dißbÀ_devi˚
(
pdev
);

2936  
XST_FAILURE
;

2940 
dmaD©a
->
b¨Info
[
i
].
ba£PAddr
 = 
	`pci_ªsour˚_°¨t
(
pdev
, i);

2941 
dmaD©a
->
b¨Info
[
i
].
ba£Lí
 = 
size
;

2950 if((
dmaD©a
->
b¨Info
[
i
].
ba£VAddr
 =

2951 
	`i‹em≠
((
dmaD©a
->
b¨Info
[
i
].
ba£PAddr
), 
size
)) == 0UL)

2953 
	`¥ötk
(
KERN_ERR
 "C™nŸ m≠ BAR %d s∑˚, invÆid©ög.\n", 
i
);

2954 (
dmaD©a
->
b¨Mask
Ë&~–1 << 
i
 );

2957 
	`log_vîbo£
(
KERN_INFO
 "[BAR %d] Ba£ PA %x Lí %d VA %x\n", 
i
,

2958 (
u32
Ë(
dmaD©a
->
b¨Info
[
i
].
ba£PAddr
),

2959 (
u32
Ë(
dmaD©a
->
b¨Info
[
i
].
ba£Lí
),

2960 (
u32
Ë(
dmaD©a
->
b¨Info
[
i
].
ba£VAddr
));

2962 
	`log_vîbo£
(
KERN_INFO
 "B¨ mask i†0x%x\n", (
dmaD©a
->
b¨Mask
));

2963 
	`log_n‹mÆ
(
KERN_INFO
 "DMA Base VA %x\n",

2964 (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
));

2967 
	`Dma_mI¡DißbÀ
(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

2969 
dmaD©a
->
pdev
=pdev;

2970 
dmaD©a
->
ödex
 = 
pdev
->
devi˚
;

2975 
	`RódDMAEngöeC⁄figuøti⁄
(
pdev
, 
dmaD©a
);

2978 
	`pci_£t_drvd©a
(
pdev
, 
dmaD©a
);

2986 
chrRë
 = 
	`Æloc_chrdev_ªgi⁄
(&
xdmaDev
, 0, 1, "xdma_stat");

2987 if(
	`IS_ERR
((*)
chrRë
))

2988 
	`log_n‹mÆ
(
KERN_ERR
 "Errorállocating char deviceÑegion\n");

2992 
xdmaCdev
 = 
	`cdev_Æloc
();

2993 if(
	`IS_ERR
(
xdmaCdev
))

2995 
	`log_n‹mÆ
(
KERN_ERR
 "AllocÉrrorÑegistering device driver\n");

2996 
	`uƒegi°î_chrdev_ªgi⁄
(
xdmaDev
, 1);

2997 
chrRë
 = -1;

3001 
xdmaDevFûeOps
.
ow√r
 = 
THIS_MODULE
;

3002 
xdmaDevFûeOps
.
›í
 = 
xdma_dev_›í
;

3003 
xdmaDevFûeOps
.
ªÀa£
 = 
xdma_dev_ªÀa£
;

3004 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,36)

3005 
xdmaDevFûeOps
.
io˘l
 = 
xdma_dev_io˘l
;

3007 
xdmaDevFûeOps
.
u∆ocked_io˘l
 = 
xdma_dev_io˘l
;

3009 
xdmaCdev
->
ow√r
 = 
THIS_MODULE
;

3010 
xdmaCdev
->
›s
 = &
xdmaDevFûeOps
;

3011 
xdmaCdev
->
dev
 = 
xdmaDev
;

3012 
chrRë
 = 
	`cdev_add
(
xdmaCdev
, 
xdmaDev
, 1);

3013 if(
chrRë
 < 0)

3015 
	`log_n‹mÆ
(
KERN_ERR
 "AddÉrrorÑegistering device driver\n");

3016 
	`uƒegi°î_chrdev_ªgi⁄
(
xdmaDev
, 1);

3021 if(!
	`IS_ERR
((*)
chrRë
))

3023 
	`log_vîbo£
(
KERN_INFO
 "DeviceÑegistered with majorÇumber %d\n",

3024 
	`MAJOR
(
xdmaDev
));

3026 
i
=0; i<
MAX_DMA_ENGINES
; i++)

3028 
d°©sRód
[
i
] = 
d°©sWrôe
[i] = 
d°©sNum
[i] = 0;

3029 
s°©sRód
[
i
] = 
s°©sWrôe
[i] = 
s°©sNum
[i] = 0;

3030 
SWøã
[
i
] = 0;

3032 
t°©sRód
 = 
t°©sWrôe
 = 
t°©sNum
 = 0;

3035 
	`log_n‹mÆ
(
KERN_INFO
 "probe: Starting statsÖollÑoutine with %x\n",

3036 (
u32
)
pdev
);

3038 
	`öô_timî
(&
°©s_timî
);

3039 
°©s_timî
.
expúes
=
jiffõs
 + 
HZ
;

3040 
°©s_timî
.
d©a
=(Ë
pdev
;

3041 
°©s_timî
.
fun˘i⁄
 = 
pﬁl_°©s
;

3042 
	`add_timî
(&
°©s_timî
);

3045 
DrivîSèã
 = 
INITIALIZED
;

3047 
	`log_n‹mÆ
(
KERN_INFO
 "¥obe: SèπögÖﬁ»routöêwôh %x\n", (
u32
)
pdev
);

3048 
	`öô_timî
(
timî
);

3049 
timî
->
expúes
=
jiffõs
+(
HZ
/500);

3050 
timî
->
d©a
=(Ë
pdev
;

3051 
timî
->
fun˘i⁄
 = 
pﬁl_routöe
;

3052 
	`add_timî
(
timî
);

3053 #ifde‡
TH_BH_ISR


3055 if(!
	`pci_íabÀ_msi
(
pdev
))

3057 
	`log_n‹mÆ
(
KERN_INFO
 "MSIÉnabled\n");

3058 
MSIE«bÀd
 = 1;

3060 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,18)

3061 
pciRë
 = 
	`ªque°_úq
(
pdev
->
úq
, 
DmaI¡îru±
, 
SA_SHIRQ
, "xdma",Ödev);

3063 
pciRë
 = 
	`ªque°_úq
(
pdev
->
úq
, 
DmaI¡îru±
, 
IRQF_SHARED
, "xdma",Ödev);

3066 if(
pciRë
)

3068 
	`¥ötk
(
KERN_ERR
 "xdm®couldÇŸáŒoˇã i¡îru± %d\n", 
pdev
->
úq
);

3069 
	`¥ötk
(
KERN_ERR
 "Unload driverándÅryÑunning withÖolled mode instead\n");

3073 
i
=0; i<
MAX_DMA_ENGINES
; i++)

3074 
La°I¡r
[
i
] = 
jiffõs
;

3079 
	`Dma_mI¡E«bÀ
(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

3083 
	`log_vîbo£
("VÆuêo‡HZ i†%d\n", 
HZ
);

3084 
	`log_vîbo£
("End ofÖrobe\n");

3087 
	}
}

3089 
__devexô
 
	$xdma_ªmove
(
pci_dev
 *
pdev
)

3091 
¥ivD©a
 *
Õ
;

3092 
i
;

3093 #ifde‡
TH_BH_ISR


3094 #ifde‡
X86_64


3095 
u32
 
gúqvÆ
;

3096 
u64
 
ba£
;

3098 
u32
 
gúqvÆ
;

3099 
u32
 
ba£
;

3103 #ifde‡
FIFO_EMPTY_CHECK


3104 #ifde‡
X86_64


3105 
u64
 
b¨Ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

3107 
u32
 
b¨Ba£
 = (u32)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

3111 
	`log_vîbo£
("CameÅo xdma_remove\n");

3112 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

3116 
	`mdñay
(1000);

3119 
	`•ö_lock_bh
(&
DmaSètsLock
);

3120 
	`dñ_timî_sync
(&
°©s_timî
);

3121 
	`•ö_u∆ock_bh
(&
DmaSètsLock
);

3122 
	`•ö_lock_bh
(&
DmaLock
);

3123 
	`dñ_timî_sync
(&
pﬁl_timî
);

3124 
	`•ö_u∆ock_bh
(&
DmaLock
);

3125 #ifde‡
TH_BH_ISR


3126 #ifde‡
X86_64


3127 
ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

3129 
ba£
 = (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

3132 
	`Dma_mI¡DißbÀ
(
ba£
);

3135 
	`‰ì_úq
(
pdev
->
úq
,Ödev);

3136 if(
MSIE«bÀd
Ë
	`pci_dißbÀ_msi
(
pdev
);

3137 
gúqvÆ
 = 
	`Dma_mRódReg
(
ba£
, 
REG_DMA_CTRL_STATUS
);

3140 
	`¥ötk
("Whûêdißblög i¡îru±s, gŸ %x\n", 
gúqvÆ
);

3143 #ifde‡
FIFO_EMPTY_CHECK


3145 
	`DmaFifoEm±yWaô
(
HANDLE_0
,
DIR_TYPE_S2C
);

3146 
	`DmaFifoEm±yWaô
(
HANDLE_1
,
DIR_TYPE_S2C
);

3147 
	`DmaFifoEm±yWaô
(
HANDLE_0
,
DIR_TYPE_C2S
);

3148 
	`DmaFifoEm±yWaô
(
HANDLE_1
,
DIR_TYPE_C2S
);

3151 
	`mdñay
(
STABILITY_WAIT_TIME
);

3155 
	`•ö_lock_bh
(&
DmaLock
);

3157 #ifde‡
FIFO_EMPTY_CHECK


3159 
	`XIo_Out32
(
b¨Ba£
 + 
STATUS_REG_OFFSET
, 1 << 
AXI_MIG_RST_SHIFT
);

3164 
	`log_n‹mÆ
(
KERN_INFO
 "Doing DMAÑeset.\n");

3165 
i
=0; i<
MAX_DMA_ENGINES
; i++)

3167 if((
Õ
->
ígöeMask
Ë& (1LL << 
i
))

3168 
	`Dma_Re£t
(&(
Õ
->
Dma
[
i
]));

3171 
i
=0; i<
MAX_BARS
; i++)

3173 if((
dmaD©a
->
b¨Mask
Ë& ( 1 << 
i
 ))

3174 
	`iounm≠
(
dmaD©a
->
b¨Info
[
i
].
ba£VAddr
);

3176 
	`•ö_u∆ock_bh
(&
DmaLock
);

3178 if(
xdmaCdev
 !
NULL
)

3180 
	`log_vîbo£
("Unregistering char device driver\n");

3181 
	`cdev_dñ
(
xdmaCdev
);

3182 
	`uƒegi°î_chrdev_ªgi⁄
(
xdmaCdev
->
dev
, 1);

3185 
	`log_n‹mÆ
(
KERN_INFO
 "PCIÑeleaseÑegionsánd disable device.\n");

3186 
	`pci_ªÀa£_ªgi⁄s
(
pdev
);

3187 
	`pci_dißbÀ_devi˚
(
pdev
);

3188 
	`pci_£t_drvd©a
(
pdev
, 
NULL
);

3189 
	}
}

3191 
__öô
 
	$xdma_öô
()

3194 
	`•ö_lock_öô
(&
DmaLock
);

3195 
	`•ö_lock_öô
(&
I¡rLock
);

3196 
	`•ö_lock_öô
(&
DmaSètsLock
);

3197 
	`•ö_lock_öô
(&
PktPoﬁLock
);

3200 
	`¥ötk
(
KERN_INFO
 "XDMA: Inserting Xilinx base DMA driver in kernel.\n");

3201  
	`pci_ªgi°î_drivî
(&
xdma_drivî
);

3202 
	}
}

3204 
__exô
 
	$xdma_˛ónup
()

3206 
PktPoﬁ
 * 
µoﬁ
;

3207 
ﬁd°©e
;

3209 
	`log_vîbo£
("CameÅo xdma_cleanup\n");

3214 
ﬁd°©e
 = 
DrivîSèã
;

3215 
	`•ö_lock_bh
(&
DmaLock
);

3216 
DrivîSèã
 = 
UNREGISTERING
;

3217 
	`•ö_u∆ock_bh
(&
DmaLock
);

3220 
	`pci_uƒegi°î_drivî
(&
xdma_drivî
);

3222 if(
dmaD©a
 !
NULL
)

3224 
	`log_vîbo£
("U£∏cou¡ %d\n", 
dmaD©a
->
u£rCou¡
);

3225 
	`log_vîbo£
("GUI u£∏›í? %d\n", 
U£rO≥n
);

3226 
	`k‰ì
(
dmaD©a
);

3229 
	`¥ötk
("DrivîSèã stû»%d\n", 
ﬁd°©e
);

3232 
µoﬁ
 = 
pktPoﬁHód
;

3233 
µoﬁ
 !
NULL
)

3235 
	`log_vîbo£
("pktPoﬁ %∞pkèºay %p\n", 
µoﬁ
,Öpoﬁ->
pbuf
);

3236 
µoﬁ
 =Öpoﬁ->
√xt
;

3238 
	`log_vîbo£
("pktPoﬁHód %∞pktPoﬁTaû %p\n", 
pktPoﬁHód
, 
pktPoﬁTaû
);

3240 
	`¥ötk
(
KERN_INFO
 "XDMA: Unregistering Xilinx base DMA driver from kernel.\n");

3241 
	}
}

3243 
moduÀ_öô
(
xdma_öô
);

3244 
moduÀ_exô
(
xdma_˛ónup
);

3246 
EXPORT_SYMBOL
(
DmaRegi°î
);

3247 
EXPORT_SYMBOL
(
DmaUƒegi°î
);

3248 #ifde‡
FIFO_EMPTY_CHECK


3249 
EXPORT_SYMBOL
(
DmaFifoEm±yWaô
);

3251 
EXPORT_SYMBOL
(
DmaBa£Addªss
);

3252 
EXPORT_SYMBOL
(
DmaMac_WrôeReg
);

3253 
EXPORT_SYMBOL
(
DmaMac_RódReg
);

3254 
EXPORT_SYMBOL
(
DmaSídPages
);

3255 
EXPORT_SYMBOL
(
DmaSídPkt
);

3256 
EXPORT_SYMBOL
(
DmaSídPages_Tx
);

3257 
EXPORT_SYMBOL
(
Dma_gë_rög∑øm
);

	@xdma/xdma_bd.h

95 #i‚de‡
XDMA_BD_H


96 
	#XDMA_BD_H


	)

98 #ifde‡
__˝lu•lus


104 
	~"xio.h
"

111 
	#DMA_BD_MINIMUM_ALIGNMENT
 0x40

	)

116 
	#DMA_BD_SW_NUM_WORDS
 16

	)

117 
	#DMA_BD_HW_NUM_WORDS
 8

	)

127 
	#DMA_BD_BUFL_STATUS_OFFSET
 0x00

	)

128 
	#DMA_BD_USRL_OFFSET
 0x04

	)

129 
	#DMA_BD_USRH_OFFSET
 0x08

	)

130 
	#DMA_BD_CARDA_OFFSET
 0x0C

	)

131 
	#DMA_BD_BUFL_CTRL_OFFSET
 0x10

	)

132 
	#DMA_BD_BUFAL_OFFSET
 0x14

	)

133 
	#DMA_BD_BUFAH_OFFSET
 0x18

	)

134 
	#DMA_BD_NDESC_OFFSET
 0x1C

	)

141 
	#DMA_BD_VBUFAL_OFFSET
 0x20

	)

142 
	#DMA_BD_VBUFAH_OFFSET
 0x24

	)

143 #ifde‡
X86_64


144 
	#DMA_BD_PAGEADDRL_OFFSET
 0x28

	)

145 
	#DMA_BD_PAGEADDRH_OFFSET
 0x32

	)

147 
	#DMA_BD_PAGEADDR
 0x28

	)

151 
	#DMA_BD_BUFL_MASK
 0x000FFFFF

	)

152 
	#DMA_BD_STATUS_MASK
 0xFF000000

	)

153 
	#DMA_BD_CTRL_MASK
 0xFF000000

	)

156 
	#DMA_BD_INT_ERROR_MASK
 0x02000000

	)

157 
	#DMA_BD_INT_COMP_MASK
 0x01000000

	)

160 
	#DMA_BD_SOP_MASK
 0x80000000

	)

161 
	#DMA_BD_EOP_MASK
 0x40000000

	)

162 
	#DMA_BD_ERROR_MASK
 0x10000000

	)

163 
	#DMA_BD_USER_HIGH_ZERO_MASK
 0x08000000

	)

164 
	#DMA_BD_USER_LOW_ZERO_MASK
 0x04000000

	)

165 
	#DMA_BD_SHORT_MASK
 0x02000000

	)

166 
	#DMA_BD_COMP_MASK
 0x01000000

	)

176 
u32
 
	tDma_Bd
[
DMA_BD_SW_NUM_WORDS
];

196 #ifde‡
X86_64


197 
	#Dma_mBdRód
(
Ba£Addªss
, 
Off£t
) \

198 
	`XIo_In32
((*)((
u64
)(
Ba£Addªss
Ë+ ()(
Off£t
)))

	)

200 
	#Dma_mBdRód
(
Ba£Addªss
, 
Off£t
) \

201 
	`XIo_In32
((*)(()(
Ba£Addªss
Ë+ ()(
Off£t
)))

	)

220 #ifde‡
X86_64


221 
	#Dma_mBdWrôe
(
Ba£Addªss
, 
Off£t
, 
D©a
) \

222 
	`XIo_Out32
((*)((
u64
)
Ba£Addªss
+()
Off£t
), ()
D©a
)

	)

224 
	#Dma_mBdWrôe
(
Ba£Addªss
, 
Off£t
, 
D©a
) \

225 
	`XIo_Out32
((*)(()
Ba£Addªss
+()
Off£t
), ()
D©a
)

	)

241 
	#Dma_mBdCÀ¨
(
BdPå
) \

242 
	`mem£t
((
BdPå
), 0, (
Dma_Bd
))

	)

258 
	#Dma_mBdSëCål
(
BdPå
, 
D©a
) \

259 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFL_CTRL_OFFSET
, \

260 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_CTRL_OFFSET
) & \

261 
DMA_BD_BUFL_MASK
Ë| ((
D©a
Ë& 
DMA_BD_CTRL_MASK
))

	)

277 
	#Dma_mBdGëCål
(
BdPå
) \

278 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_CTRL_OFFSET
Ë& 
DMA_BD_CTRL_MASK
)

	)

294 
	#Dma_mBdSëSètus
(
BdPå
, 
D©a
) \

295 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFL_STATUS_OFFSET
, \

296 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_STATUS_OFFSET
) & \

297 
DMA_BD_BUFL_MASK
Ë| ((
D©a
Ë& 
DMA_BD_STATUS_MASK
))

	)

313 
	#Dma_mBdGëSètus
(
BdPå
) \

314 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_STATUS_OFFSET
Ë& 
DMA_BD_STATUS_MASK
)

	)

340 
	#Dma_mBdSëCålLígth
(
BdPå
, 
LíByãs
) \

342 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFL_CTRL_OFFSET
, \

343 ((
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_CTRL_OFFSET
) & \

344 
DMA_BD_CTRL_MASK
Ë| (
LíByãs
 & 
DMA_BD_BUFL_MASK
))); \

345 }

	)

347 
	#Dma_mBdSëSètLígth
(
BdPå
, 
LíByãs
) \

349 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFL_STATUS_OFFSET
, \

350 ((
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_STATUS_OFFSET
) & \

351 
DMA_BD_STATUS_MASK
Ë| (
LíByãs
 & 
DMA_BD_BUFL_MASK
))); \

352 }

	)

375 
	#Dma_mBdGëSètLígth
(
BdPå
) \

376 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_STATUS_OFFSET
Ë& 
DMA_BD_BUFL_MASK
)

	)

396 
	#Dma_mBdGëCålLígth
(
BdPå
) \

397 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFL_CTRL_OFFSET
Ë& 
DMA_BD_BUFL_MASK
)

	)

415 #ifde‡
X86_64


416 
	#Dma_mBdSëId
(
BdPå
, 
Id
) \

418 
u32
 
vÆ
; \

419 
vÆ
 = (
u32
)(
Id
); \

420 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_VBUFAL_OFFSET
, 
vÆ
); \

421 
vÆ
 = (
u32
)((((
u64
)(
Id
))>>32)); \

422 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_VBUFAH_OFFSET
, 
vÆ
); \

423 }

	)

425 
	#Dma_mBdSëId_NULL
(
BdPå
,
Id
) \

427 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_VBUFAL_OFFSET
,
Id
); \

428 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_VBUFAH_OFFSET
,
Id
); \

429 }

	)

432 
	#Dma_mBdSëPageAddr
(
BdPå
, 
Id
) \

434 
u32
 
vÆ
; \

435 
vÆ
 = (
u32
)(
Id
); \

436 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_PAGEADDRL_OFFSET
, 
vÆ
); \

437 
vÆ
 = (
u32
)((((
u64
)(
Id
))>>32)); \

438 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_PAGEADDRH_OFFSET
, 
vÆ
); \

439 }

	)

443 
	#Dma_mBdSëId
(
BdPå
, 
Id
) \

444 (
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_VBUFAL_OFFSET
, (
u32
)(
Id
)))

	)

448 
	#Dma_mBdSëPageAddr
(
BdPå
, 
Id
) \

449 (
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_PAGEADDR
, (
u32
)(
Id
)))

	)

463 #ifde‡
X86_64


464 
ölöe
 
u64
 
Dma_mBdGëId
(
Dma_Bd
 * 
BdPå
)

466 
u64
 
vÆ
;

467 
u32
 
vÆ1
, 
vÆ2
;

468 
vÆ1
 = (
Dma_mBdRód
((
BdPå
),
DMA_BD_VBUFAH_OFFSET
));

469 
vÆ2
 = (
Dma_mBdRód
((
BdPå
),
DMA_BD_VBUFAL_OFFSET
));

470 
vÆ
 = 
vÆ1
;

471 
vÆ
 <<= 32;

472 
vÆ
 |
vÆ2
;

473  
vÆ
;

476 
ölöe
 
u64
 
Dma_mBdGëPageAddr
(
Dma_Bd
 * 
BdPå
)

478 
u64
 
vÆ
;

479 
u32
 
vÆ1
, 
vÆ2
;

480 
vÆ1
 = (
Dma_mBdRód
((
BdPå
),
DMA_BD_PAGEADDRH_OFFSET
));

481 
vÆ2
 = (
Dma_mBdRód
((
BdPå
),
DMA_BD_PAGEADDRL_OFFSET
));

482 
vÆ
 = 
vÆ1
;

483 
vÆ
 <<= 32;

484 
vÆ
 |
vÆ2
;

485  
vÆ
;

489 
	#Dma_mBdGëId
(
BdPå
Ë(
	`Dma_mBdRód
((BdPå), 
DMA_BD_VBUFAL_OFFSET
))

	)

494 
	#Dma_mBdGëPageAddr
(
BdPå
) \

495 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_PAGEADDR
))

	)

512 #ifde‡
X86_64


513 
	#Dma_mBdSëBufAddr
(
BdPå
, 
Addr
) \

515 
u32
 
vÆ
; \

516 
vÆ
 = (
u32
)(
Addr
); \

517 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFAL_OFFSET
, 
vÆ
); \

518 
vÆ
 = (
u32
)((((
u64
)(
Addr
))>>32)); \

519 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFAH_OFFSET
, 
vÆ
); \

520 }

	)

522 
	#Dma_mBdSëBufAddr
(
BdPå
, 
Addr
) \

524 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFAL_OFFSET
, (
u32
)(
Addr
)); \

525 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_BUFAH_OFFSET
, (
u32
)0); \

526 }

	)

540 #ifde‡
X86_64


541 
ölöe
 
u64
 
Dma_mBdGëBufAddr
(
Dma_Bd
 * 
BdPå
)

543 
u64
 
vÆ
;

544 
u32
 
vÆ1
, 
vÆ2
;

545 
vÆ1
 = (
Dma_mBdRód
((
BdPå
),
DMA_BD_BUFAH_OFFSET
));

546 
vÆ2
 = (
Dma_mBdRód
((
BdPå
),
DMA_BD_BUFAL_OFFSET
));

547 
vÆ
 = 
vÆ1
;

548 
vÆ
 <<= 32;

549 
vÆ
 |
vÆ2
;

550  
vÆ
;

553 
	#Dma_mBdGëBufAddr
(
BdPå
) \

554 (
	`Dma_mBdRód
((
BdPå
), 
DMA_BD_BUFAL_OFFSET
))

	)

570 
	#Dma_mBdSëU£rD©a
(
BdPå
, 
U£r
) \

572 
u32
 
vÆ
; \

573 
vÆ
 = (
u32
)(
U£r
 & 0xFFFFFFFFLL); \

574 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_USRL_OFFSET
, 
vÆ
); \

575 
vÆ
 = (
u32
)((
U£r
>>32) & 0xFFFFFFFFLL); \

576 
	`Dma_mBdWrôe
((
BdPå
), 
DMA_BD_USRH_OFFSET
, 
vÆ
); \

577 }

	)

591 
ölöe
 
Dma_mBdGëU£rD©a
(
Dma_Bd
 * 
BdPå
)

593 
vÆ
;

594 
u32
 
vÆ1
, 
vÆ2
;

595 
vÆ1
 = (
Dma_mBdRód
((
BdPå
), 
DMA_BD_USRH_OFFSET
));

596 
vÆ2
 = (
Dma_mBdRód
((
BdPå
), 
DMA_BD_USRL_OFFSET
));

597 
vÆ
 = 
vÆ1
;

598 
vÆ
 <<= 32;

599 
vÆ
 |
vÆ2
;

600  
vÆ
;

615 #ifde‡
X86_64


616 
	#Dma_mPhysToVút
(
BdPå
) \

617 ((
BdPå
Ë+ (
RögPå
->
Fú°BdAddr
 - RögPå->
Fú°BdPhysAddr
))

	)

619 
	#Dma_mPhysToVút
(
BdPå
) \

620 ((
u32
)(
BdPå
Ë+ (
RögPå
->
Fú°BdAddr
 - RögPå->
Fú°BdPhysAddr
))

	)

634 #ifde‡
X86_64


635 
	#Dma_mVútToPhys
(
BdPå
) \

636 ((
Dma_Bd
 *)(
BdPå
Ë- ((Dma_Bd *)
RögPå
->
Fú°BdAddr
 - (Dma_Bd *)RögPå->
Fú°BdPhysAddr
))

	)

638 
	#Dma_mVútToPhys
(
BdPå
) \

639 ((
u32
)(
BdPå
Ë- (
RögPå
->
Fú°BdAddr
 - RögPå->
Fú°BdPhysAddr
))

	)

644 #ifde‡
__˝lu•lus


	@xdma/xdma_bdring.c

69 
	~<löux/kî√l.h
>

70 
	~<löux/°rög.h
>

71 
	~<löux/ëhtoﬁ.h
>

73 
	~"xbasic_ty≥s.h
"

74 
	~"xdebug.h
"

75 
	~"x°©us.h
"

76 
	~"xio.h
"

77 
	~"xdma_bdrög.h
"

78 
	~"xdma_hw.h
"

124 #ifde‡
X86_64


125 
	$Dma_BdRögCª©e
(
Dma_BdRög
 * 
RögPå
, 
u64
 
PhysAddr
, u64 
VútAddr
, 
u32
 
Alignmít
, 
BdCou¡
)

128 
	$Dma_BdRögCª©e
(
Dma_BdRög
 * 
RögPå
, 
u32
 
PhysAddr
, u32 
VútAddr
, u32 
Alignmít
, 
BdCou¡
)

131 
i
;

132 #ifde‡
X86_64


133 
u64
 
BdVútAddr
;

134 
u64
 
BdPhysAddr
;

136 
u32
 
BdVútAddr
;

137 
u32
 
BdPhysAddr
;

143 
RögPå
->
AŒC¡
 = 0;

144 
RögPå
->
FªeC¡
 = 0;

145 
RögPå
->
HwC¡
 = 0;

146 
RögPå
->
PªC¡
 = 0;

147 
RögPå
->
Po°C¡
 = 0;

148 
RögPå
->
BDîrs
 = 0;

149 
RögPå
->
BDSîrs
 = 0;

152 i‡(
Alignmít
 < 
DMA_BD_MINIMUM_ALIGNMENT
) {

153  (
XST_INVALID_PARAM
);

157 i‡((
Alignmít
 - 1) & Alignment) {

158  (
XST_INVALID_PARAM
);

162 i‡((
PhysAddr
 % 
Alignmít
Ë|| (
VútAddr
 % Alignment)) {

163  (
XST_INVALID_PARAM
);

167 i‡(
BdCou¡
 == 0) {

168  (
XST_INVALID_PARAM
);

172 
RögPå
->
Sï¨©i⁄
 =

173 ((
Dma_Bd
Ë+ (
Alignmít
 - 1)) & ~(Alignment - 1);

178 i‡(
VútAddr
 > (VútAdd∏+ (
RögPå
->
Sï¨©i⁄
 * 
BdCou¡
) - 1)) {

179  (
XST_DMA_SG_LIST_ERROR
);

187 
	`log_vîbo£
(
KERN_INFO
 "Zeroing out BDÑing space - %d bytes\n",

188 (
RögPå
->
Sï¨©i⁄
 * 
BdCou¡
));

189 
	`mem£t
((*Ë
VútAddr
, 0, (
RögPå
->
Sï¨©i⁄
 * 
BdCou¡
));

191 
BdVútAddr
 = 
VútAddr
;

192 
BdPhysAddr
 = 
PhysAddr
 + 
RögPå
->
Sï¨©i⁄
;

193 
i
 = 1; i < 
BdCou¡
; i++) {

194 
	`Dma_mBdWrôe
(
BdVútAddr
, 
DMA_BD_NDESC_OFFSET
, 
BdPhysAddr
);

195 
BdVútAddr
 +
RögPå
->
Sï¨©i⁄
;

196 
BdPhysAddr
 +
RögPå
->
Sï¨©i⁄
;

200 
	`Dma_mBdWrôe
(
BdVútAddr
, 
DMA_BD_NDESC_OFFSET
, 
PhysAddr
);

203 
RögPå
->
RunSèã
 = 
XST_DMA_SG_IS_STOPPED
;

204 
RögPå
->
Fú°BdAddr
 = 
VútAddr
;

205 
RögPå
->
Fú°BdPhysAddr
 = 
PhysAddr
;

206 
RögPå
->
La°BdAddr
 = 
BdVútAddr
;

207 
RögPå
->
Lígth
 = RögPå->
La°BdAddr
 - RögPå->
Fú°BdAddr
 +

208 
RögPå
->
Sï¨©i⁄
;

209 
RögPå
->
AŒC¡
 = 
BdCou¡
;

210 
RögPå
->
FªeC¡
 = 
BdCou¡
;

211 
RögPå
->
FªeHód
 = (
Dma_Bd
 *Ë
VútAddr
;

212 
RögPå
->
PªHód
 = (
Dma_Bd
 *Ë
VútAddr
;

213 
RögPå
->
HwHód
 = (
Dma_Bd
 *Ë
VútAddr
;

214 
RögPå
->
HwTaû
 = (
Dma_Bd
 *Ë
VútAddr
;

215 
RögPå
->
Po°Hód
 = (
Dma_Bd
 *Ë
VútAddr
;

216 
RögPå
->
BdaRe°¨t
 = (
Dma_Bd
 *Ë
PhysAddr
;

218 if(
RögPå
->
IsRxCh™√l
)

219 
	`log_vîbo£
(
KERN_INFO
 "SeemsÅo beán Rx channel\n");

220 
	`log_vîbo£
(
KERN_INFO
 "Rög På %p:\n", 
RögPå
);

221 
	`log_vîbo£
(
KERN_INFO
 "Ch™Ba£ 0x%x, ", 
RögPå
->
Ch™Ba£
);

222 
	`log_vîbo£
(
KERN_INFO
 "first Bd PA 0x%x, first Bd VA 0x%x,Üast BD VA 0x%x\n",

223 
RögPå
->
Fú°BdPhysAddr
, RögPå->
Fú°BdAddr
, RögPå->
La°BdAddr
);

224 
	`log_vîbo£
(
KERN_INFO
 "length %d, state 0x%x, separation %d\n",

225 
RögPå
->
Lígth
, RögPå->
RunSèã
, RögPå->
Sï¨©i⁄
);

226 
	`log_vîbo£
(
KERN_INFO
 "free count %d,Öre count %d, HW count %d,Öost count %d,áll count %d\n",

227 
RögPå
->
FªeC¡
, RögPå->
PªC¡
, RögPå->
HwC¡
, RögPå->
Po°C¡
,

228 
RögPå
->
AŒC¡
);

229 
	`log_vîbo£
(
KERN_INFO
 "HwTaû i†© %x\n", (
u32
)(
RögPå
->
HwTaû
));

231  (
XST_SUCCESS
);

232 
	}
}

246 
	$Dma_BdRögSèπ
(
Dma_BdRög
 * 
RögPå
)

250 i‡(
RögPå
->
AŒC¡
 == 0) {

251  (
XST_DMA_SG_NO_LIST
);

255 i‡(
RögPå
->
RunSèã
 =
XST_DMA_SG_IS_STARTED
) {

256  (
XST_SUCCESS
);

260 
RögPå
->
RunSèã
 = 
XST_DMA_SG_IS_STARTED
;

266 #ifde‡
X86_64


267 
	`Dma_mWrôeReg
(
RögPå
->
Ch™Ba£
, 
REG_DMA_ENG_NEXT_BD
,

268 
RögPå
->
BdaRe°¨t
);

269 
	`Dma_mWrôeReg
(
RögPå
->
Ch™Ba£
, 
REG_SW_NEXT_BD
,

270 
RögPå
->
BdaRe°¨t
);

271 
	`wmb
();

273 
	`Dma_mWrôeReg
(
RögPå
->
Ch™Ba£
, 
REG_DMA_ENG_NEXT_BD
,

274 (
u32
Ë
RögPå
->
BdaRe°¨t
);

275 
	`Dma_mWrôeReg
(
RögPå
->
Ch™Ba£
, 
REG_SW_NEXT_BD
,

276 (
u32
Ë
RögPå
->
BdaRe°¨t
);

277 
	`wmb
();

281 
	`Dma_mE«bÀ
(
RögPå
->
Ch™Ba£
);

283 
	`wmb
();

288 i‡(
RögPå
->
HwC¡
 > 0) {

289 
	`Dma_mWrôeReg
(
RögPå
->
Ch™Ba£
, 
REG_SW_NEXT_BD
,

290 
	`Dma_mVútToPhys
(
RögPå
->
HwTaû
));

292 i‡(
RögPå
->
IsRxCh™√l
)

293 
	`Dma_mRódReg
(
RögPå
->
Ch™Ba£
, 0x18);

295  (
XST_SUCCESS
);

296 
	}
}

369 
	$Dma_BdRögAŒoc
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 ** 
BdSëPå
)

372 i‡(
RögPå
->
FªeC¡
 < 
NumBd
) {

373 
	`log_vîbo£
(
KERN_INFO
 "Ring %x free count is only %d\n",

374 (
u32
Ë
RögPå
, (RögPå->
FªeC¡
));

375  (
XST_FAILURE
);

380 *
BdSëPå
 = 
RögPå
->
FªeHód
;

381 
	`Dma_mRögSìkahód
(
RögPå
, RögPå->
FªeHód
, 
NumBd
);

382 
RögPå
->
FªeC¡
 -
NumBd
;

383 
RögPå
->
PªC¡
 +
NumBd
;

386 
	`log_vîbo£
(
KERN_INFO
 "Ring %x free %dÖre %d hw %dÖost %d\n",

387 (
u32
Ë
RögPå
, RögPå->
FªeC¡
, RögPå->
PªC¡
, RögPå->
HwC¡
,

388 
RögPå
->
Po°C¡
);

390  (
XST_SUCCESS
);

391 
	}
}

455 
	$Dma_BdRögUnAŒoc
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 * 
BdSëPå
)

458 i‡(
RögPå
->
PªC¡
 < 
NumBd
) {

459 
	`¥ötk
(
KERN_ERR
 "BdRögU«Œoc: PªC¡ %x NumBd %d\n", 
RögPå
->
PªC¡
, 
NumBd
 );

460  (
XST_FAILURE
);

464 
	`Dma_mRögSìkback
(
RögPå
, RögPå->
FªeHód
, 
NumBd
);

465 
RögPå
->
FªeC¡
 +
NumBd
;

466 
RögPå
->
PªC¡
 -
NumBd
;

468  (
XST_SUCCESS
);

469 
	}
}

500 
	$Dma_BdRögToHw
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 * 
BdSëPå
)

502 
Dma_Bd
 *
CurBdPå
;

503 
i
;

504 
u32
 
BdStsCr
;

507 i‡(
NumBd
 == 0) {

508  (
XST_SUCCESS
);

512 i‡((
RögPå
->
PªC¡
 < 
NumBd
Ë|| (RögPå->
PªHód
 !
BdSëPå
)) {

513 
	`¥ötk
(
KERN_INFO
 "PreCnt is %d, PreHead is %x\n",

514 
RögPå
->
PªC¡
, (
u32
Ë(RögPå->
PªHód
));

515 
	`¥ötk
(
KERN_INFO
 "returning XST_DMA_SG_LIST_ERROR\n");

516  (
XST_DMA_SG_LIST_ERROR
);

519 
CurBdPå
 = 
BdSëPå
;

520 
BdStsCr
 = 
	`Dma_mBdRód
(
CurBdPå
, 
DMA_BD_BUFL_CTRL_OFFSET
);

525 i‡(!(
RögPå
->
IsRxCh™√l
Ë&& !(
BdStsCr
 & 
DMA_BD_SOP_MASK
)) {

526 
	`¥ötk
(
KERN_WARNING
 "First TX BD should have SOP\n");

527  (
XST_FAILURE
);

531 
i
 = 0; i < 
NumBd
; i++) {

533 
BdStsCr
 = 
	`Dma_mBdRód
(
CurBdPå
, 
DMA_BD_BUFL_CTRL_OFFSET
);

539 i‡((
BdStsCr
 & 
DMA_BD_BUFL_MASK
) == 0) {

540 
	`¥ötk
(
KERN_WARNING
 "BDs should haveÜength.\n");

545 
	`Dma_mBdSëSètus
(
CurBdPå
, 0);

547 
CurBdPå
 = 
	`Dma_mBdRögNext
(
RögPå
, CurBdPtr);

550 if(
i
 !
NumBd
) {

551 
	`¥ötk
(
KERN_ERR
 "%d BD†ö°ód o‡%d\n", 
i
, 
NumBd
);

552  (
XST_FAILURE
);

556 i‡(!(
RögPå
->
IsRxCh™√l
Ë&& !(
BdStsCr
 & 
DMA_BD_EOP_MASK
)) {

557 
	`log_n‹mÆ
(
KERN_WARNING
 "Last TX BD should have EOP\n");

563 
	`Dma_mRögSìkahód
(
RögPå
, RögPå->
PªHód
, 
NumBd
);

564 
RögPå
->
PªC¡
 -
NumBd
;

565 
RögPå
->
HwTaû
 = 
CurBdPå
;

566 
RögPå
->
HwC¡
 +
NumBd
;

569 i‡(
RögPå
->
RunSèã
 =
XST_DMA_SG_IS_STARTED
) {

574 
	`wmb
();

579 
	`Dma_mWrôeReg
(
RögPå
->
Ch™Ba£
, 
REG_SW_NEXT_BD
,

580 
	`Dma_mVútToPhys
(
RögPå
->
HwTaû
));

581 
	`log_vîbo£
(
KERN_INFO
 "Writing %x into %x\n",

582 
	`Dma_mVútToPhys
(
RögPå
->
HwTaû
),

583 (
RögPå
->
Ch™Ba£
+ 
REG_SW_NEXT_BD
));

585 
	`log_vîbo£
(
KERN_INFO
 "ToHw wôh %d BDs\n", 
NumBd
);

587  (
XST_SUCCESS
);

588 
	}
}

660 
	$Dma_BdRögFromHw
(
Dma_BdRög
 * 
RögPå
, 
BdLimô
,

661 
Dma_Bd
 ** 
BdSëPå
)

663 
Dma_Bd
 *
CurBdPå
;

664 
BdCou¡
;

665 
BdP¨tülCou¡
;

666 
u32
 
BdStsCr
, 
BdCål
;

667 
u£rInfo
;

669 
CurBdPå
 = 
RögPå
->
HwHód
;

670 
BdCou¡
 = 0;

671 
BdP¨tülCou¡
 = 0;

674 i‡(
RögPå
->
HwC¡
 == 0) {

675 *
BdSëPå
 = 
NULL
;

691 
BdCou¡
 < 
BdLimô
) {

693 
BdStsCr
 = 
	`Dma_mBdGëSètus
(
CurBdPå
);

694 
BdCål
 = 
	`Dma_mBdGëCål
(
CurBdPå
);

695 
u£rInfo
 = 
	`Dma_mBdGëU£rD©a
(
CurBdPå
);

698 i‡(
BdStsCr
 & 
DMA_BD_ERROR_MASK
)

700 i‡(!(
RögPå
->
IsRxCh™√l
))

701 
	`¥ötk
(
KERN_ERR
 "TX: BD %∞hadÉº‹\n", 
CurBdPå
);

703 
	`¥ötk
(
KERN_ERR
 "RX: BD %∞hadÉº‹\n", 
CurBdPå
);

704 
RögPå
->
BDîrs
 ++;

705 
	`¥ötk
("BD sètu†%xÇexàBD'†PA %x\n", 
BdStsCr
, 
	`Dma_mBdRód
((
CurBdPå
), 
DMA_BD_NDESC_OFFSET
));

706 
	`¥ötk
("Buf„∏PA %x\n", 
	`Dma_mBdRód
((
CurBdPå
), 
DMA_BD_BUFAL_OFFSET
));

707 
	`log_vîbo£
("DMA EngöêC⁄åﬁ %x\n", 
	`Dma_mRódReg
(
RögPå
->
Ch™Ba£
, 0x4));

708 
	`log_vîbo£
("DMA Hód På %x\n", 
	`Dma_mRódReg
(
RögPå
->
Ch™Ba£
, 0x8));

709 
	`log_vîbo£
("DMA SW Des¯På %x\n", 
	`Dma_mRódReg
(
RögPå
->
Ch™Ba£
, 0xC));

710 
	`log_vîbo£
("DMA Com∞Des¯På %x\n", 
	`Dma_mRódReg
(
RögPå
->
Ch™Ba£
, 0x10));

714 i‡(!(
RögPå
->
IsRxCh™√l
Ë&& (
BdStsCr
 & 
DMA_BD_SHORT_MASK
))

716 
	`¥ötk
(
KERN_ERR
 "TX BD %∞had sh‹àîr‹\n", 
CurBdPå
);

717 
	`¥ötk
("BD sètu†%xÇexàBD'†PA %x\n", 
BdStsCr
, 
	`Dma_mBdRód
((
CurBdPå
), 
DMA_BD_NDESC_OFFSET
));

718 
	`¥ötk
("Buf„∏PA %x\n", 
	`Dma_mBdRód
((
CurBdPå
), 
DMA_BD_BUFAL_OFFSET
));

719 
RögPå
->
BDSîrs
 ++;

723 i‡(!(
BdStsCr
 & 
DMA_BD_COMP_MASK
))

729 i‡((
RögPå
->
IsRxCh™√l
Ë&& (
BdStsCr
 & 
DMA_BD_EOP_MASK
))

731 if(!(
BdStsCr
 & 
DMA_BD_USER_HIGH_ZERO_MASK
) &&

732 !(
u£rInfo
 & 0xFFFFFFFF00000000LL)) ;

733 if(!(
BdStsCr
 & 
DMA_BD_USER_LOW_ZERO_MASK
) &&

734 !(
u£rInfo
 & 0xFFFFFFFFLL)) ;

739 
BdCou¡
++;

748 i‡(((
RögPå
->
IsRxCh™√l
Ë&& (
BdStsCr
 & 
DMA_BD_EOP_MASK
)) ||

749 (!(
RögPå
->
IsRxCh™√l
Ë&& (
BdCål
 & 
DMA_BD_EOP_MASK
)) ||

750 (
BdStsCr
 & 
DMA_BD_ERROR_MASK
))

752 
BdP¨tülCou¡
 = 0;

755 
BdP¨tülCou¡
++;

759 
CurBdPå
 = 
	`Dma_mBdRögNext
(
RögPå
, CurBdPtr);

762 i‡(
CurBdPå
 =
RögPå
->
HwTaû
) {

767 
BdCou¡
 -
BdP¨tülCou¡
;

772 i‡(
BdCou¡
) {

773 *
BdSëPå
 = 
RögPå
->
HwHód
;

774 
RögPå
->
HwC¡
 -
BdCou¡
;

775 
RögPå
->
Po°C¡
 +
BdCou¡
;

776 
	`Dma_mRögSìkahód
(
RögPå
, RögPå->
HwHód
, 
BdCou¡
);

777  (
BdCou¡
);

780 *
BdSëPå
 = 
NULL
;

783 
	}
}

811 
	$Dma_BdRögF‹˚FromHw
(
Dma_BdRög
 * 
RögPå
, 
BdLimô
,

812 
Dma_Bd
 ** 
BdSëPå
)

814 
Dma_Bd
 *
CurBdPå
;

815 
BdCou¡
;

816 
u32
 
BdStsCr
;

818 
CurBdPå
 = 
RögPå
->
HwHód
;

819 
BdCou¡
 = 0;

821 
	`log_vîbo£
(
KERN_INFO
 "F‹˚FromHw: HwC¡ i†%d\n", 
RögPå
->
HwC¡
);

823 i‡(
RögPå
->
HwC¡
 == 0) {

824 *
BdSëPå
 = 
NULL
;

833 
BdCou¡
 < 
BdLimô
) {

835 
BdStsCr
 = 
	`Dma_mBdGëSètus
(
CurBdPå
);

836 
	`log_vîbo£
(
KERN_INFO
 "BD Sètu†i†%x\n", 
BdStsCr
);

839 i‡(
BdStsCr
 & 
DMA_BD_ERROR_MASK
)

840 
	`¥ötk
(
KERN_ERR
 "BD %∞hadÉº‹\n", 
CurBdPå
);

842 
BdCou¡
++;

845 
CurBdPå
 = 
	`Dma_mBdRögNext
(
RögPå
, CurBdPtr);

848 i‡(
CurBdPå
 =
RögPå
->
HwTaû
) {

856 i‡(
BdCou¡
) {

857 *
BdSëPå
 = 
RögPå
->
HwHód
;

858 
RögPå
->
HwC¡
 -
BdCou¡
;

859 
RögPå
->
Po°C¡
 +
BdCou¡
;

860 
	`Dma_mRögSìkahód
(
RögPå
, RögPå->
HwHód
, 
BdCou¡
);

861  (
BdCou¡
);

864 *
BdSëPå
 = 
NULL
;

867 
	}
}

919 
	$Dma_BdRögFªe
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 * 
BdSëPå
)

921 
Dma_Bd
 * 
CurBdPå
;

922 
i
;

928 i‡(
NumBd
 == 0) {

929  
XST_SUCCESS
;

933 i‡((
RögPå
->
Po°C¡
 < 
NumBd
Ë|| (RögPå->
Po°Hód
 !
BdSëPå
)) {

934 
	`log_n‹mÆ
(
KERN_WARNING
 "Some out-of-syncÉrror.\n");

935  (
XST_DMA_SG_LIST_ERROR
);

941 
CurBdPå
 = 
BdSëPå
;

942 
i
 = 0; i < 
NumBd
; i++) {

943 
	`Dma_mBdWrôe
(
CurBdPå
, 
DMA_BD_BUFL_STATUS_OFFSET
, 0);

944 
	`Dma_mBdWrôe
(
CurBdPå
, 
DMA_BD_BUFL_CTRL_OFFSET
, 0);

947 
CurBdPå
 = 
	`Dma_mBdRögNext
(
RögPå
, CurBdPtr);

951 
RögPå
->
FªeC¡
 +
NumBd
;

952 
RögPå
->
Po°C¡
 -
NumBd
;

953 
	`Dma_mRögSìkahód
(
RögPå
, RögPå->
Po°Hód
, 
NumBd
);

955 
	`log_vîbo£
(
KERN_INFO
 "Ring %x free %dÖre %d hw %dÖost %d\n",

956 (
u32
Ë
RögPå
, RögPå->
FªeC¡
, RögPå->
PªC¡
, RögPå->
HwC¡
,

957 
RögPå
->
Po°C¡
);

959  (
XST_SUCCESS
);

960 
	}
}

989 
	$Dma_BdRögCheck
(
Dma_BdRög
 * 
RögPå
)

991 
u32
 
AddrV
, 
AddrP
;

992 
i
;

995 i‡(
RögPå
->
AŒC¡
 == 0) {

996  (
XST_DMA_SG_NO_LIST
);

1000 i‡(
RögPå
->
RunSèã
 =
XST_DMA_SG_IS_STARTED
) {

1001  (
XST_IS_STARTED
);

1005 i‡(
RögPå
->
RunSèã
 !
XST_DMA_SG_IS_STOPPED
) {

1006  (
XST_DMA_SG_LIST_ERROR
);

1010 
AddrV
 = (
u32
Ë
RögPå
->
FªeHód
;

1011 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1012  (
XST_DMA_SG_LIST_ERROR
);

1015 
AddrV
 = (
u32
Ë
RögPå
->
PªHód
;

1016 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1017  (
XST_DMA_SG_LIST_ERROR
);

1020 
AddrV
 = (
u32
Ë
RögPå
->
HwHód
;

1021 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1022  (
XST_DMA_SG_LIST_ERROR
);

1025 
AddrV
 = (
u32
Ë
RögPå
->
HwTaû
;

1026 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1027  (
XST_DMA_SG_LIST_ERROR
);

1030 
AddrV
 = (
u32
Ë
RögPå
->
Po°Hód
;

1031 i‡((
AddrV
 < 
RögPå
->
Fú°BdAddr
Ë|| (AddrV > RögPå->
La°BdAddr
)) {

1032  (
XST_DMA_SG_LIST_ERROR
);

1036 i‡((
RögPå
->
HwC¡
 + RögPå->
PªC¡
 + RögPå->
FªeC¡
 +

1037 
RögPå
->
Po°C¡
Ë!RögPå->
AŒC¡
) {

1038  (
XST_DMA_SG_LIST_ERROR
);

1042 
AddrV
 = 
RögPå
->
Fú°BdAddr
;

1043 
AddrP
 = 
RögPå
->
Fú°BdPhysAddr
 + RögPå->
Sï¨©i⁄
;

1044 
i
 = 1; i < 
RögPå
->
AŒC¡
; i++) {

1048 i‡(
	`Dma_mBdRód
(
AddrV
, 
DMA_BD_NDESC_OFFSET
Ë!
AddrP
) {

1049  (
XST_DMA_SG_LIST_ERROR
);

1053 
AddrV
 +
RögPå
->
Sï¨©i⁄
;

1054 
AddrP
 +
RögPå
->
Sï¨©i⁄
;

1058 i‡(
	`Dma_mBdRód
(
AddrV
, 
DMA_BD_NDESC_OFFSET
Ë!
RögPå
->
Fú°BdPhysAddr
) {

1059  (
XST_DMA_SG_LIST_ERROR
);

1063  (
XST_SUCCESS
);

1064 
	}
}

1085 
u32
 
	$Dma_BdRögAlign
(
u32
 
AŒocPå
, u32 
Size
, u32 
Align
, u32 * 
Dñè
)

1087 
u32
 
numbds
;

1088 
u32
 
i
;

1089 
byãÆign
;

1091 
	`log_vîbo£
(
KERN_INFO
 "BD space %x, Size %d, Align %d\n",

1092 
AŒocPå
, 
Size
, 
Align
);

1095 if(!
AŒocPå
 || !
Size
 || (Sizê< 
Align
))

1097 
	`log_n‹mÆ
(
KERN_ERR
 "Badárguments Alloc %x Size %d\n",

1098 
AŒocPå
, 
Size
);

1099 *
Dñè
 = 0;

1103 
byãÆign
 = ((
u32
)*
DMA_BD_SW_NUM_WORDS
);

1104 
numbds
 = 
Size
 / 
byãÆign
;

1105 
	`log_vîbo£
(
KERN_INFO
 "Numbî o‡BD†bef‹êÆignög i†%d\n", 
numbds
);

1107 if(
AŒocPå
 % 
byãÆign
)

1110 
	`log_vîbo£
(
KERN_INFO
 "Realignment isÑequired\n");

1112 
i
 = 
byãÆign
 - (
AŒocPå
 & 0xFF);

1113 
Size
 -
i
;

1114 *
Dñè
 = 
i
;

1115 
numbds
 = 
Size
 / 
byãÆign
;

1118 
	`log_vîbo£
(
KERN_INFO
 "Alignment is fine\n");

1120 
	`log_n‹mÆ
(
KERN_INFO
 "BD s∑˚ should bêshi·ed by %d byãs\n", *
Dñè
);

1121 
	`log_n‹mÆ
(
KERN_INFO
 "A·îálignög, # BD†%d, sizê%d\n", 
numbds
, 
Size
);

1122  
numbds
;

1123 
	}
}

	@xdma/xdma_bdring.h

70 #i‚de‡
DMA_BDRING_H


71 
	#DMA_BDRING_H


	)

73 #ifde‡
__˝lu•lus


77 
	~"xdma_bd.h
"

90 #ifde‡
X86_64


92 
u64
 
Ch™Ba£
;

93 
u32
 
IsRxCh™√l
;

94 
u32
 
RunSèã
;

95 
u64
 
Fú°BdPhysAddr
;

96 
u64
 
Fú°BdAddr
;

97 
u64
 
La°BdAddr
;

98 
u32
 
Lígth
;

99 
u32
 
Sï¨©i⁄
;

101 
Dma_Bd
 *
FªeHód
;

102 
Dma_Bd
 *
PªHód
;

103 
Dma_Bd
 *
HwHód
;

104 
Dma_Bd
 *
HwTaû
;

105 
Dma_Bd
 *
Po°Hód
;

106 
Dma_Bd
 *
BdaRe°¨t
;

107 
u32
 
FªeC¡
;

108 
u32
 
PªC¡
;

109 
u32
 
HwC¡
;

110 
u32
 
Po°C¡
;

111 
u32
 
AŒC¡
;

113 
u32
 
BDîrs
;

114 
u32
 
BDSîrs
;

115 } 
	tDma_BdRög
;

118 
u32
 
Ch™Ba£
;

119 
u32
 
IsRxCh™√l
;

120 
u32
 
RunSèã
;

121 
u32
 
Fú°BdPhysAddr
;

122 
u32
 
Fú°BdAddr
;

123 
u32
 
La°BdAddr
;

124 
u32
 
Lígth
;

125 
u32
 
Sï¨©i⁄
;

127 
Dma_Bd
 *
FªeHód
;

128 
Dma_Bd
 *
PªHód
;

129 
Dma_Bd
 *
HwHód
;

130 
Dma_Bd
 *
HwTaû
;

131 
Dma_Bd
 *
Po°Hód
;

132 
Dma_Bd
 *
BdaRe°¨t
;

133 
u32
 
FªeC¡
;

134 
u32
 
PªC¡
;

135 
u32
 
HwC¡
;

136 
u32
 
Po°C¡
;

137 
u32
 
AŒC¡
;

139 
u32
 
BDîrs
;

140 
u32
 
BDSîrs
;

141 } 
	tDma_BdRög
;

160 
	#Dma_mGëRög
(
In°™˚På
Ë((In°™˚På)->
BdRög
)

	)

177 
	#Dma_mBdRögGëC¡
(
RögPå
Ë((RögPå)->
AŒC¡
)

	)

194 
	#Dma_mBdRögGëFªeC¡
(
RögPå
Ë((RögPå)->
FªeC¡
)

	)

218 
	#Dma_mBdRögS«pShŸCuºBd
(
RögPå
) \

220 (
RögPå
)->
BdaRe°¨t
 = \

221 (
Dma_Bd
 *)
	`Dma_mRódReg
((
RögPå
)->
Ch™Ba£
, 
REG_DMA_ENG_NEXT_BD
); \

222 }

	)

239 #ifde‡
X86_64


240 
	#Dma_mBdRögNext
(
RögPå
, 
BdPå
) \

241 (((
u64
)(
BdPå
Ë>(
RögPå
)->
La°BdAddr
) ? \

242 (
Dma_Bd
*)(
RögPå
)->
Fú°BdAddr
 : \

243 (
Dma_Bd
*)((
u64
)(
BdPå
Ë+ (
RögPå
)->
Sï¨©i⁄
))

	)

245 
	#Dma_mBdRögNext
(
RögPå
, 
BdPå
) \

246 (((
u32
)(
BdPå
Ë>(
RögPå
)->
La°BdAddr
) ? \

247 (
Dma_Bd
*)(
RögPå
)->
Fú°BdAddr
 : \

248 (
Dma_Bd
*)((
u32
)(
BdPå
Ë+ (
RögPå
)->
Sï¨©i⁄
))

	)

265 #ifde‡
X86_64


266 
	#Dma_mBdRögPªv
(
RögPå
, 
BdPå
) \

267 (((
BdPå
Ë<(
RögPå
)->
Fú°BdAddr
) ? \

268 (
Dma_Bd
*)(
RögPå
)->
La°BdAddr
 : \

269 (
Dma_Bd
*)((
BdPå
Ë- (
RögPå
)->
Sï¨©i⁄
))

	)

272 
	#Dma_mBdRögPªv
(
RögPå
, 
BdPå
) \

273 (((
u32
)(
BdPå
Ë<(
RögPå
)->
Fú°BdAddr
) ? \

274 (
Dma_Bd
*)(
RögPå
)->
La°BdAddr
 : \

275 (
Dma_Bd
*)((
u32
)(
BdPå
Ë- (
RögPå
)->
Sï¨©i⁄
))

	)

292 #ifde‡
X86_64


293 
	#Dma_mRögSìkahód
(
RögPå
, 
BdPå
, 
NumBd
) \

295 
u64
 
Addr
 = (
BdPå
); \

297 
Addr
 +((
RögPå
)->
Sï¨©i⁄
 * (
NumBd
)); \

298 i‡((
Addr
 > (
RögPå
)->
La°BdAddr
Ë|| ((
u64
)(
BdPå
) > Addr))\

300 
Addr
 -(
RögPå
)->
Lígth
; \

303 (
BdPå
Ë(
Dma_Bd
*)
Addr
; \

304 }

	)

306 
	#Dma_mRögSìkahód
(
RögPå
, 
BdPå
, 
NumBd
) \

308 
u32
 
Addr
 = (u32)(
BdPå
); \

310 
Addr
 +((
RögPå
)->
Sï¨©i⁄
 * (
NumBd
)); \

311 i‡((
Addr
 > (
RögPå
)->
La°BdAddr
Ë|| ((
u32
)(
BdPå
) > Addr))\

313 
Addr
 -(
RögPå
)->
Lígth
; \

316 (
BdPå
Ë(
Dma_Bd
*)
Addr
; \

317 }

	)

334 #ifde‡
X86_64


335 
	#Dma_mRögSìkback
(
RögPå
, 
BdPå
, 
NumBd
) \

337 
u64
 
Addr
 = (
BdPå
); \

339 
Addr
 -((
RögPå
)->
Sï¨©i⁄
 * (
NumBd
)); \

340 i‡((
Addr
 < (
RögPå
)->
Fú°BdAddr
Ë|| ((
u64
)(
BdPå
) < Addr)) \

342 
Addr
 +(
RögPå
)->
Lígth
; \

345 (
BdPå
Ë(
Dma_Bd
*)
Addr
; \

346 }

	)

348 
	#Dma_mRögSìkback
(
RögPå
, 
BdPå
, 
NumBd
) \

350 
u32
 
Addr
 = (u32)(
BdPå
); \

352 
Addr
 -((
RögPå
)->
Sï¨©i⁄
 * (
NumBd
)); \

353 i‡((
Addr
 < (
RögPå
)->
Fú°BdAddr
Ë|| ((
u32
)(
BdPå
) < Addr)) \

355 
Addr
 +(
RögPå
)->
Lígth
; \

358 (
BdPå
Ë(
Dma_Bd
*)
Addr
; \

359 }

	)

367 #ifde‡
X86_64


368 
Dma_BdRögCª©e
(
Dma_BdRög
 * 
RögPå
, 
u64
 
PhysAddr
,

369 
u64
 
VútAddr
, 
u32
 
Alignmít
, 
BdCou¡
);

371 
Dma_BdRögCª©e
(
Dma_BdRög
 * 
RögPå
, 
u32
 
PhysAddr
,

372 
u32
 
VútAddr
, u32 
Alignmít
, 
BdCou¡
);

374 
Dma_BdRögSèπ
(
Dma_BdRög
 * 
RögPå
);

375 
Dma_BdRögAŒoc
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 ** 
BdSëPå
);

376 
Dma_BdRögUnAŒoc
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 * 
BdSëPå
);

377 
Dma_BdRögToHw
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 * 
BdSëPå
);

378 
Dma_BdRögFromHw
(
Dma_BdRög
 * 
RögPå
, 
BdLimô
,

379 
Dma_Bd
 ** 
BdSëPå
);

380 
Dma_BdRögF‹˚FromHw
(
Dma_BdRög
 * 
RögPå
, 
BdLimô
,

381 
Dma_Bd
 ** 
BdSëPå
);

382 
Dma_BdRögFªe
(
Dma_BdRög
 * 
RögPå
, 
NumBd
, 
Dma_Bd
 * 
BdSëPå
);

383 
Dma_BdRögCheck
(
Dma_BdRög
 * 
RögPå
);

384 
u32
 
Dma_BdRögAlign
(u32 
AŒocPå
, u32 
Size
, u32 
Align
, u32 * 
Dñè
);

386 #ifde‡
__˝lu•lus


	@xdma/xdma_hw.h

72 #i‚de‡
XDMA_HW_H


73 
	#XDMA_HW_H


	)

75 #ifde‡
__˝lu•lus


81 
	~"xio.h
"

91 
	#REG_DMA_CTRL_STATUS
 0x4000

	)

97 
	#REG_DMA_ENG_CAP
 0x00000000

	)

98 
	#REG_DMA_ENG_CTRL_STATUS
 0x00000004

	)

99 
	#REG_DMA_ENG_NEXT_BD
 0x00000008

	)

100 
	#REG_SW_NEXT_BD
 0x0000000C

	)

101 
	#REG_DMA_ENG_LAST_BD
 0x00000010

	)

102 
	#REG_DMA_ENG_ACTIVE_TIME
 0x00000014

	)

103 
	#REG_DMA_ENG_WAIT_TIME
 0x00000018

	)

104 
	#REG_DMA_ENG_COMP_BYTES
 0x0000001C

	)

118 
	#DMA_INT_ENABLE
 0x00000001

	)

119 
	#DMA_INT_DISABLE
 0x00000000

	)

120 
	#DMA_INT_ACTIVE_MASK
 0x00000002

	)

121 
	#DMA_INT_PENDING_MASK
 0x00000004

	)

122 
	#DMA_INT_MSI_MODE
 0x00000008

	)

123 
	#DMA_USER_INT_ENABLE
 0x00000010

	)

124 
	#DMA_USER_INT_ACTIVE_MASK
 0x00000020

	)

125 
	#DMA_USER_INT_ACK
 0x00000020

	)

126 
	#DMA_MPS_USED
 0x00000700

	)

127 
	#DMA_MRRS_USED
 0x00007000

	)

128 
	#DMA_S2C_ENG_INT_VAL
 0x00FF0000

	)

129 
	#DMA_C2S_ENG_INT_VAL
 0xFF000000

	)

135 
	#DMA_ENG_PRESENT_MASK
 0x00000001

	)

136 
	#DMA_ENG_DIRECTION_MASK
 0x00000002

	)

137 
	#DMA_ENG_C2S
 0x00000002

	)

138 
	#DMA_ENG_S2C
 0x00000000

	)

139 
	#DMA_ENG_TYPE_MASK
 0x00000010

	)

140 
	#DMA_ENG_BLOCK
 0x00000000

	)

141 
	#DMA_ENG_PACKET
 0x00000010

	)

142 
	#DMA_ENG_NUMBER
 0x0000FF00

	)

143 
	#DMA_ENG_BD_MAX_BC
 0x3F000000

	)

146 
	#DMA_ENG_NUMBER_SHIFT
 8

	)

147 
	#DMA_ENG_BD_MAX_BC_SHIFT
 24

	)

156 
	#DMA_ENG_INT_ENABLE
 0x00000001

	)

157 
	#DMA_ENG_INT_DISABLE
 0x00000000

	)

158 
	#DMA_ENG_INT_ACTIVE_MASK
 0x00000002

	)

159 
	#DMA_ENG_INT_ACK
 0x00000002

	)

160 
	#DMA_ENG_INT_BDCOMP
 0x00000004

	)

161 
	#DMA_ENG_INT_BDCOMP_ACK
 0x00000004

	)

162 
	#DMA_ENG_INT_ALERR
 0x00000008

	)

163 
	#DMA_ENG_INT_ALERR_ACK
 0x00000008

	)

164 
	#DMA_ENG_INT_FETERR
 0x00000010

	)

165 
	#DMA_ENG_INT_FETERR_ACK
 0x00000010

	)

166 
	#DMA_ENG_INT_ABORTERR
 0x00000020

	)

167 
	#DMA_ENG_INT_ABORTERR_ACK
 0x00000020

	)

168 
	#DMA_ENG_INT_CHAINEND
 0x00000080

	)

169 
	#DMA_ENG_INT_CHAINEND_ACK
 0x00000080

	)

172 
	#DMA_ENG_ENABLE_MASK
 0x00000100

	)

173 
	#DMA_ENG_ENABLE
 0x00000100

	)

174 
	#DMA_ENG_DISABLE
 0x00000000

	)

175 
	#DMA_ENG_STATE_MASK
 0x00000C00

	)

176 
	#DMA_ENG_RUNNING
 0x00000400

	)

177 
	#DMA_ENG_IDLE
 0x00000000

	)

178 
	#DMA_ENG_WAITING
 0x00000800

	)

179 
	#DMA_ENG_STATE_WAITED
 0x00001000

	)

180 
	#DMA_ENG_WAITED_ACK
 0x00001000

	)

181 
	#DMA_ENG_USER_RESET
 0x00004000

	)

182 
	#DMA_ENG_RESET
 0x00008000

	)

184 
	#DMA_ENG_ALLINT_MASK
 0x000000BE

	)

192 
	#REG_DMA_SAMPLE_CTR_MASK
 0x00000003

	)

195 
	#REG_DMA_ENG_ACTIVE_TIME_SHIFT
 2

	)

196 
	#REG_DMA_ENG_WAIT_TIME_SHIFT
 2

	)

197 
	#REG_DMA_ENG_COMP_BYTES_SHIFT
 2

	)

205 #ifde‡
TH_BH_ISR


206 
	#INT_COAL_CNT
 32

	)

211 
	#Dma_mIn32
 
XIo_In32


	)

212 
	#Dma_mOut32
 
XIo_Out32


	)

229 
	#Dma_mRódReg
(
Ba£Addªss
, 
RegOff£t
) \

230 
	`Dma_mIn32
((
Ba£Addªss
Ë+ (
RegOff£t
))

	)

249 
	#Dma_mWrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

250 
	`Dma_mOut32
((
Ba£Addªss
Ë+ (
RegOff£t
), (
D©a
))

	)

265 
	#Dma_mI¡E«bÀ
(
Ba£Addªss
) \

267 
u32
 
Reg
 = 
	`Dma_mRódReg
(
Ba£Addªss
, 
REG_DMA_CTRL_STATUS
); \

268 
Reg
 |(
DMA_INT_ENABLE
 | 
DMA_USER_INT_ENABLE
); \

269 
	`Dma_mWrôeReg
(
Ba£Addªss
, 
REG_DMA_CTRL_STATUS
, 
Reg
); \

270 }

	)

285 
	#Dma_mI¡DißbÀ
(
Ba£Addªss
) \

287 
u32
 
Reg
 = 
	`Dma_mRódReg
(
Ba£Addªss
, 
REG_DMA_CTRL_STATUS
); \

288 
Reg
 &~(
DMA_INT_ENABLE
 | 
DMA_USER_INT_ENABLE
); \

289 
	`Dma_mWrôeReg
(
Ba£Addªss
, 
REG_DMA_CTRL_STATUS
, 
Reg
); \

290 }

	)

309 
	#Dma_mI¡Ack
(
Ba£Addªss
, 
Mask
) \

311 
u32
 
Reg
 = 
	`Dma_mRódReg
(
Ba£Addªss
, 
REG_DMA_CTRL_STATUS
); \

312 
Reg
 |
Mask
; \

313 
	`Dma_mWrôeReg
(
Ba£Addªss
, 
REG_DMA_CTRL_STATUS
, 
Reg
); \

314 }

	)

331 
	#Dma_mGëCrSr
(
In°™˚På
) \

332 
	`Dma_mRódReg
((
In°™˚På
)->
RegBa£
, 
REG_DMA_ENG_CTRL_STATUS
) \

333 

	)

348 
	#Dma_mSëCrSr
(
In°™˚På
, 
D©a
) \

349 
	`Dma_mWrôeReg
((
In°™˚På
)->
RegBa£
, 
REG_DMA_ENG_CTRL_STATUS
, (
D©a
))

	)

364 
	#Dma_mE«bÀ
(
Ba£Addªss
) \

366 
u32
 
vÆ
 = 
	`Dma_mRódReg
(
Ba£Addªss
, 
REG_DMA_ENG_CTRL_STATUS
); \

367 
vÆ
 |
DMA_ENG_ENABLE
; \

368 
	`Dma_mWrôeReg
(
Ba£Addªss
, 
REG_DMA_ENG_CTRL_STATUS
, 
vÆ
); \

369 }

	)

385 
	#Dma_mBdRögBusy
(
In°™˚På
) \

386 ((
	`Dma_mGëCrSr
(
In°™˚På
Ë& 
DMA_ENG_RUNNING
Ë? 
TRUE
 : 
FALSE
)

	)

401 
	#Dma_mEngI¡E«bÀ
(
In°™˚På
) \

404 if((
In°™˚På
)->
BdRög
.
RunSèã
 =
XST_DMA_SG_IS_STARTED
) \

406 
u32
 
Reg
 = 
	`Dma_mGëCrSr
(
In°™˚På
); \

407 
Reg
 |
DMA_ENG_INT_ENABLE
; \

408 
	`Dma_mSëCrSr
(
In°™˚På
, 
Reg
); \

410 
	`log_n‹mÆ
(
KERN_NOTICE
 "DMA EngineÇot yetÑeadyÅoÉnable interrupts\n"); \

411 }

	)

426 
	#Dma_mEngI¡DißbÀ
(
In°™˚På
) \

428 
u32
 
Reg
 = 
	`Dma_mGëCrSr
(
In°™˚På
); \

429 
Reg
 &~(
DMA_ENG_INT_ENABLE
); \

430 
	`Dma_mSëCrSr
(
In°™˚På
, 
Reg
); \

431 }

	)

450 
	#Dma_mEngI¡Ack
(
In°™˚På
, 
Mask
) \

452 
u32
 
Reg
 = 
	`Dma_mGëCrSr
(
In°™˚På
); \

453 
Reg
 |
Mask
; \

454 
	`Dma_mSëCrSr
(
In°™˚På
, 
Reg
); \

455 }

	)

460 #ifde‡
__˝lu•lus


	@xdma/xdma_k7.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

22 
MODULE_ALIAS
("pci:v000010EEd00007082sv*sd*bc*sc*i*");

24 
MODULE_INFO
(
§cvîsi⁄
, "032AD518A686E42B1F75F13");

	@xdma/xdma_user.c

74 
	~<löux/kî√l.h
>

75 
	~<löux/timî.h
>

76 
	~<löux/jiffõs.h
>

77 
	~<löux/pci.h
>

78 
	~<löux/mm.h
>

79 
	~<löux/•ölock.h
>

80 
	~<löux/∑gem≠.h
>

82 
	~"xbasic_ty≥s.h
"

83 
	~"xdebug.h
"

84 
	~"x°©us.h
"

85 
	~"xio.h
"

87 
	~"xdma.h
"

88 
	~"xdma_bd.h
"

89 
	~"xdma_u£r.h
"

90 
	~"xdma_hw.h
"

94 #ifde‡
DEBUG_VERBOSE


95 
di•_‰ag
(* 
addr
, 
u32
 
Àn
);

121 * 
	$DmaRegi°î
(
ígöe
, 
b¨
, 
U£rPås
 * 
u±r
, 
pktsize
)

123 
Dma_Engöe
 * 
ïå
;

124 #ifde‡
X86_64


125 
u64
 
b¨ba£
;

127 
u32
 
b¨ba£
;

129 
ªsu…
;

131 
	`log_vîbo£
(
KERN_INFO
 "UserÑegister forÉngine %d, BAR %d,Öktsize %d\n",

132 
ígöe
, 
b¨
, 
pktsize
);

133 #ifde‡
PM_SUPPORT


134 if(
DrivîSèã
 =
PM_PREPARE
)

136 
	`log_vîbo£
(
KERN_ERR
 "DMA drivî sèã %d -É¡îög i¡ÿPowî Dow¿°©es\n", 
DrivîSèã
);

137  
NULL
;

141 if(
DrivîSèã
 !
INITIALIZED
)

143 
	`log_vîbo£
(
KERN_ERR
 "DMA drivî sèã %d -ÇŸÑódy\n", 
DrivîSèã
);

144  
NULL
;

147 if((
b¨
 < 0) || (bar > 5)) {

148 
	`log_vîbo£
(
KERN_ERR
 "Reque°ed BAR %d i†nŸ vÆid\n", 
b¨
);

149  
NULL
;

152 if(!((
dmaD©a
->
ígöeMask
Ë& (1LL << 
ígöe
))) {

153 
	`log_vîbo£
(
KERN_ERR
 "Reque°edÉngöê%d d€†nŸÉxi°\n", 
ígöe
);

154  
NULL
;

156 
ïå
 = &(
dmaD©a
->
Dma
[
ígöe
]);

157 #ifde‡
X86_64


158 
b¨ba£
 = (
dmaD©a
->
b¨Info
[
b¨
].
ba£VAddr
);

160 
b¨ba£
 = (
u32
)(
dmaD©a
->
b¨Info
[
b¨
].
ba£VAddr
);

162 if(
ïå
->
EngöeSèã
 !
INITIALIZED
) {

163 
	`log_vîbo£
(
KERN_ERR
 "Reque°edÉngöê%d i†nŸ fªe\n", 
ígöe
);

164  
NULL
;

175 
ïå
->
u£r
 = *
u±r
;

176 
ïå
->
pktSize
 = 
pktsize
;

181 #ifde‡
X86_64


182 
u±r
->
vîsi⁄Reg
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
) + 0x9000;

184 
u±r
->
vîsi⁄Reg
 = (
u32
)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
) + 0x9000;

186 i‡((
u±r
->
U£rInô
)(
b¨ba£
, u±r->
¥ivD©a
) < 0)

188 
	`log_vîbo£
(
KERN_ERR
 "Initialization unsuccessful\n");

189  
NULL
;

192 
	`•ö_lock_bh
(&
DmaLock
);

195 
ªsu…
 = 
	`des¸ùt‹_öô
(
ïå
->
pdev
,Éptr);

196 i‡(
ªsu…
) {

201 
	`¥ötk
(
KERN_ERR
 "Cannot create BDÑing, willÅryágainÜater.\n");

206 
ïå
->
EngöeSèã
 = 
USER_ASSIGNED
;

207 
dmaD©a
->
u£rCou¡
 ++ ;

210 i‡(
	`Dma_BdRögSèπ
(&(
ïå
->
BdRög
)Ë=
XST_FAILURE
) {

211 
	`log_n‹mÆ
(
KERN_ERR
 "DmaRegister: CouldÇot start Dma channel\n");

212  
NULL
;

215 #ifde‡
TH_BH_ISR


216 
	`¥ötk
("NowÉnabling interrupts\n");

217 
	`Dma_mEngI¡E«bÀ
(
ïå
);

220 
	`•ö_u∆ock_bh
(&
DmaLock
);

222 
	`log_vîbo£
(
KERN_INFO
 "Rëu∫ög u£∏h™dÀ %p\n", 
ïå
);

224  
ïå
;

225 
	}
}

244 
	$DmaUƒegi°î
(* 
h™dÀ
)

246 
Dma_Engöe
 * 
ïå
;

248 
	`log_vîbo£
(
KERN_INFO
 "U£∏uƒegi°î f‹ h™dÀ %p\n", 
h™dÀ
);

249 if(
DrivîSèã
 !
INITIALIZED
)

251 
	`¥ötk
(
KERN_ERR
 "DMA drivî sèã %d -ÇŸÑódy\n", 
DrivîSèã
);

252  
XST_FAILURE
;

255 
ïå
 = (
Dma_Engöe
 *)
h™dÀ
;

258 if(
ïå
 =
NULL
)

260 
	`¥ötk
(
KERN_ERR
 "Handle isá NULL value\n");

261  
XST_FAILURE
;

265 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
) {

266 
	`¥ötk
(
KERN_ERR
 "Engine isÇotássignedÅoány user\n");

267  
XST_FAILURE
;

270 
	`•ö_lock_bh
(&
DmaLock
);

273 
ïå
->
EngöeSèã
 = 
UNREGISTERING
;

276 
	`log_vîbo£
(
KERN_INFO
 "Resetting DMAÉngine\n");

277 
	`Dma_Re£t
(
ïå
);

283 
	`log_vîbo£
("Now checkingáll descriptors\n");

284 
	`•ö_u∆ock_bh
(&
DmaLock
);

285 
	`des¸ùt‹_‰ì
(
ïå
->
pdev
,Éptr);

286 
	`•ö_lock_bh
(&
DmaLock
);

289 
ïå
->
EngöeSèã
 = 
INITIALIZED
;

290 
dmaD©a
->
u£rCou¡
 --;

292 
	`log_vîbo£
("DMA drivî u£∏cou¡ i†%d\n", 
dmaD©a
->
u£rCou¡
);

294 
	`•ö_u∆ock_bh
(&
DmaLock
);

297 
	}
}

299 #ifde‡
FIFO_EMPTY_CHECK


301 
	$DmaFifoEm±yWaô
(
h™dÀId
, 
u32
 
ty≥
)

303 #ifde‡
X86_64


304 
u64
 
b¨Ba£
 = (
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

305 
u64
 
°©usReg
 = 
b¨Ba£
 + 
STATUS_REG_OFFSET
;

307 
u32
 
b¨Ba£
 = (u32)(
dmaD©a
->
b¨Info
[0].
ba£VAddr
);

308 
u32
 
°©usReg
 = 
b¨Ba£
 + 
STATUS_REG_OFFSET
;

310 
u32
 
d©a
 = 0;

311 
u32
 
timeout
 = 
FIFO_EMPTY_TIMEOUT
;

313 
check
 = 1 << (
h™dÀId
 + 
ty≥
);

315 
check
 <<
EMPTY_MASK_SHIFT
;

319 
d©a
 = 
	`XIo_In32
(
°©usReg
);

320 
	`log_vîbo£
("\n########ªadÑeg: 0x%x + 0x%x ==> 0x%x & check:0x%x\n",
b¨Ba£
, 
STATUS_REG_OFFSET
, 
d©a
,
check
);

321 i‡(
d©a
 & 
check
)

327 
	`¥ötk
 ("\nDDR FIFO NotÉmpty");

328 
	`mdñay
(1);

330 }
timeout
--);

332 if(
timeout
 == -1)

334 
	`¥ötk
("************** Timeout DDR FIFOÇotÉmpty **************");

337 
	}
}

355 * 
	$DmaBa£Addªss
(
b¨
)

357 if(
DrivîSèã
 !
INITIALIZED
)

359 
	`log_vîbo£
(
KERN_ERR
 "DMA drivî sèã %d -ÇŸÑódy\n", 
DrivîSèã
);

360  
NULL
;

363 if((
b¨
 < 0) || (bar > 5)) {

364 
	`log_vîbo£
(
KERN_ERR
 "Reque°ed BAR %d i†nŸ vÆid\n", 
b¨
);

365  
NULL
;

368  (
dmaD©a
->
b¨Info
[
b¨
].
ba£VAddr
);

369 
	}
}

371 
	$DmaMac_WrôeReg
(
off£t
, 
d©a
)

373 
	`XIo_Out32
–(
dmaD©a
->
b¨Info
[0].
ba£VAddr
Ë+ 
off£t
, 
d©a
 );

375 
	}
}

376 
	$DmaMac_RódReg
(
off£t
)

378 
d©a
;

379 
d©a
 = 
	`XIo_In32
–(
dmaD©a
->
b¨Info
[0].
ba£VAddr
Ë+ 
off£t
 );

381  
d©a
;

382 
	}
}

387 
	$DmaSídPages_Tx
(* 
h™dÀ
, 
PktBuf
 ** 
pkts
, 
numpkts
)

389 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


390 
£nd_cou¡
=1;

392 
‰ì_bd_cou¡
 ;

393 
Dma_Engöe
 * 
ïå
;

394 
Dma_BdRög
 * 
Ωå
;

395 
pci_dev
 *
pdev
;

396 
¥ivD©a
 *
Õ
 = 
NULL
;

397 
Dma_Bd
 *
BdPå
, *
BdCurPå
, *
P¨tülBDPå
=
NULL
;

398 
dma_addr_t
 
bufPA
;

399 
ªsu…
;

400 
PktBuf
 * 
pbuf
;

401 
u32
 
Êags
=0, 
uÊags
=0;

402 
i
, 
Àn
;

403 
∑πülBDcou¡
 = 0, 
∑πülOK
 = 0;

404 * 
∑geAddr
;

406 
	`log_vîbo£
(
KERN_INFO
 "User sendÖkt forÉngine %p,Çumpkts %d\n",

407 
h™dÀ
, 
numpkts
);

408 if(
DrivîSèã
 !
INITIALIZED
)

410 
	`¥ötk
(
KERN_ERR
 "DMA drivî sèã %d -ÇŸÑódy\n", 
DrivîSèã
);

414 
ïå
 = (
Dma_Engöe
 *)
h™dÀ
;

415 
Ωå
 = &(
ïå
->
BdRög
);

418 if(
ïå
 =
NULL
)

420 
	`¥ötk
(
KERN_ERR
 "Handle isá NULL value\n");

425 if(
numpkts
 <= 0) {

426 
	`log_n‹mÆ
(
KERN_ERR
 "Packet count should beÇon-zero\n");

431 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
) {

432 
	`log_n‹mÆ
(
KERN_ERR
 "Engine isÇotássignedÅoány user\n");

437 if(
Ωå
->
IsRxCh™√l
)

439 
	`log_n‹mÆ
(
KERN_ERR
 "TheÑequestedÉngine cannot sendÖackets\n");

443 
pdev
 = 
ïå
->pdev;

444 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

447 
	`•ö_lock_bh
(&
DmaLock
);

449 
‰ì_bd_cou¡
 = 
	`Dma_mBdRögGëFªeC¡
(
Ωå
);

451 if(
‰ì_bd_cou¡
 - 2 < 
numpkts
) {

452 
	`•ö_u∆ock_bh
(&
DmaLock
);

457 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


458 
	`log_n‹mÆ
(
KERN_INFO
 "DmaSídPkt: #%d \n", 
£nd_cou¡
);

459 
£nd_cou¡
 +
numpkts
;

473 if(
‰ì_bd_cou¡
 > 2) free_bd_count -= 2;

474 if(
‰ì_bd_cou¡
 < 
numpkts
) {

476 
	`¥ötk
(
KERN_ERR
 "....Insufficient BDs. SgNum=%d, BDs=%d\n",

477 
numpkts
, 
‰ì_bd_cou¡
);

480 
	`•ö_u∆ock_bh
(&
DmaLock
);

487 
ªsu…
 = 
	`Dma_BdRögAŒoc
(
Ωå
,
numpkts
, &
BdPå
);

488 i‡(
ªsu…
 !
XST_SUCCESS
) {

490 
	`¥ötk
(
KERN_ERR
 "DmaSídPkt: BdRögAŒo¯unsuc˚ssfu»(%d)\n", 
ªsu…
);

493 
	`•ö_u∆ock_bh
(&
DmaLock
);

498 
BdCurPå
 = 
BdPå
;

499 
∑πülBDcou¡
 = 0;

502 
i
=0; i< 
numpkts
; i++)

505 
pbuf
 = 
pkts
[
i
];

508 
bufPA
 = 
	`pci_m≠_∑ge
(
pdev
, (
∑ge
*Ë
pbuf
->
pktBuf
,

509 
pbuf
->
∑geOff£t
,pbuf->
size
,

510 
PCI_DMA_TODEVICE
);

511 
	`Dma_mBdSëBufAddr
(
BdCurPå
, 
bufPA
);

512 
	`Dma_mBdSëCålLígth
(
BdCurPå
, 
pbuf
->
size
);

513 
	`Dma_mBdSëSètLígth
(
BdCurPå
, 
pbuf
->
size
);

514 
	`Dma_mBdSëId
(
BdCurPå
,
pbuf
->
bufInfo
);

515 
	`Dma_mBdSëPageAddr
(
BdCurPå
,
pbuf
->
∑geAddr
);

517 
uÊags
 = 
pbuf
->
Êags
;

518 
Êags
 = 0;

519 if(
uÊags
 & 
DMA_BD_SOP_MASK
)

521 
Êags
 |
DMA_BD_SOP_MASK
;

522 
∑πülOK
 = (
uÊags
 & 
PKT_ALL
) ? 0 : 1;

523 if(!
∑πülOK
Ë
P¨tülBDPå
 = 
BdCurPå
;

527 if(
uÊags
 & 
DMA_BD_EOP_MASK
)

529 
Êags
 |
DMA_BD_EOP_MASK
;

530 
∑πülBDcou¡
 = 0;

533 
∑πülBDcou¡
++;

535 
	`Dma_mBdSëU£rD©a
(
BdCurPå
, 
pbuf
->
u£rInfo
);

536 
	`Dma_mBdSëCål
(
BdCurPå
, 
Êags
);

538 #ifde‡
TH_BH_ISR


542 
Êags
 |
DMA_BD_INT_ERROR_MASK
;

543 if(!(
ïå
->
öåCou¡
 % 
INT_COAL_CNT
))

544 
Êags
 |
DMA_BD_INT_COMP_MASK
;

545 
ïå
->
öåCou¡
 += 1;

546 
	`Dma_mBdSëCål
(
BdCurPå
, 
Êags
);

549 
	`log_vîbo£
("DmaSendPkt: free %d BD %x buf PA %x VA %x size %d flags %x\n",

550 
‰ì_bd_cou¡
, (
u32
)
BdCurPå
, ()
bufPA
, (u32Ë(
pbuf
->
pktBuf
),

551 
pbuf
->
size
, 
Êags
);

553 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

560 if(
∑πülBDcou¡
 && !
∑πülOK
)

562 
	`log_vîbo£
(
KERN_ERR
 "Cannotáccomodate %d buffers. Discarding %d.\n",

563 
numpkts
, 
∑πülBDcou¡
);

569 
ªsu…
 = 
	`Dma_BdRögToHw
(
Ωå
, (
numpkts
 - 
∑πülBDcou¡
), 
BdPå
);

571 if((
ªsu…
 !
XST_SUCCESS
Ë|| 
∑πülBDcou¡
)

573 
cou¡
=0;

574 
	`¥ötk
(
KERN_ERR
 "result != XST_SUCCESS ||ÖartialBDcount...\n");

576 if(
ªsu…
 !
XST_SUCCESS
)

582 
	`¥ötk
(
KERN_ERR
 "DmaSendPkt: BdRingToHw unsuccessful (%d)\n",

583 
ªsu…
);

584 
BdCurPå
 = 
BdPå
;

585 
cou¡
 = 
numpkts
;

587 if(
∑πülBDcou¡
)

593 
	`¥ötk
(
KERN_ERR
 "DmaSendPkt: RecoveringÖartial buffers\n");

595 
BdPå
 = 
BdCurPå
 = 
P¨tülBDPå
;

596 
cou¡
 = 
∑πülBDcou¡
;

599 
	`¥ötk
(
KERN_ERR
 "ªÀa£Åhê∑πü»BD†%d\n", 
cou¡
);

601 
i
=0; i<
cou¡
; i++)

603 
bufPA
 = 
	`Dma_mBdGëBufAddr
(
BdCurPå
);

604 
∑geAddr
 = (*)
	`Dma_mBdGëPageAddr
(
BdCurPå
);

605 
Àn
 = 
	`Dma_mBdGëCålLígth
(
BdCurPå
);

606 
	`log_vîbo£
(
KERN_ERR
 "DmaSendPages: XST_FAIL:Öci_unmap_page: bufPA=0x%x,Üen=%d \n",

607 ()
bufPA
, 
Àn
);

608 
	`pci_unm≠_∑ge
(
pdev
, 
bufPA
, 
Àn
, 
PCI_DMA_TODEVICE
);

609 
	`∑ge_ˇche_ªÀa£
–(
∑ge
*)
∑geAddr
 );

610 #ifde‡
X86_64


611 
	`Dma_mBdSëId_NULL
(
BdCurPå
, 
NULL
);

613 
	`Dma_mBdSëId
(
BdCurPå
, 
NULL
);

615 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

617 
	`Dma_BdRögUnAŒoc
(
Ωå
, 
cou¡
, 
BdPå
);

619 
numpkts
 -
cou¡
;

622 
	`•ö_u∆ock_bh
(&
DmaLock
);

624  
numpkts
;

625 
	}
}

628 
	$DmaSídPages
(* 
h™dÀ
, 
PktBuf
 ** 
pkts
, 
numpkts
)

630 #ifde‡
TH_BH_ISR


631 
Êags
;

633 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


634 
£nd_cou¡
=1;

636 
‰ì_bd_cou¡
 ;

637 
Dma_Engöe
 * 
ïå
;

638 
Dma_BdRög
 * 
Ωå
;

639 
pci_dev
 *
pdev
;

640 
¥ivD©a
 *
Õ
 = 
NULL
;

641 
Dma_Bd
 *
BdPå
, *
BdCurPå
, *
P¨tülBDPå
=
NULL
;

642 
dma_addr_t
 
bufPA
;

643 
ªsu…
;

644 
PktBuf
 * 
pbuf
;

645 
i
, 
Àn
;

646 
∑πülBDcou¡
 = 0, 
∑πülOK
 = 0;

647 * 
∑geAddr
;

649 if(
DrivîSèã
 !
INITIALIZED
)

651 
	`¥ötk
(
KERN_ERR
 "DMA drivî sèã %d -ÇŸÑódy\n", 
DrivîSèã
);

655 
ïå
 = (
Dma_Engöe
 *)
h™dÀ
;

656 
Ωå
 = &(
ïå
->
BdRög
);

659 if(
ïå
 =
NULL
)

661 
	`¥ötk
(
KERN_ERR
 "Handle isá NULL value\n");

666 if(
numpkts
 <= 0) {

667 
	`log_n‹mÆ
(
KERN_ERR
 "Packet count should beÇon-zero\n");

672 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
) {

673 
	`log_n‹mÆ
(
KERN_ERR
 "Engine isÇotássignedÅoány user\n");

676 
pdev
 = 
ïå
->pdev;

677 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

680 
	`•ö_lock_bh
(&
DmaLock
);

683 
‰ì_bd_cou¡
 = 
	`Dma_mBdRögGëFªeC¡
(
Ωå
);

685 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


686 
	`log_n‹mÆ
(
KERN_INFO
 "DmaSídPkt: #%d \n", 
£nd_cou¡
);

687 
£nd_cou¡
 +
numpkts
;

688 
	`log_vîbo£
(
KERN_INFO
 "BDÑing %x Free BD count is %d\n",

689 (
u32
)
Ωå
, 
‰ì_bd_cou¡
);

692 if(
‰ì_bd_cou¡
 - 2 < 
numpkts
) {

693 
	`•ö_u∆ock_bh
(&
DmaLock
);

700 if(
‰ì_bd_cou¡
 > 2) free_bd_count -= 2;

703 
	`log_vîbo£
(
KERN_ERR
 "NŸÉnough BD†tÿh™dÀ %dÖkts\n", 
numpkts
);

704 
	`•ö_u∆ock_bh
(&
DmaLock
);

708 
	`log_n‹mÆ
("DmaSídPkt:Çumpkt†%d fªe_bd_cou¡ %d\n", 
numpkts
, 
‰ì_bd_cou¡
);

711 
ªsu…
 = 
	`Dma_BdRögAŒoc
(
Ωå
, 
numpkts
, &
BdPå
);

712 i‡(
ªsu…
 !
XST_SUCCESS
) {

714 
	`¥ötk
(
KERN_ERR
 "DmaSídPkt: BdRögAŒo¯unsuc˚ssfu»(%d)\n", 
ªsu…
);

715 
	`•ö_u∆ock_bh
(&
DmaLock
);

719 
BdCurPå
 = 
BdPå
;

720 
∑πülBDcou¡
 = 0;

722 
i
=0; i<
numpkts
; i++)

724 
pbuf
 = 
pkts
[
i
];

726 
bufPA
 = 
	`pci_m≠_∑ge
(
pdev
, (
∑ge
*Ë
pbuf
->
pktBuf
,

728 
pbuf
->
size
,

729 
PCI_DMA_FROMDEVICE
);

730 if(
	`pci_dma_m≠pög_îr‹
(
pdev
, 
bufPA
)){

731 
cou¡
=0;

732 
	`¥ötk
(
KERN_ERR
 "Error:Öci_map_pageÉxhausted memory...\n");

733 
BdCurPå
 = 
BdPå
;

734 
cou¡
 = 
i
;

735 
i
--; i>=0; i--)

737 
bufPA
 = 
	`Dma_mBdGëBufAddr
(
BdCurPå
);

738 
∑geAddr
 = (*)
	`Dma_mBdGëPageAddr
(
BdCurPå
);

739 
Àn
 = 
	`Dma_mBdGëCålLígth
(
BdCurPå
);

740 
	`¥ötk
(
KERN_ERR
 "InsufficientÖci map memory:Öci_unmap_page: bufPA=0x%x,Üen=%d \n",

741 ()
bufPA
, 
Àn
);

742 
	`pci_unm≠_∑ge
(
pdev
, 
bufPA
, 
Àn
, 
PCI_DMA_FROMDEVICE
);

743 
	`∑ge_ˇche_ªÀa£
–(
∑ge
*)
∑geAddr
);

744 #ifde‡
X86_64


745 
	`Dma_mBdSëId_NULL
(
BdCurPå
, 
NULL
);

747 
	`Dma_mBdSëId
(
BdCurPå
, 
NULL
);

749 
	`Dma_mBdSëPageAddr
(
BdCurPå
,
NULL
);

750 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

753 
	`Dma_BdRögUnAŒoc
(
Ωå
, 
cou¡
, 
BdPå
);

754 
	`•ö_u∆ock_bh
(&
DmaLock
);

757 
	`Dma_mBdSëBufAddr
(
BdCurPå
, 
bufPA
);

758 
	`Dma_mBdSëCålLígth
(
BdCurPå
, 
pbuf
->
size
);

759 
	`Dma_mBdSëId
(
BdCurPå
, 
pbuf
->
bufInfo
);

760 
	`Dma_mBdSëPageAddr
(
BdCurPå
,
pbuf
->
∑geAddr
);

761 
	`Dma_mBdSëCål
(
BdCurPå
, 0);

762 
	`Dma_mBdSëU£rD©a
(
BdCurPå
,0LL );

764 #ifde‡
TH_BH_ISR


768 
Êags
 |
DMA_BD_INT_ERROR_MASK
;

769 if(!(
ïå
->
öåCou¡
 % 
INT_COAL_CNT
))

770 
Êags
 |
DMA_BD_INT_COMP_MASK
;

771 
ïå
->
öåCou¡
 += 1;

772 
	`Dma_mBdSëCål
(
BdCurPå
, 
Êags
);

775 
	`log_vîbo£
("DmaSendPkt: free %d BD %x buf PA %x VA %x size %d flags %x\n",

776 
‰ì_bd_cou¡
, (
u32
)
BdCurPå
, ()
bufPA
, (u32Ë(
pbuf
->
pktBuf
),

777 
pbuf
->
size
, 
Êags
);

779 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

786 if(
∑πülBDcou¡
 && !
∑πülOK
)

788 
	`¥ötk
(
KERN_ERR
 "Cannotáccomodate %d buffers. Discarding %d.\n",

789 
numpkts
, 
∑πülBDcou¡
);

794 
ªsu…
 = 
	`Dma_BdRögToHw
(
Ωå
, (
numpkts
-
∑πülBDcou¡
), 
BdPå
);

795 if((
ªsu…
 !
XST_SUCCESS
Ë|| 
∑πülBDcou¡
)

797 
cou¡
=0;

798 if(
ªsu…
 !
XST_SUCCESS
)

804 
	`¥ötk
(
KERN_ERR
 "DmaSendPkt: BdRingToHw unsuccessful (%d)\n",

805 
ªsu…
);

806 
BdCurPå
 = 
BdPå
;

807 
cou¡
 = 
numpkts
;

809 if(
∑πülBDcou¡
)

815 
	`log_vîbo£
(
KERN_ERR
 "DmaSendPkt: RecoveringÖartial buffers\n");

817 
BdPå
 = 
BdCurPå
 = 
P¨tülBDPå
;

818 
cou¡
 = 
∑πülBDcou¡
;

821 
i
=0; i<
cou¡
; i++)

823 
bufPA
 = 
	`Dma_mBdGëBufAddr
(
BdCurPå
);

824 
∑geAddr
 = (*)
	`Dma_mBdGëPageAddr
(
BdCurPå
);

825 
Àn
 = 
	`Dma_mBdGëCålLígth
(
BdCurPå
);

826 
	`¥ötk
(
KERN_ERR
 "DmaSendPages: XST_FAIL:Öci_unmap_page: bufPA=0x%x,Üen=%d \n",

827 ()
bufPA
, 
Àn
);

828 
	`pci_unm≠_∑ge
(
pdev
, 
bufPA
, 
Àn
, 
PCI_DMA_FROMDEVICE
);

829 
	`∑ge_ˇche_ªÀa£
–(
∑ge
*)()
∑geAddr
 );

830 #ifde‡
X86_64


831 
	`Dma_mBdSëId_NULL
(
BdCurPå
, 
NULL
);

833 
	`Dma_mBdSëId
(
BdCurPå
, 
NULL
);

835 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

837 
	`Dma_BdRögUnAŒoc
(
Ωå
, 
cou¡
, 
BdPå
);

838 
numpkts
 -
cou¡
;

841 
	`•ö_u∆ock_bh
(&
DmaLock
);

843 
	`log_vîbo£
("DmaSídPkt: Suc˚ssfuŒyÅønsmôãd %d buf„rs\n", 
numpkts
);

844  
numpkts
;

845 
	}
}

846 
	$DmaSídPkt
(* 
h™dÀ
, 
PktBuf
 * 
pkts
, 
numpkts
)

848 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


849 
£nd_cou¡
=1;

851 
‰ì_bd_cou¡
 ;

852 
Dma_Engöe
 * 
ïå
;

853 
Dma_BdRög
 * 
Ωå
;

854 
pci_dev
 *
pdev
;

855 
¥ivD©a
 *
Õ
 = 
NULL
;

856 
Dma_Bd
 *
BdPå
, *
BdCurPå
, *
P¨tülBDPå
=
NULL
;

857 
dma_addr_t
 
bufPA
;

858 
ªsu…
;

859 
PktBuf
 * 
pbuf
;

860 
u32
 
Êags
, 
uÊags
;

861 
i
, 
Àn
;

862 
∑πülBDcou¡
 = 0, 
∑πülOK
 = 0;

864 
	`log_vîbo£
(
KERN_INFO
 "User sendÖkt forÉngine %p,Çumpkts %d\n",

865 
h™dÀ
, 
numpkts
);

866 if(
DrivîSèã
 !
INITIALIZED
)

868 
	`¥ötk
(
KERN_ERR
 "DMA drivî sèã %d -ÇŸÑódy\n", 
DrivîSèã
);

872 
ïå
 = (
Dma_Engöe
 *)
h™dÀ
;

873 
Ωå
 = &(
ïå
->
BdRög
);

876 if(
ïå
 =
NULL
)

878 
	`¥ötk
(
KERN_ERR
 "Handle isá NULL value\n");

883 if(
numpkts
 <= 0) {

884 
	`log_n‹mÆ
(
KERN_ERR
 "Packet count should beÇon-zero\n");

889 if(
ïå
->
EngöeSèã
 !
USER_ASSIGNED
) {

890 
	`log_n‹mÆ
(
KERN_ERR
 "Engine isÇotássignedÅoány user\n");

895 if(
Ωå
->
IsRxCh™√l
)

897 
	`log_n‹mÆ
(
KERN_ERR
 "TheÑequestedÉngine cannot sendÖackets\n");

901 
pdev
 = 
ïå
->pdev;

902 
Õ
 = 
	`pci_gë_drvd©a
(
pdev
);

905 
	`•ö_lock_bh
(&
DmaLock
);

908 
‰ì_bd_cou¡
 = 
	`Dma_mBdRögGëFªeC¡
(
Ωå
);

910 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


911 
	`log_n‹mÆ
(
KERN_INFO
 "DmaSídPkt: #%d \n", 
£nd_cou¡
);

912 
£nd_cou¡
 +
numpkts
;

913 
	`log_vîbo£
(
KERN_INFO
 "BDÑing %x Free BD count is %d\n",

914 (
u32
)
Ωå
, 
‰ì_bd_cou¡
);

922 if(
‰ì_bd_cou¡
 > 2) free_bd_count -= 2;

925 
	`log_vîbo£
(
KERN_ERR
 "NŸÉnough BD†tÿh™dÀ %dÖkts\n", 
numpkts
);

926 
	`•ö_u∆ock_bh
(&
DmaLock
);

930 
	`log_n‹mÆ
("DmaSídPkt:Çumpkt†%d fªe_bd_cou¡ %d\n", 
numpkts
, 
‰ì_bd_cou¡
);

933 if(
numpkts
 > 
‰ì_bd_cou¡
)

934 
numpkts
 = 
‰ì_bd_cou¡
;

937 
ªsu…
 = 
	`Dma_BdRögAŒoc
(
Ωå
, 
numpkts
, &
BdPå
);

938 i‡(
ªsu…
 !
XST_SUCCESS
) {

940 
	`¥ötk
(
KERN_ERR
 "DmaSídPkt: BdRögAŒo¯unsuc˚ssfu»(%d)\n", 
ªsu…
);

941 
	`•ö_u∆ock_bh
(&
DmaLock
);

945 
BdCurPå
 = 
BdPå
;

946 
∑πülBDcou¡
 = 0;

947 
i
=0; i<
numpkts
; i++)

949 
pbuf
 = &(
pkts
[
i
]);

950 
bufPA
 = 
	`pci_m≠_sögÀ
(
pdev
, 
pbuf
->
pktBuf
,Öbuf->
size
, 
PCI_DMA_TODEVICE
);

951 
	`log_vîbo£
(
KERN_INFO
 "DmaSendPkt: BD %x buf PA %x VA %x size %d\n",

952 (
u32
)
BdCurPå
, ()
bufPA
, (u32Ë(
pbuf
->
pktBuf
),Öbuf->
size
);

954 
	`Dma_mBdSëBufAddr
(
BdCurPå
, 
bufPA
);

955 
	`Dma_mBdSëCålLígth
(
BdCurPå
, 
pbuf
->
size
);

956 
	`Dma_mBdSëSètLígth
(
BdCurPå
, 
pbuf
->
size
);

957 
	`Dma_mBdSëId
(
BdCurPå
, 
pbuf
->
bufInfo
);

959 
uÊags
 = 
pbuf
->
Êags
;

960 
Êags
 = 0;

961 if(
uÊags
 & 
DMA_BD_SOP_MASK
)

963 
Êags
 |
DMA_BD_SOP_MASK
;

965 
∑πülOK
 = (
uÊags
 & 
PKT_ALL
) ? 0 : 1;

966 if(!
∑πülOK
Ë
P¨tülBDPå
 = 
BdCurPå
;

970 if(
uÊags
 & 
DMA_BD_EOP_MASK
)

972 
Êags
 |
DMA_BD_EOP_MASK
;

973 
∑πülBDcou¡
 = 0;

976 
∑πülBDcou¡
++;

978 
	`Dma_mBdSëCål
(
BdCurPå
, 
Êags
);

979 
	`Dma_mBdSëU£rD©a
(
BdCurPå
, 
pbuf
->
u£rInfo
);

981 #ifde‡
TH_BH_ISR


985 
Êags
 |
DMA_BD_INT_ERROR_MASK
;

986 if(!(
ïå
->
öåCou¡
 % 
INT_COAL_CNT
))

987 
Êags
 |
DMA_BD_INT_COMP_MASK
;

988 
ïå
->
öåCou¡
 += 1;

989 
	`Dma_mBdSëCål
(
BdCurPå
, 
Êags
);

992 
	`log_vîbo£
("DmaSendPkt: free %d BD %x buf PA %x VA %x size %d flags %x\n",

993 
‰ì_bd_cou¡
, (
u32
)
BdCurPå
, ()
bufPA
, (u32Ë(
pbuf
->
pktBuf
),

994 
pbuf
->
size
, 
Êags
);

996 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

1003 if(
∑πülBDcou¡
 && !
∑πülOK
)

1004 
	`log_n‹mÆ
(
KERN_ERR
 "Cannotáccomodate %d buffers. Discarding %d.\n",

1005 
numpkts
, 
∑πülBDcou¡
);

1010 
ªsu…
 = 
	`Dma_BdRögToHw
(
Ωå
, (
numpkts
-
∑πülBDcou¡
), 
BdPå
);

1011 if((
ªsu…
 !
XST_SUCCESS
Ë|| 
∑πülBDcou¡
)

1013 
cou¡
=0;

1014 if(
ªsu…
 !
XST_SUCCESS
)

1020 
	`¥ötk
(
KERN_ERR
 "DmaSendPkt: BdRingToHw unsuccessful (%d)\n",

1021 
ªsu…
);

1022 
BdCurPå
 = 
BdPå
;

1023 
cou¡
 = 
numpkts
;

1025 if(
∑πülBDcou¡
)

1031 
	`log_vîbo£
(
KERN_ERR
 "DmaSendPkt: RecoveringÖartial buffers\n");

1033 
BdPå
 = 
BdCurPå
 = 
P¨tülBDPå
;

1034 
cou¡
 = 
∑πülBDcou¡
;

1037 
i
=0; i<
cou¡
; i++)

1039 
bufPA
 = 
	`Dma_mBdGëBufAddr
(
BdCurPå
);

1040 
Àn
 = 
	`Dma_mBdGëCålLígth
(
BdCurPå
);

1041 
	`pci_unm≠_sögÀ
(
pdev
, 
bufPA
, 
Àn
, 
PCI_DMA_TODEVICE
);

1042 #ifde‡
X86_64


1043 
	`Dma_mBdSëId_NULL
(
BdCurPå
, 
NULL
);

1045 
	`Dma_mBdSëId
(
BdCurPå
, 
NULL
);

1047 
BdCurPå
 = 
	`Dma_mBdRögNext
(
Ωå
, BdCurPtr);

1049 
	`Dma_BdRögUnAŒoc
(
Ωå
, 
cou¡
, 
BdPå
);

1050 
numpkts
 -
cou¡
;

1053 
	`•ö_u∆ock_bh
(&
DmaLock
);

1055 
	`log_vîbo£
("DmaSídPkt: Suc˚ssfuŒyÅønsmôãd %d buf„rs\n", 
numpkts
);

1056  
numpkts
;

1057 
	}
}

1060 
	$Dma_gë_rög∑øm
(*
h™dÀ
, 
ëhtoﬁ_rög∑øm
 *
îög
)

1062 
Dma_Engöe
 * 
ïå
;

1063 
Dma_BdRög
 *
RögPå
;

1065 
ïå
 = (
Dma_Engöe
 *)
h™dÀ
;

1066 
RögPå
 = &
	`Dma_mGëRög
(
ïå
);

1067 if(
RögPå
->
IsRxCh™√l
)

1069 
îög
->
rx_max_≥ndög
 = 
RögPå
->
AŒC¡
;

1070 
îög
->
rx_möi_max_≥ndög
 = 
RögPå
->
AŒC¡
;

1071 
îög
->
rx_jumbo_max_≥ndög
 = 
RögPå
->
AŒC¡
;

1072 
îög
->
rx_≥ndög
 = 
RögPå
->
FªeC¡
;

1073 
îög
->
rx_möi_≥ndög
 = 
RögPå
->
FªeC¡
;

1074 
îög
->
rx_jumbo_≥ndög
 = 
RögPå
->
FªeC¡
;

1078 
îög
->
tx_max_≥ndög
 = 
RögPå
->
AŒC¡
;

1079 
îög
->
tx_≥ndög
 = 
RögPå
->
FªeC¡
;

1082 
	}
}

	@xrawdata0/sguser.c

75 
	~<löux/vîsi⁄.h
>

76 
	~<löux/moduÀ.h
>

77 
	~<löux/dñay.h
>

78 
	~<löux/•ölock.h
>

79 
	~<löux/fs.h
>

80 
	~<löux/kdev_t.h
>

81 
	~<löux/cdev.h
>

82 
	~<löux/mm.h
>

83 
	~<löux/•ölock.h
>

84 
	~<löux/∑gem≠.h
>

85 
	~<löux/¶ab.h
>

86 
	~<asm/uac˚ss.h
>

88 
	~<xpm⁄_be.h
>

89 
	~<xdma_u£r.h
>

90 
	~"xdebug.h
"

91 
	~"xio.h
"

94 
	#UNINITIALIZED
 0

	)

95 
	#INITIALIZED
 1

	)

96 
	#UNREGISTERED
 2

	)

97 
	#POLLING
 3

	)

98 
	#REGISTERED
 4

	)

99 
	#CLOSED
 5

	)

102 
	#MYBAR
 0

	)

104 #ifde‡
XRAWDATA0


105 
	#MYHANDLE
 
HANDLE_0


	)

107 
	#MYHANDLE
 
HANDLE_1


	)

110 #ifde‡
XRAWDATA0


111 
	#MYNAME
 "Raw D©®0"

	)

112 
	#DEV_NAME
 "xøw_d©a0"

	)

114 
	#MYNAME
 "Raw D©®1"

	)

115 
	#DEV_NAME
 "xøw_d©a1"

	)

118 
	#DESIGN_MODE_ADDRESS
 0x9004

	)

119 #ifde‡
RAW_ETH


120 
	#PERF_DESIGN_MODE
 0x00000000

	)

122 
	#PERF_DESIGN_MODE
 0x00000003

	)

125 #ifde‡
RAW_ETH


126 
	#WRBURST_0
 0x9308

	)

127 
	#WRBURST_1
 0x9318

	)

128 
	#WRBURST_2
 0x9328

	)

129 
	#WRBURST_3
 0x9338

	)

131 
	#RDBURST_0
 0x930C

	)

132 
	#RDBURST_1
 0x931C

	)

133 
	#RDBURST_2
 0x932C

	)

134 
	#RDBURST_3
 0x933C

	)

136 
	#BURST_SIZE
 256

	)

138 
	#MDIO_C⁄figW‹d_0
 0x500

	)

139 
	#MDIO_C⁄figW‹d_1
 0x504

	)

140 
	#MDIO_TX_DATA
 0x508

	)

141 
	#MDIO_RX_DATA
 0x50C

	)

142 
	#YES
 1

	)

144 
	#MDIO_READY
(
X
Ë((
	`XIo_In32
(X + 
MDIO_C⁄figW‹d_1
 ) >> 7 ) & 0x00000001)

	)

145 
	#MDIO_LINK_STATUS_UP
(
X
Ë((
	`XIo_In32
(X + 
MDIO_RX_DATA
 ) >> 12Ë& 0x00000001)

	)

147 
	#XXGE_RCW0_OFFSET
 0x00000400

	)

148 
	#XXGE_RCW1_OFFSET
 0x00000404

	)

149 
	#XXGE_TC_OFFSET
 0x00000408

	)

154 #ifde‡
XRAWDATA0


156 
	#TX_CONFIG_ADDRESS
 0x9108

	)

157 
	#RX_CONFIG_ADDRESS
 0x9100

	)

158 
	#PKT_SIZE_ADDRESS
 0x9104

	)

159 
	#STATUS_ADDRESS
 0x910C

	)

160 #i‚de‡
RAW_ETH


161 
	#SEQNO_WRAP_REG
 0x9110

	)

164 
	#LOOPBACK
 0x00000002

	)

168 
	#TX_CONFIG_ADDRESS
 0x9208

	)

169 
	#RX_CONFIG_ADDRESS
 0x9200

	)

170 
	#PKT_SIZE_ADDRESS
 0x9204

	)

171 
	#STATUS_ADDRESS
 0x920C

	)

172 #i‚de‡
RAW_ETH


173 
	#SEQNO_WRAP_REG
 0x9210

	)

176 
	#LOOPBACK
 0x00000002

	)

180 
	#PKTCHKR
 0x00000001

	)

181 
	#PKTGENR
 0x00000001

	)

182 
	#CHKR_MISMATCH
 0x00000001

	)

184 #ifde‡
XRAWDATA0


185 
	#ENGINE_TX
 0

	)

186 
	#ENGINE_RX
 32

	)

187 #ifde‡
RAW_ETH


188 
	#NW_PATH_OFFSET
 0xB000

	)

189 
	#NW_PATH_OFFSET_OTHER
 0xC000

	)

192 
	#ENGINE_TX
 1

	)

193 
	#ENGINE_RX
 33

	)

194 #ifde‡
RAW_ETH


195 
	#NW_PATH_OFFSET
 0xC000

	)

196 
	#NW_PATH_OFFSET_OTHER
 0xB000

	)

201 
	#BUFSIZE
 (
PAGE_SIZE
)

	)

202 #ifde‡
RAW_ETH


203 
	#MAXPKTSIZE
 (4*
PAGE_SIZE
 - 1)

	)

205 
	#MAXPKTSIZE
 (8*
PAGE_SIZE
)

	)

210 
	#MINPKTSIZE
 (64)

	)

211 
	#NUM_BUFS
 2000

	)

212 
	#BUFALIGN
 8

	)

213 
	#BYTEMULTIPLE
 8

	)

215 
cdev
 *
	gxøwCdev
 = 
NULL
;

216 
	gxøw_DrivîSèã
 = 
UNINITIALIZED
;

217 
	gxøw_U£rO≥n
 = 0;

219 *
	gh™dÀ
[4] = { 
NULL
, NULL, NULL, NULL };

220 #ifde‡
X86_64


221 
u64
 
	gTXb¨ba£
, 
	gRXb¨ba£
;

223 
u32
 
	gTXb¨ba£
, 
	gRXb¨ba£
;

225 
u32
 
	gRawTe°Mode
 = 
TEST_STOP
;

226 
u32
 
	gRawMöPktSize
 = 
MINPKTSIZE
, 
	gRawMaxPktSize
 = 
MAXPKTSIZE
;

228 #ifde‡
BACK_PRESSURE


229 
	#NO_BP
 1

	)

230 
	#YES_BP
 2

	)

231 
	#MAX_QUEUE_THRESHOLD
 12288

	)

232 
	#MIN_QUEUE_THRESHOLD
 8192

	)

233 
u8
 
	gim∂_bp
 = 
NO_BP
;

238 
	mTŸÆNum
;

239 
	mAŒocNum
;

240 
	mFú°Buf
;

241 
	mLa°Buf
;

242 
	mFªePå
;

243 
	mAŒocPå
;

244 *
	m‹igVA
[
NUM_BUFS
];

245 } 
	tBuf„r
;

247 
Buf„r
 
	gTxBufs
;

248 
Buf„r
 
	gRxBufs
;

249 
	gxøwTøns
[4096];

252 
•ölock_t
 
	gRawLock
;

254 #ifde‡
XRAWDATA0


255 
	#DRIVER_NAME
 "xøwd©a0_drivî"

	)

256 
	#DRIVER_DESCRIPTION
 "Xûöx Raw D©a0 Drivî "

	)

258 
	#DRIVER_NAME
 "xøwd©a1_drivî"

	)

259 
	#DRIVER_DESCRIPTION
 "Xûöx Raw D©a1 Drivî"

	)

271 
	#MAX_BUFF_INFO
 16384

	)

273 
	gTe°St›
=0;

275 
	sBuf„rInfoQ


277 
•ölock_t
 
	miLock
;

278 
Buf„rInfo
 
	miLi°
[
MAX_BUFF_INFO
];

279 
	miPutIndex
;

280 
	miGëIndex
;

281 
	miPídögD⁄e
;

282 } 
	tBuf„rInfoQue
;

284 
Buf„rInfoQue
 
	gTxD⁄eQ
;

285 
Buf„rInfoQue
 
	gRxD⁄eQ
;

296 
putBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 
buff
);

305 
gëBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 * 
buff
);

306 #ifde‡
X86_64


307 
myInô
 (
u64
 
b¨ba£
, );

309 
myInô
 (
b¨ba£
, );

312 
myFªePkt
 (*, *, , );

313 
DmaSëupTønsmô
 (*, , c⁄° 
__u£r
 *, 
size_t
);

314 
DmaSëupRe˚ive
(* , ,c⁄° 
__u£r
 * , 
size_t
 );

315 
myGëRxPkt
 (*, 
PktBuf
 *, , , );

316 
myPutTxPkt
 (*, 
PktBuf
 *, , );

317 
myPutRxPkt
 (*, 
PktBuf
 *, , );

318 
mySëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

319 
myGëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

322 
	gTxBufC¡
 = 0;

323 
	gRxBufC¡
 = 0;

324 
	gEºC¡
 = 0;

328 
ölöe
 

329 
	$PrötSumm¨y
 ()

334 
u32
 
vÆ
;

336 
	`¥ötk
 ("---------------------------------------------------\n");

337 
	`¥ötk
 ("%†DrivîÑesu…†Summ¨y:-\n", 
MYNAME
);

338 
	`¥ötk
 ("Current Run Min Packet Size = %d, Max Packet Size = %d\n",

339 
RawMöPktSize
, 
RawMaxPktSize
);

340 
¥ötk


342 
TxBufC¡
, 
RxBufC¡
, 
EºC¡
);

345 
vÆ
 = 
	`XIo_In32
 (
TXb¨ba£
 + 
STATUS_ADDRESS
);

346 
	`¥ötk
 ("D©®Mism©ch Sètu†%x\n", 
vÆ
);

347 #ifde‡
RAW_ETH


348 
	`¥ötk
("XGEMAC TX Byã†0 = %x\t", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x208));

349 
	`¥ötk
("XGEMAC TX Byã†1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x20C));

350 
	`¥ötk
("XGEMAC RX Byã†0 = %x\t", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x200));

351 
	`¥ötk
("XGEMAC RX Byã†1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x204));

353 
	`¥ötk
 ("---------------------------------------------------\n");

355 
	}
}

357 #ifde‡
X86_64


359 
	$myInô
 (
u64
 
b¨ba£
, 
¥ivd©a
)

363 
	$myInô
 (
b¨ba£
, 
¥ivd©a
)

366 
	`log_n‹mÆ
 ("Reached myInit with barbase %xándÖrivdata %x\n",

367 
b¨ba£
, 
¥ivd©a
);

369 
	`•ö_lock_bh
 (&
RawLock
);

370 i‡(
¥ivd©a
 == 0x54545454)

372 
TXb¨ba£
 = 
b¨ba£
;

374 i‡(
¥ivd©a
 == 0x54545456)

376 
RXb¨ba£
 = 
b¨ba£
;

378 
TxBufC¡
 = 0;

379 
RxBufC¡
 = 0;

380 
EºC¡
 = 0;

386 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 0);

387 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 0);

389 
	`•ö_u∆ock_bh
 (&
RawLock
);

392 
	}
}

395 
	$myPutRxPkt
 (*
hndl
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

397 
i
;

398 
Êags
;

399 
PktBuf
 *
pbuf
 = 
vaddr
;

400 
pktSize
;

401 *
u§Addr
 = 
NULL
;

402 
Buf„rInfo
 
ãmpBuffInfo
;

403 
noPages
;

406 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

408 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

413 i‡(
hndl
 !
h™dÀ
[2])

415 
	`log_n‹mÆ
 ("Camêwôh wr⁄g h™dÀ %x\n", (
u32
Ë
hndl
);

420 
i
 = 0; i < 
numpkts
; i++)

422 
Êags
 = 
vaddr
->flags;

424 
pbuf
 = 
vaddr
;

426 
	`∑ge_ˇche_ªÀa£
–(
∑ge
 *)
pbuf
->
∑geAddr
);

427 
pktSize
 =ÖktSizê+ 
pbuf
->
size
;

428 i‡(
Êags
 & 
PKT_SOP
)

430 
u§Addr
 = 
pbuf
->
bufInfo
;

431 
pktSize
 = 
pbuf
->
size
;

433 
noPages
++;

434 i‡(
Êags
 & 
PKT_EOP
)

436 
ãmpBuffInfo
.
buf„rAddªss
 = 
u§Addr
;

437 
ãmpBuffInfo
.
buffSize
 = 
pktSize
;

438 
ãmpBuffInfo
.
noPages
=ÇoPages ;

439 
ãmpBuffInfo
.
ídAddªss

pbuf
->
bufInfo
;

440 
ãmpBuffInfo
.
ídSize
=
pbuf
->
size
;

442 
	`putBuffInfo
 (&
RxD⁄eQ
, 
ãmpBuffInfo
);

443 
pktSize
 = 0;

444 
noPages
=0;

445 
u§Addr
 = 
NULL
;

447 
vaddr
++;

453 
	}
}

456 
	$myGëRxPkt
 (*
hndl
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
,

457 
¥ivd©a
)

459 #ifde‡
USE_LATER


460 *
bufVA
;

461 
PktBuf
 *
pbuf
;

462 
i
;

464 
	`log_vîbo£
(
KERN_INFO
 "myGetRxPkt: Came with handle %p size %dÖrivdata %x\n",

465 
hndl
, 
size
, 
¥ivd©a
);

468 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

470 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

475 i‡(
hndl
 !
h™dÀ
[2])

477 
	`¥ötk
 ("Came with wrong handle\n");

482 i‡(
size
 !
BUFSIZE
)

483 
	`¥ötk
 ("myGetRxPkt: Requested size %d doesÇot matchÉxpected %d\n",

484 
size
, (
u32
Ë
BUFSIZE
);

486 
	`•ö_lock_bh
 (&
RawLock
);

488 
i
 = 0; i < 
numpkts
; i++)

490 
pbuf
 = &(
vaddr
[
i
]);

492 
bufVA
 = 
	`AŒocBuf
 (&
RxBufs
);

493 
	`log_vîbo£
 (
KERN_INFO


495 (
u32
Ë
bufVA
, (u32Ë
BUFSIZE
);

496 i‡(
bufVA
 =
NULL
)

498 
	`log_n‹mÆ
 (
KERN_ERR
 "RX: AllocBuf failed\n");

502 
pbuf
->
pktBuf
 = 
bufVA
;

503 
pbuf
->
bufInfo
 = 
bufVA
;

504 
pbuf
->
size
 = 
BUFSIZE
;

506 
	`•ö_u∆ock_bh
 (&
RawLock
);

508 
	`log_vîbo£
 (
KERN_INFO
 "Reque°ed %d,áŒoˇãd %d buf„rs\n", 
numpkts
, 
i
);

509  
i
;

512 
	}
}

515 
	$myPutTxPkt
 (*
hndl
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

517 
i
;

518 
Êags
;

519 
PktBuf
 *
pbuf
 = 
vaddr
;

520 
pktSize
;

521 *
u§Addr
 = 
NULL
;

522 
Buf„rInfo
 
ãmpBuffInfo
;

524 
	`log_vîbo£
 (
KERN_INFO


526 
hndl
, 
numpkts
, 
¥ivd©a
);

529 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

531 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

536 i‡(
hndl
 !
h™dÀ
[0])

538 
	`¥ötk
 ("Came with wrong handle\n");

544 
i
 = 0; i < 
numpkts
; i++)

546 
Êags
 = 
vaddr
->flags;

548 
pbuf
 = 
vaddr
;

550 if(
pbuf
->
∑geAddr
)

551 
	`∑ge_ˇche_ªÀa£
–(
∑ge
 *)
pbuf
->
∑geAddr
);

553 
pktSize
 =ÖktSizê+ 
pbuf
->
size
;

555 i‡(
Êags
 & 
PKT_SOP
)

557 
u§Addr
 = 
pbuf
->
bufInfo
;

558 
pktSize
 = 
pbuf
->
size
;

561 i‡(
Êags
 & 
PKT_EOP
)

563 
ãmpBuffInfo
.
buf„rAddªss
 = 
u§Addr
;

564 
ãmpBuffInfo
.
buffSize
 = 
pktSize
;

565 
	`putBuffInfo
 (&
TxD⁄eQ
, 
ãmpBuffInfo
);

566 
pktSize
 = 0;

567 
u§Addr
 = 
NULL
;

570 
vaddr
++;

576 
	}
}

579 
	$mySëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

581 
vÆ
;

582 #i‚de‡
RAW_ETH


583 
£qno
;

586 
ã°mode
;

588 
	`log_vîbo£
 (
KERN_INFO
 "Róched mySëSèã wôhÖrivd©®%x\n", 
¥ivd©a
);

591 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

593 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

594  
EFAULT
;

598 i‡((
hndl
 !
h™dÀ
[0]) && (hndl != handle[2]))

600 
	`¥ötk
 ("Came with wrong handle\n");

601  
EBADF
;

605 i‡(
¥ivd©a
 == 0x54545454)

607 
	`•ö_lock_bh
 (&
RawLock
);

610 
RawTe°Mode
 = 
u°©e
->
Te°Mode
;

612 i‡(
RawTe°Mode
 & 
TEST_START
)

614 
ã°mode
 = 0;

615 
Te°St›
=0;

616 i‡(
RawTe°Mode
 & 
ENABLE_LOOPBACK
)

617 
ã°mode
 |
LOOPBACK
;

618 i‡(
RawTe°Mode
 & 
ENABLE_PKTCHK
)

619 
ã°mode
 |
PKTCHKR
;

620 i‡(
RawTe°Mode
 & 
ENABLE_PKTGEN
)

621 
ã°mode
 |
PKTGENR
;

629 i‡(
RawTe°Mode
 & 
ENABLE_PKTCHK
)

630 
ã°mode
 &~
PKTCHKR
;

631 i‡(
RawTe°Mode
 & 
ENABLE_PKTGEN
)

632 
ã°mode
 &~
PKTGENR
;

634 
Te°St›
=1;

636 #ifde‡
USE_LATER


637 i‡(
RawTe°Mode
 & 
ENABLE_LOOPBACK
)

638 
ã°mode
 &~
LOOPBACK
;

642 
	`log_vîbo£
("SetState TX with RawTestMode %x,Ñeg value %x\n",

643 
RawTe°Mode
, 
ã°mode
);

646 i‡(
RawTe°Mode
 & 
TEST_START
)

649 (
RawTe°Mode
 &

650 (
ENABLE_PKTCHK
 | 
ENABLE_PKTGEN
 | 
ENABLE_LOOPBACK
)))

652 
	`¥ötk
 ("%s Driver: TX Test Start called with wrong mode %x\n",

653 
MYNAME
, 
ã°mode
);

654 
RawTe°Mode
 = 0;

655 
	`•ö_u∆ock_bh
 (&
RawLock
);

656  
EBADRQC
;

659 
	`log_vîbo£
("%s Driver: StartingÅheÅest - mode %x,Ñeg %x\n",

660 
MYNAME
, 
RawTe°Mode
, 
ã°mode
);

663 
RawMöPktSize
 = 
u°©e
->
MöPktSize
;

664 
RawMaxPktSize
 = 
u°©e
->
MaxPktSize
;

667 
vÆ
 = 
RawMaxPktSize
;

668 
	`log_vîbo£
("Reg %x = %x\n", 
PKT_SIZE_ADDRESS
, 
vÆ
);

669 
RawMöPktSize
 = 
RawMaxPktSize
 = 
vÆ
;

671 i‡(
RawMaxPktSize
 > 
MAXPKTSIZE
)

672 
RawMöPktSize
 = 
RawMaxPktSize
 = 
MAXPKTSIZE
;

673 i‡(
RawMöPktSize
 < 
MINPKTSIZE
)

674 
RawMöPktSize
 = 
RawMaxPktSize
 = 
MINPKTSIZE
;

675 i‡(
RawMöPktSize
 > 
RawMaxPktSize
)

676 
RawMöPktSize
 = 
RawMaxPktSize
;

677 
vÆ
 = 
RawMaxPktSize
;

678 #i‚de‡
RAW_ETH


679 
	`log_vîbo£
("========Reg %x = %d\n",
DESIGN_MODE_ADDRESS
, 
PERF_DESIGN_MODE
);

680 
	`XIo_Out32
 (
TXb¨ba£
 + 
DESIGN_MODE_ADDRESS
,
PERF_DESIGN_MODE
);

681 
	`log_vîbo£
("DESIGN MODE %d\n",
PERF_DESIGN_MODE
 );

683 
	`log_vîbo£
("========Reg %x = %d\n", 
PKT_SIZE_ADDRESS
, 
vÆ
);

684 
	`XIo_Out32
 (
TXb¨ba£
 + 
PKT_SIZE_ADDRESS
, 
vÆ
);

685 
	`log_vîbo£
("RxPktSizê%d\n", 
vÆ
);

686 #i‚de‡
RAW_ETH


687 
£qno

TX_CONFIG_SEQNO
;

688 
	`log_vîbo£
("========Reg %x = %d\n",
SEQNO_WRAP_REG
, 
£qno
);

689 
	`XIo_Out32
 (
TXb¨ba£
 + 
SEQNO_WRAP_REG
 , 
£qno
);

690 
	`log_vîbo£
("SeqNÿWø∞¨ound %d\n", 
£qno
);

693 #ifde‡
RAW_ETH


694 #ifde‡
XRAWDATA0


695 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_0
, 
BURST_SIZE
 );

696 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_0
, 
BURST_SIZE
 );

697 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_1
, 
BURST_SIZE
 );

698 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_1
, 
BURST_SIZE
 );

700 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_2
, 
BURST_SIZE
 );

701 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_2
, 
BURST_SIZE
 );

702 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_3
, 
BURST_SIZE
 );

703 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_3
, 
BURST_SIZE
 );

707 
	`mdñay
(1);

711 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 0);

712 i‡(
RawTe°Mode
 & (
ENABLE_PKTCHK
 | 
ENABLE_LOOPBACK
))

715 
	`log_vîbo£
("========Reg %x = %x\n", 
TX_CONFIG_ADDRESS
, 
ã°mode
);

716 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 
ã°mode
);

717 #ifde‡
RAW_ETH


718 
	`log_vîbo£
("Reg[DESIGN_MODE] = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
DESIGN_MODE_ADDRESS
));

719 
	`XIo_Out32
(
TXb¨ba£
+
DESIGN_MODE_ADDRESS
,
PERF_DESIGN_MODE
);

720 
	`log_vîbo£
("DißbÀÖîf‹m™˚ mode....\nReg[DESIGN_MODE] = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
DESIGN_MODE_ADDRESS
));

722 if(
RawTe°Mode
 & 
ENABLE_CRISCROSS
)

724 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET_OTHER
 + 
XXGE_RCW1_OFFSET
));

725 
	`XIo_Out32
(
TXb¨ba£
+
NW_PATH_OFFSET_OTHER
+
XXGE_RCW1_OFFSET
, 0x50000000);

726 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET_OTHER
 + 
XXGE_RCW1_OFFSET
));

730 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_RCW1_OFFSET
));

731 
	`XIo_Out32
(
TXb¨ba£
+
NW_PATH_OFFSET
+
XXGE_RCW1_OFFSET
, 0x50000000);

732 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_RCW1_OFFSET
));

734 
	`log_vîbo£
("XGEMAC-TC = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_TC_OFFSET
));

735 
	`XIo_Out32
(
TXb¨ba£
+
NW_PATH_OFFSET
+
XXGE_TC_OFFSET
, 0x50000000);

736 
	`log_vîbo£
("XGEMAC-TC = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_TC_OFFSET
));

739 i‡(
RawTe°Mode
 & 
ENABLE_PKTGEN
)

741 
	`log_vîbo£
("========Reg %x = %x\n", 
RX_CONFIG_ADDRESS
, 
ã°mode
);

742 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 
ã°mode
);

751 
	`log_vîbo£
("%†Drivî: St›pögÅhêã°, modê%x\n", 
MYNAME
,

752 
ã°mode
);

753 
	`log_vîbo£
("========Reg %x = %x\n", 
TX_CONFIG_ADDRESS
, 
ã°mode
);

754 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 
ã°mode
);

755 
	`log_vîbo£
 ("========Reg %x = %x\n", 
RX_CONFIG_ADDRESS
, 
ã°mode
);

756 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 
ã°mode
);

757 
	`mdñay
(200);

763 
	`PrötSumm¨y
 ();

764 
	`•ö_u∆ock_bh
 (&
RawLock
);

767 
	}
}

770 
	$myGëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

772 
ôî
 = 0;

776 
u°©e
->
LökSèã
 = 
LINK_UP
;

777 
u°©e
->
D©aMism©ch

	`XIo_In32
 (
TXb¨ba£
 + 
STATUS_ADDRESS
);

778 
u°©e
->
MöPktSize
 = 
RawMöPktSize
;

779 
u°©e
->
MaxPktSize
 = 
RawMaxPktSize
;

780 
u°©e
->
Te°Mode
 = 
RawTe°Mode
;

781 i‡(
¥ivd©a
 == 0x54545454)

782 
u°©e
->
Buf„rs
 = 
TxBufs
.
TŸÆNum
;

784 
u°©e
->
Buf„rs
 = 
RxBufs
.
TŸÆNum
;

786 i‡(
ôî
++ >= 4)

788 
	`PrötSumm¨y
 ();

790 
ôî
 = 0;

794 
	}
}

797 
	#QSUCCESS
 0

	)

798 
	#QFAILURE
 -1

	)

809 
	$putBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 
buff
)

814 
cuºítIndex
 = 0;

815 
	`•ö_lock_bh
 (&(
bQue
->
iLock
));

817 
cuºítIndex
 = (
bQue
->
iPutIndex
 + 1Ë% 
MAX_BUFF_INFO
;

819 i‡(
cuºítIndex
 =
bQue
->
iGëIndex
)

821 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

822 
	`¥ötk
 (
KERN_ERR
 "%s: BufferInfo Q is FULL in %s , dropÅhe incoming buffers",

823 
__func__
,
__FILE__
);

824  
QFAILURE
;

827 
bQue
->
iPutIndex
 = 
cuºítIndex
;

829 
bQue
->
iLi°
[bQue->
iPutIndex
] = 
buff
;

830 
bQue
->
iPídögD⁄e
++;

831 #ifde‡
BACK_PRESSURE


832 if(
bQue
 =&
RxD⁄eQ
)

834 if((
im∂_bp
 =
NO_BP
)&& ( 
bQue
->
iPídögD⁄e
 > 
MAX_QUEUE_THRESHOLD
))

836 
im∂_bp
 = 
YES_BP
;

837 
	`¥ötk
(
KERN_ERR
 "XXXXXX Maximum QueuêThªshﬁdÑóched.Tu∫ög o¿BACK PRESSURE XRAW0 %d \n",
bQue
->
iPídögD⁄e
);

841 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

842  
QSUCCESS
;

843 
	}
}

853 
	$gëBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 * 
buff
)

856 i‡(!
buff
 || !
bQue
)

858 
	`¥ötk
 (
KERN_ERR
 "%s: BAD Buf„rInfÿpoöãr", 
__func__
);

859  
QFAILURE
;

862 
	`•ö_lock_bh
 (&(
bQue
->
iLock
));

865 i‡(!
bQue
->
iPídögD⁄e
)

867 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

868 
	`log_vîbo£
(
KERN_ERR
 "%s: Buf„rInfÿQ i†Em±y",
__func__
);

869  
QFAILURE
;

872 
bQue
->
iGëIndex
++;

873 
bQue
->
iGëIndex
 %
MAX_BUFF_INFO
;

874 *
buff
 = 
bQue
->
iLi°
[bQue->
iGëIndex
];

875 
bQue
->
iPídögD⁄e
--;

876 #ifde‡
BACK_PRESSURE


877 if(
bQue
 =&
RxD⁄eQ
)

879 if((
im∂_bp
 =
YES_BP
Ë&& (
bQue
->
iPídögD⁄e
 < 
MIN_QUEUE_THRESHOLD
))

881 
im∂_bp
 = 
NO_BP
;

882 
	`¥ötk
(
KERN_ERR
 "XXXXXXX Möimum QueuêThªshﬁdÑóched.Tu∫ög of‡Back Pªssuªáà%d %s\n",
__LINE__
,
__FILE__
);

886 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

888  
QSUCCESS
;

890 
	}
}

893 
	#WRITE_TO_CARD
 0

	)

894 
	#READ_FROM_CARD
 1

	)

897 
	$DmaSëupRe˚ive
(* 
hndl
, 
num
 ,c⁄° 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
)

899 
j
;

900 
tŸÆ
, 
ªsu…
;

901 
PktBuf
 * 
pbuf
;

902 
°©us
;

903 
off£t
;

904 
ÆlocPages
;

905 
fú°
, 
œ°
;

906 
∑ge
** 
ˇchePages
;

907 
PktBuf
 **
pkts
;

910 if(
xøw_DrivîSèã
 !
REGISTERED
)

912 
	`¥ötk
("Driver doesÇot seemÅo beÑeady\n");

917 if(
hndl
 !
h™dÀ
[2])

919 
	`¥ötk
("Came with wrong handle\n");

924 if(!
num
)

926 
	`¥ötk
("Came with 0Öackets for sending\n");

930 
tŸÆ
 = 0;

935 
off£t
 = 
	`off£t_ö_∑ge
(
buf„r
);

936 
fú°
 = (()
buf„r
 & 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

937 
œ°
 = ((()
buf„r
 + 
Àngth
-1Ë& 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

938 
ÆlocPages
 = (
œ°
-
fú°
)+1;

941 
pkts
 = 
	`kmÆloc
–
ÆlocPages
 * ((
PktBuf
*)), 
GFP_KERNEL
);

942 if(
pkts
 =
NULL
)

944 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory forÖkts\n");

948 
ˇchePages
 = 
	`kmÆloc
–(
ÆlocPages
 * ((
∑ge
*))), 
GFP_KERNEL
 );

949 if–
ˇchePages
 =
NULL
 )

951 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory for cachePages\n");

952 
	`k‰ì
(
pkts
);

956 
	`mem£t
(
ˇchePages
, 0, (
ÆlocPages
 * (
∑ge
*)) );

957 
	`down_ªad
(&(
cuºít
->
mm
->
mm≠_£m
));

958 
°©us
 = 
	`gë_u£r_∑ges
(
cuºít
,

959 
cuºít
->
mm
,

960 ()
buf„r
,

961 
ÆlocPages
,

962 
READ_FROM_CARD
,

964 
ˇchePages
,

965 
NULL
);

966 
	`up_ªad
(&
cuºít
->
mm
->
mm≠_£m
);

967 if–
°©us
 < 
ÆlocPages
) {

968 
	`¥ötk
(
KERN_ERR
 ".... Eº‹:Ñeque°edÖages=%d, gø¡edÖages=%d ....\n", 
ÆlocPages
, 
°©us
);

970 
j
=0; j<
°©us
; j++)

971 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

973 
	`k‰ì
(
pkts
);

974 
	`k‰ì
(
ˇchePages
);

979 
ÆlocPages
 = 
°©us
;

981 
j
=0; j< 
ÆlocPages
; j++)

983 
pbuf
 = 
	`kmÆloc
–((
PktBuf
)), 
GFP_KERNEL
);

985 if(
pbuf
 =
NULL
) {

986 
	`¥ötk
(
KERN_ERR
 "Insufficient Memory !!\n");

987 
j
--; j>=0; j--)

988 
	`k‰ì
(
pkts
[
j
]);

989 
j
=0; j<
ÆlocPages
; j++)

990 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

991 
	`k‰ì
(
pkts
);

992 
	`k‰ì
(
ˇchePages
);

997 
pkts
[
j
] = 
pbuf
;

1000 if(
j
==0) {

1001 
pbuf
->
size
 = ((
PAGE_SIZE
)-
off£t
);

1004 if(
j
 =(
ÆlocPages
-1)) {

1005 
pbuf
->
size
 = 
Àngth
-
tŸÆ
;

1007 
pbuf
->
size
 = (
PAGE_SIZE
);

1009 
pbuf
->
pktBuf
 = (*)
ˇchePages
[
j
];

1011 
pbuf
->
bufInfo
 = (*Ë
buf„r
 + 
tŸÆ
;

1013 
pbuf
->
∑geAddr
(*)
ˇchePages
[
j
];

1015 
pbuf
->
Êags
 = 
PKT_ALL
;

1017 
tŸÆ
 +
pbuf
->
size
;

1022 
ÆlocPages
 = 
j
;

1024 
ªsu…
 = 
	`DmaSídPages
(
hndl
, 
pkts
, 
ÆlocPages
);

1025 if(
ªsu…
 == -1)

1027 
j
=0; j<
ÆlocPages
; j++) {

1028 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1031 
tŸÆ
 = 0;

1033 
	`k‰ì
(
ˇchePages
);

1035 
j
=0; j<
ÆlocPages
; j++) {

1036 
	`k‰ì
(
pkts
[
j
]);

1038 
	`k‰ì
(
pkts
);

1040  
tŸÆ
;

1041 
	}
}

1042 
	$DmaSëupTønsmô
(* 
hndl
, 
num
 ,c⁄° 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
)

1044 
j
;

1045 
tŸÆ
, 
ªsu…
;

1046 
PktBuf
 * 
pbuf
;

1047 
°©us
;

1048 
off£t
;

1049 
ÆlocPages
;

1050 
fú°
, 
œ°
;

1051 
∑ge
** 
ˇchePages
;

1052 
PktBuf
 **
pkts
;

1055 if(
xøw_DrivîSèã
 !
REGISTERED
)

1057 
	`¥ötk
("Driver doesÇot seemÅo beÑeady\n");

1062 if(
hndl
 !
h™dÀ
[0])

1064 
	`¥ötk
("Came with wrong handle\n");

1069 if(!
num
)

1071 
	`¥ötk
("Came with 0Öackets for sending\n");

1075 
tŸÆ
 = 0;

1079 
off£t
 = 
	`off£t_ö_∑ge
(
buf„r
);

1080 
fú°
 = (()
buf„r
 & 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

1081 
œ°
 = ((()
buf„r
 + 
Àngth
-1Ë& 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

1082 
ÆlocPages
 = (
œ°
-
fú°
)+1;

1084 
pkts
 = 
	`kmÆloc
–
ÆlocPages
 * ((
PktBuf
*)), 
GFP_KERNEL
);

1085 if(
pkts
 =
NULL
)

1087 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory forÖackets\n");

1091 
ˇchePages
 = 
	`kmÆloc
–(
ÆlocPages
 * ((
∑ge
*))), 
GFP_KERNEL
 );

1092 if–
ˇchePages
 =
NULL
 )

1094 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory for cachePages\n");

1095 
	`k‰ì
(
pkts
);

1099 
	`mem£t
(
ˇchePages
, 0, (
ÆlocPages
 * (
∑ge
*)) );

1100 
	`down_ªad
(&(
cuºít
->
mm
->
mm≠_£m
));

1101 
°©us
 = 
	`gë_u£r_∑ges
(
cuºít
,

1102 
cuºít
->
mm
,

1103 ()
buf„r
,

1104 
ÆlocPages
,

1105 
WRITE_TO_CARD
,

1107 
ˇchePages
,

1108 
NULL
);

1109 
	`up_ªad
(&
cuºít
->
mm
->
mm≠_£m
);

1110 if–
°©us
 < 
ÆlocPages
) {

1111 
	`¥ötk
(
KERN_ERR
 ".... Eº‹:Ñeque°edÖages=%d, gø¡edÖages=%d ....\n", 
ÆlocPages
, 
°©us
);

1113 
j
=0; j<
°©us
; j++)

1114 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1115 
	`k‰ì
(
pkts
);

1116 
	`k‰ì
(
ˇchePages
);

1121 
ÆlocPages
 = 
°©us
;

1123 
j
=0; j< 
ÆlocPages
; j++)

1125 
pbuf
 = 
	`kmÆloc
–((
PktBuf
)), 
GFP_KERNEL
);

1127 if(
pbuf
 =
NULL
) {

1128 
	`¥ötk
(
KERN_ERR
 "Insufficient Memory !!\n");

1129 
j
--; j>=0; j--)

1130 
	`k‰ì
(
pkts
[
j
]);

1131 
j
=0; j<
ÆlocPages
; j++)

1132 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1133 
	`k‰ì
(
pkts
);

1134 
	`k‰ì
(
ˇchePages
);

1139 
pkts
[
j
] = 
pbuf
;

1142 if(
j
==0) {

1143 if(
j
 =(
ÆlocPages
-1)) {

1144 
pbuf
->
size
 = 
Àngth
;

1147 
pbuf
->
size
 = ((
PAGE_SIZE
)-
off£t
);

1150 if(
j
 =(
ÆlocPages
-1)) {

1151 
pbuf
->
size
 = 
Àngth
-
tŸÆ
;

1153 
pbuf
->
size
 = (
PAGE_SIZE
);

1155 
pbuf
->
pktBuf
 = (*)
ˇchePages
[
j
];

1157 
pbuf
->
∑geOff£t
 = (
j
 =0Ë? 
off£t
 : 0;

1159 
pbuf
->
bufInfo
 = (*Ë
buf„r
 + 
tŸÆ
;

1160 
pbuf
->
∑geAddr
(*)
ˇchePages
[
j
];

1161 
pbuf
->
u£rInfo
 = 
Àngth
;

1163 
pbuf
->
Êags
 = 
PKT_ALL
;

1164 if(
j
 == 0)

1166 
pbuf
->
Êags
 |
PKT_SOP
;

1168 if(
j
 =(
ÆlocPages
 - 1) )

1170 
pbuf
->
Êags
 |
PKT_EOP
;

1172 
tŸÆ
 +
pbuf
->
size
;

1177 
ÆlocPages
 = 
j
;

1179 
ªsu…
 = 
	`DmaSídPages_Tx
 (
hndl
, 
pkts
,
ÆlocPages
);

1180 if(
ªsu…
 == -1)

1182 
j
=0; j<
ÆlocPages
; j++) {

1183 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1185 
tŸÆ
 = 0;

1187 
	`k‰ì
(
ˇchePages
);

1189 
j
=0; j<
ÆlocPages
; j++) {

1190 
	`k‰ì
(
pkts
[
j
]);

1192 
	`k‰ì
(
pkts
);

1194  
tŸÆ
;

1195 
	}
}

1197 
	gCPU_LOADED
[16] =

1201 
	$xøw_dev_›í
 (
öode
 *
ö
, 
fûe
 *
fûp
)

1203 
˝u_id
 = 0;

1205 i‡(
xøw_DrivîSèã
 < 
INITIALIZED
)

1207 
	`¥ötk
 ("DriverÇot yetÑeady!\n");

1211 
˝u_id
 = 
	`gë_˝u
 ();

1212 i‡(
CPU_LOADED
[
˝u_id
] == 0)

1214 
CPU_LOADED
[
˝u_id
] = 1;

1218 
	`log_vîbo£
(
KERN_ERR
 "CPU %d isálreadyÜoaded,ÉxitÅhisÖrocess\n",

1219 
˝u_id
);

1222 
	`log_vîbo£
(
KERN_ERR
 "$$$$$$ CPU ID %d $$$$$$\n", 
˝u_id
);

1226 i‡(
xøw_U£rO≥n
)

1228 
	`¥ötk
 ("Deviceálready in use\n");

1229  -
EBUSY
;

1233 
xøw_U£rO≥n
++;

1238 
	}
}

1241 
	$xøw_dev_ªÀa£
 (
öode
 *
ö
, 
fûe
 *
fûp
)

1243 
˝u_id
 = 0;

1245 i‡(!
xøw_U£rO≥n
)

1248 
	`¥ötk
 ("DeviceÇot in use\n");

1249  -
EFAULT
;

1253 
xøw_U£rO≥n
--;

1256 
˝u_id
 = 
	`gë_˝u
 ();

1257 
CPU_LOADED
[
˝u_id
] = 0;

1258 
	`log_vîbo£
(
KERN_ERR
 "CPU %d i†ªÀa£d\n", 
˝u_id
);

1261 
	}
}

1264 
	$xøw_dev_io˘l
 (
fûe
 *
fûp
,

1265 
cmd
, 
¨g
)

1267 
ªtvÆ
 = 0;

1269 i‡(
xøw_DrivîSèã
 < 
INITIALIZED
)

1272 
	`¥ötk
 ("DriverÇot yetÑeady!\n");

1277 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
XPMON_MAGIC
)

1278  -
ENOTTY
;

1279 i‡(
	`_IOC_NR
 (
cmd
Ë> 
XPMON_MAX_CMD
)

1280  -
ENOTTY
;

1283 i‡(
	`_IOC_DIR
 (
cmd
Ë& 
_IOC_READ
)

1284 i‡(!
	`ac˚ss_ok
 (
VERIFY_WRITE
, (*Ë
¨g
, 
	`_IOC_SIZE
 (
cmd
)))

1285  -
EFAULT
;

1286 i‡(
	`_IOC_DIR
 (
cmd
Ë& 
_IOC_WRITE
)

1287 i‡(!
	`ac˚ss_ok
 (
VERIFY_READ
, (*Ë
¨g
, 
	`_IOC_SIZE
 (
cmd
)))

1288  -
EFAULT
;

1290 
cmd
)

1293 
IGET_TRN_TXUSRINFO
:

1295 
cou¡
 = 0;

1297 
ex≥˘_cou¡
;

1298 if(
	`c›y_‰om_u£r
(&
ex≥˘_cou¡
,&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),()) != 0)

1300 
	`¥ötk
 ("##### ERROR in copy from usr #####");

1303 
cou¡
 < 
ex≥˘_cou¡
)

1305 
Buf„rInfo
 
buff
;

1306 i‡(0 !
	`gëBuffInfo
 (&
TxD⁄eQ
, &
buff
))

1310 i‡(
c›y_to_u£r


1311 (((
Buf„rInfo
 *Ë(((
FªeInfo
 *)
¨g
)->
buffLi°
Ë+ 
cou¡
), &
buff
,

1312  (
Buf„rInfo
)))

1314 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1318 
cou¡
++;

1320 if(
	`c›y_to_u£r
(&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),&
cou¡
,(())) != 0)

1322 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1327 
IGET_TRN_RXUSRINFO
:

1329 
cou¡
 = 0;

1330 
ex≥˘_cou¡
;

1332 if(
	`c›y_‰om_u£r
(&
ex≥˘_cou¡
,&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),()) != 0)

1334 
	`¥ötk
 ("##### ERROR in copy from usr #####");

1338 
cou¡
 < 
ex≥˘_cou¡
)

1340 
Buf„rInfo
 
buff
;

1341 i‡(0 !
	`gëBuffInfo
 (&
RxD⁄eQ
, &
buff
))

1345 i‡(
c›y_to_u£r


1346 (((
Buf„rInfo
 *Ë(((
FªeInfo
 *)
¨g
)->
buffLi°
Ë+ 
cou¡
), &
buff
,

1347  (
Buf„rInfo
)))

1349 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1352 
	`log_vîbo£
(" %s:buf„rAdd∏%x PktSizê%d", 
__func__
, 
u§Argumít
->
buffLi°
[
cou¡
].
buf„rAddªss
, u§Argumít->buffLi°[cou¡].
buffSize
);

1353 
cou¡
++;

1355 if(
	`c›y_to_u£r
(&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),&
cou¡
,(())) != 0)

1357 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1363 
	`¥ötk
 ("InvÆid comm™d %d\n", 
cmd
);

1364 
ªtvÆ
 = -1;

1368  
ªtvÆ
;

1369 
	}
}

1375 
ssize_t


1376 
	$xøw_dev_wrôe
 (
fûe
 *file,

1377 c⁄° 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
, 
loff_t
 * 
off£t
)

1379 
ªt_∑ck
=0;

1382 i‡((
RawTe°Mode
 & 
TEST_START
) &&

1383 (
RawTe°Mode
 & (
ENABLE_PKTCHK
 | 
ENABLE_LOOPBACK
)))

1384 
ªt_∑ck
 = 
	`DmaSëupTønsmô
(
h™dÀ
[0], 1, 
buf„r
, 
Àngth
);

1389  
ªt_∑ck
;

1390 
	}
}

1392 
ssize_t


1393 
	$xøw_dev_ªad
 (
fûe
 *file,

1394 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
, 
loff_t
 * 
off£t
)

1396 
ªt_∑ck
=0;

1398 #ifde‡
BACK_PRESSURE


1399 if(
im∂_bp
 =
NO_BP
)

1401 
ªt_∑ck
 = 
	`DmaSëupRe˚ive
(
h™dÀ
[2],1,
buf„r
,
Àngth
);

1408  
ªt_∑ck
;

1409 
	}
}

1411 
__öô


1412 
	$øwd©a_öô
 ()

1414 
chrRë
;

1415 
dev_t
 
xøwDev
;

1416 
U£rPås
 
ufuncs
;

1417 
fûe_›î©i⁄s
 
xøwDevFûeOps
;

1420 
	`¥ötk
 (
KERN_INFO
 "%†Inô: In£πög Xûöx drivî i¿kî√l.\n", 
MYNAME
);

1422 
xøw_DrivîSèã
 = 
INITIALIZED
;

1423 
	`•ö_lock_öô
 (&
RawLock
);

1424 
	`•ö_lock_öô
 (&(
TxD⁄eQ
.
iLock
));

1425 
	`•ö_lock_öô
 (&(
RxD⁄eQ
.
iLock
));

1428 
	`m¶ìp
 (5);

1431 
chrRë
 = 
	`Æloc_chrdev_ªgi⁄
 (&
xøwDev
, 0, 1, 
DEV_NAME
);

1432 i‡(
	`IS_ERR
 ((*Ë
chrRë
))

1434 
	`log_n‹mÆ
 (
KERN_ERR
 "Errorállocating char deviceÑegion\n");

1440 
xøwCdev
 = 
	`cdev_Æloc
 ();

1441 i‡(
	`IS_ERR
 (
xøwCdev
))

1443 
	`log_n‹mÆ
 (
KERN_ERR
 "AllocÉrrorÑegistering device driver\n");

1444 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1449 
xøwDevFûeOps
.
ow√r
 = 
THIS_MODULE
;

1450 
xøwDevFûeOps
.
›í
 = 
xøw_dev_›í
;

1451 
xøwDevFûeOps
.
ªÀa£
 = 
xøw_dev_ªÀa£
;

1452 
xøwDevFûeOps
.
u∆ocked_io˘l
 = 
xøw_dev_io˘l
;

1453 
xøwDevFûeOps
.
wrôe
 = 
xøw_dev_wrôe
;

1454 
xøwDevFûeOps
.
ªad
 = 
xøw_dev_ªad
;

1455 
xøwCdev
->
ow√r
 = 
THIS_MODULE
;

1456 
xøwCdev
->
›s
 = &
xøwDevFûeOps
;

1457 
xøwCdev
->
dev
 = 
xøwDev
;

1458 
chrRë
 = 
	`cdev_add
 (
xøwCdev
, 
xøwDev
, 1);

1459 i‡(
chrRë
 < 0)

1461 
	`log_n‹mÆ
 (
KERN_ERR
 "AddÉrrorÑegistering device driver\n");

1462 
	`cdev_dñ
(
xøwCdev
);

1463 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1469 i‡(!
	`IS_ERR
 ((*Ë
chrRë
))

1471 
	`¥ötk
 (
KERN_INFO
 "DeviceÑegistered with majorÇumber %d\n",

1472 
	`MAJOR
 (
xøwDev
));

1476 
xøw_DrivîSèã
 = 
INITIALIZED
;

1478 i‡(
xøw_DrivîSèã
 < 
POLLING
)

1480 
	`•ö_lock_bh
 (&
RawLock
);

1481 
	`¥ötk
 ("Calling DmaRegister onÉngine %dánd %d\n",

1482 
ENGINE_TX
, 
ENGINE_RX
);

1483 
xøw_DrivîSèã
 = 
REGISTERED
;

1485 
ufuncs
.
U£rInô
 = 
myInô
;

1486 
ufuncs
.
U£rPutPkt
 = 
myPutTxPkt
;

1487 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1488 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1489 #ifde‡
PM_SUPPORT


1490 
ufuncs
.
U£rSu•íd_E¨ly
 = 
NULL
;

1491 
ufuncs
.
U£rSu•íd_L©e
 = 
NULL
;

1492 
ufuncs
.
U£rResume
 = 
NULL
;

1494 
ufuncs
.
¥ivD©a
 = 0x54545454;

1495 #ifde‡
RAW_ETH


1496 
ufuncs
.
mode
 = 
RAWETHERNET_MODE
;

1498 
ufuncs
.
mode
 = 
PERFORMANCE_MODE
;

1500 
	`•ö_u∆ock_bh
 (&
RawLock
);

1502 i‡((
h™dÀ
[0] =

1503 
	`DmaRegi°î
 (
ENGINE_TX
, 
MYBAR
, &
ufuncs
, 
BUFSIZE
)Ë=
NULL
)

1505 
	`¥ötk
 ("Regi°î f‹Éngöê%d faûed. St›pög.\n", 
ENGINE_TX
);

1506 
	`•ö_lock_bh
 (&
RawLock
);

1507 
xøw_DrivîSèã
 = 
UNREGISTERED
;

1508 
	`•ö_u∆ock_bh
 (&
RawLock
);

1509 
	`cdev_dñ
(
xøwCdev
);

1510 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1513 
	`¥ötk
 ("H™dÀ f‹Éngöê%d i†%p\n", 
ENGINE_TX
, 
h™dÀ
[0]);

1515 
	`•ö_lock_bh
 (&
RawLock
);

1516 
ufuncs
.
U£rInô
 = 
myInô
;

1517 
ufuncs
.
U£rPutPkt
 = 
myPutRxPkt
;

1518 
ufuncs
.
U£rGëPkt
 = 
myGëRxPkt
;

1519 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1520 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1521 #ifde‡
PM_SUPPORT


1522 
ufuncs
.
U£rSu•íd_E¨ly
 = 
NULL
;

1523 
ufuncs
.
U£rSu•íd_L©e
 = 
NULL
;

1524 
ufuncs
.
U£rResume
 = 
NULL
;

1526 
ufuncs
.
¥ivD©a
 = 0x54545456;

1527 #ifde‡
RAW_ETH


1528 
ufuncs
.
mode
 = 
RAWETHERNET_MODE
;

1530 
ufuncs
.
mode
 = 
PERFORMANCE_MODE
;

1532 
	`•ö_u∆ock_bh
 (&
RawLock
);

1534 i‡((
h™dÀ
[2] =

1535 
	`DmaRegi°î
 (
ENGINE_RX
, 
MYBAR
, &
ufuncs
, 
BUFSIZE
)Ë=
NULL
)

1537 
	`¥ötk
 ("Regi°î f‹Éngöê%d faûed. St›pög.\n", 
ENGINE_RX
);

1538 
	`•ö_lock_bh
 (&
RawLock
);

1539 
xøw_DrivîSèã
 = 
UNREGISTERED
;

1540 
	`•ö_u∆ock_bh
 (&
RawLock
);

1541 
	`cdev_dñ
(
xøwCdev
);

1542 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1545 
	`¥ötk
 ("H™dÀ f‹Éngöê%d i†%p\n", 
ENGINE_RX
, 
h™dÀ
[2]);

1552 
	}
}

1554 
__exô


1555 
	$øwd©a_˛ónup
 ()

1557 
i
;

1562 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 0);

1564 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 0);

1565 #ifde‡
RAW_ETH


1566 
	`mdñay
(1);

1568 
	`XIo_Out32
(
TXb¨ba£
+(
u32
)(
NW_PATH_OFFSET
+
XXGE_TC_OFFSET
), 0x80000000);

1569 
	`mdñay
(1);

1571 
	`XIo_Out32
(
TXb¨ba£
+(
u32
)(
NW_PATH_OFFSET
+
XXGE_RCW1_OFFSET
), 0x80000000);

1572 
	`mdñay
(1);

1575 
	`¥ötk
 (
KERN_INFO
 "%s: Uƒegi°îög Xûöx drivî from kî√l.\n", 
MYNAME
);

1576 i‡(
TxBufC¡
 !
RxBufC¡
)

1578 
	`¥ötk
 ("%s: Buf„r†Tønsmôãd %u Re˚ived %u\n", 
MYNAME
, 
TxBufC¡
,

1579 
RxBufC¡
);

1581 
	`mdñay
 (1);

1583 #ifde‡
FIFO_EMPTY_CHECK


1584 
	`DmaFifoEm±yWaô
(
MYHANDLE
,
DIR_TYPE_S2C
);

1586 
	`mdñay
(
STABILITY_WAIT_TIME
);

1588 
	`DmaUƒegi°î
 (
h™dÀ
[0]);

1589 #ifde‡
FIFO_EMPTY_CHECK


1590 
	`DmaFifoEm±yWaô
(
MYHANDLE
,
DIR_TYPE_C2S
);

1592 
	`mdñay
(
STABILITY_WAIT_TIME
);

1594 
	`DmaUƒegi°î
 (
h™dÀ
[2]);

1596 
	`PrötSumm¨y
 ();

1598 i‡(
xøwCdev
 !
NULL
)

1600 
	`¥ötk
 ("Unregistering char device driver\n");

1601 
	`cdev_dñ
 (
xøwCdev
);

1602 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwCdev
->
dev
, 1);

1605 
	`mdñay
 (1000);

1608 
	`•ö_lock_bh
 (&
RawLock
);

1609 
	`¥ötk
 ("Freeing user buffers\n");

1610 
i
 = 0; i < 
TxBufs
.
TŸÆNum
; i++)

1612 
	`‰ì_∑ge
 ((Ë(
TxBufs
.
‹igVA
[
i
]));

1613 
i
 = 0; i < 
RxBufs
.
TŸÆNum
; i++)

1615 
	`‰ì_∑ge
 ((Ë(
RxBufs
.
‹igVA
[
i
]));

1616 
	`•ö_u∆ock_bh
 (&
RawLock
);

1617 
	}
}

1619 
moduÀ_öô
 (
øwd©a_öô
);

1620 
moduÀ_exô
 (
øwd©a_˛ónup
);

1622 
MODULE_AUTHOR
 ("Xilinx, Inc.");

1623 
MODULE_DESCRIPTION
 (
DRIVER_DESCRIPTION
);

1624 
MODULE_LICENSE
 ("GPL");

	@xrawdata0/xrawdata0.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@xrawdata1/sguser.c

75 
	~<löux/vîsi⁄.h
>

76 
	~<löux/moduÀ.h
>

77 
	~<löux/dñay.h
>

78 
	~<löux/•ölock.h
>

79 
	~<löux/fs.h
>

80 
	~<löux/kdev_t.h
>

81 
	~<löux/cdev.h
>

82 
	~<löux/mm.h
>

83 
	~<löux/•ölock.h
>

84 
	~<löux/∑gem≠.h
>

85 
	~<löux/¶ab.h
>

86 
	~<asm/uac˚ss.h
>

88 
	~<xpm⁄_be.h
>

89 
	~<xdma_u£r.h
>

90 
	~"xdebug.h
"

91 
	~"xio.h
"

94 
	#UNINITIALIZED
 0

	)

95 
	#INITIALIZED
 1

	)

96 
	#UNREGISTERED
 2

	)

97 
	#POLLING
 3

	)

98 
	#REGISTERED
 4

	)

99 
	#CLOSED
 5

	)

102 
	#MYBAR
 0

	)

104 #ifde‡
XRAWDATA0


105 
	#MYHANDLE
 
HANDLE_0


	)

107 
	#MYHANDLE
 
HANDLE_1


	)

110 #ifde‡
XRAWDATA0


111 
	#MYNAME
 "Raw D©®0"

	)

112 
	#DEV_NAME
 "xøw_d©a0"

	)

114 
	#MYNAME
 "Raw D©®1"

	)

115 
	#DEV_NAME
 "xøw_d©a1"

	)

118 
	#DESIGN_MODE_ADDRESS
 0x9004

	)

119 #ifde‡
RAW_ETH


120 
	#PERF_DESIGN_MODE
 0x00000000

	)

122 
	#PERF_DESIGN_MODE
 0x00000003

	)

125 #ifde‡
RAW_ETH


126 
	#WRBURST_0
 0x9308

	)

127 
	#WRBURST_1
 0x9318

	)

128 
	#WRBURST_2
 0x9328

	)

129 
	#WRBURST_3
 0x9338

	)

131 
	#RDBURST_0
 0x930C

	)

132 
	#RDBURST_1
 0x931C

	)

133 
	#RDBURST_2
 0x932C

	)

134 
	#RDBURST_3
 0x933C

	)

136 
	#BURST_SIZE
 256

	)

138 
	#MDIO_C⁄figW‹d_0
 0x500

	)

139 
	#MDIO_C⁄figW‹d_1
 0x504

	)

140 
	#MDIO_TX_DATA
 0x508

	)

141 
	#MDIO_RX_DATA
 0x50C

	)

142 
	#YES
 1

	)

144 
	#MDIO_READY
(
X
Ë((
	`XIo_In32
(X + 
MDIO_C⁄figW‹d_1
 ) >> 7 ) & 0x00000001)

	)

145 
	#MDIO_LINK_STATUS_UP
(
X
Ë((
	`XIo_In32
(X + 
MDIO_RX_DATA
 ) >> 12Ë& 0x00000001)

	)

147 
	#XXGE_RCW0_OFFSET
 0x00000400

	)

148 
	#XXGE_RCW1_OFFSET
 0x00000404

	)

149 
	#XXGE_TC_OFFSET
 0x00000408

	)

154 #ifde‡
XRAWDATA0


156 
	#TX_CONFIG_ADDRESS
 0x9108

	)

157 
	#RX_CONFIG_ADDRESS
 0x9100

	)

158 
	#PKT_SIZE_ADDRESS
 0x9104

	)

159 
	#STATUS_ADDRESS
 0x910C

	)

160 #i‚de‡
RAW_ETH


161 
	#SEQNO_WRAP_REG
 0x9110

	)

164 
	#LOOPBACK
 0x00000002

	)

168 
	#TX_CONFIG_ADDRESS
 0x9208

	)

169 
	#RX_CONFIG_ADDRESS
 0x9200

	)

170 
	#PKT_SIZE_ADDRESS
 0x9204

	)

171 
	#STATUS_ADDRESS
 0x920C

	)

172 #i‚de‡
RAW_ETH


173 
	#SEQNO_WRAP_REG
 0x9210

	)

176 
	#LOOPBACK
 0x00000002

	)

180 
	#PKTCHKR
 0x00000001

	)

181 
	#PKTGENR
 0x00000001

	)

182 
	#CHKR_MISMATCH
 0x00000001

	)

184 #ifde‡
XRAWDATA0


185 
	#ENGINE_TX
 0

	)

186 
	#ENGINE_RX
 32

	)

187 #ifde‡
RAW_ETH


188 
	#NW_PATH_OFFSET
 0xB000

	)

189 
	#NW_PATH_OFFSET_OTHER
 0xC000

	)

192 
	#ENGINE_TX
 1

	)

193 
	#ENGINE_RX
 33

	)

194 #ifde‡
RAW_ETH


195 
	#NW_PATH_OFFSET
 0xC000

	)

196 
	#NW_PATH_OFFSET_OTHER
 0xB000

	)

201 
	#BUFSIZE
 (
PAGE_SIZE
)

	)

202 #ifde‡
RAW_ETH


203 
	#MAXPKTSIZE
 (4*
PAGE_SIZE
 - 1)

	)

205 
	#MAXPKTSIZE
 (8*
PAGE_SIZE
)

	)

210 
	#MINPKTSIZE
 (64)

	)

211 
	#NUM_BUFS
 2000

	)

212 
	#BUFALIGN
 8

	)

213 
	#BYTEMULTIPLE
 8

	)

215 
cdev
 *
	gxøwCdev
 = 
NULL
;

216 
	gxøw_DrivîSèã
 = 
UNINITIALIZED
;

217 
	gxøw_U£rO≥n
 = 0;

219 *
	gh™dÀ
[4] = { 
NULL
, NULL, NULL, NULL };

220 #ifde‡
X86_64


221 
u64
 
	gTXb¨ba£
, 
	gRXb¨ba£
;

223 
u32
 
	gTXb¨ba£
, 
	gRXb¨ba£
;

225 
u32
 
	gRawTe°Mode
 = 
TEST_STOP
;

226 
u32
 
	gRawMöPktSize
 = 
MINPKTSIZE
, 
	gRawMaxPktSize
 = 
MAXPKTSIZE
;

228 #ifde‡
BACK_PRESSURE


229 
	#NO_BP
 1

	)

230 
	#YES_BP
 2

	)

231 
	#MAX_QUEUE_THRESHOLD
 12288

	)

232 
	#MIN_QUEUE_THRESHOLD
 8192

	)

233 
u8
 
	gim∂_bp
 = 
NO_BP
;

238 
	mTŸÆNum
;

239 
	mAŒocNum
;

240 
	mFú°Buf
;

241 
	mLa°Buf
;

242 
	mFªePå
;

243 
	mAŒocPå
;

244 *
	m‹igVA
[
NUM_BUFS
];

245 } 
	tBuf„r
;

247 
Buf„r
 
	gTxBufs
;

248 
Buf„r
 
	gRxBufs
;

249 
	gxøwTøns
[4096];

252 
•ölock_t
 
	gRawLock
;

254 #ifde‡
XRAWDATA0


255 
	#DRIVER_NAME
 "xøwd©a0_drivî"

	)

256 
	#DRIVER_DESCRIPTION
 "Xûöx Raw D©a0 Drivî "

	)

258 
	#DRIVER_NAME
 "xøwd©a1_drivî"

	)

259 
	#DRIVER_DESCRIPTION
 "Xûöx Raw D©a1 Drivî"

	)

271 
	#MAX_BUFF_INFO
 16384

	)

273 
	gTe°St›
=0;

275 
	sBuf„rInfoQ


277 
•ölock_t
 
	miLock
;

278 
Buf„rInfo
 
	miLi°
[
MAX_BUFF_INFO
];

279 
	miPutIndex
;

280 
	miGëIndex
;

281 
	miPídögD⁄e
;

282 } 
	tBuf„rInfoQue
;

284 
Buf„rInfoQue
 
	gTxD⁄eQ
;

285 
Buf„rInfoQue
 
	gRxD⁄eQ
;

296 
putBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 
buff
);

305 
gëBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 * 
buff
);

306 #ifde‡
X86_64


307 
myInô
 (
u64
, );

309 
myInô
 (, );

311 
myFªePkt
 (*, *, , );

312 
DmaSëupTønsmô
 (*, , c⁄° 
__u£r
 *, 
size_t
);

313 
DmaSëupRe˚ive
(* , ,c⁄° 
__u£r
 * , 
size_t
 );

314 
myGëRxPkt
 (*, 
PktBuf
 *, , , );

315 
myPutTxPkt
 (*, 
PktBuf
 *, , );

316 
myPutRxPkt
 (*, 
PktBuf
 *, , );

317 
mySëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

318 
myGëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

321 
	gTxBufC¡
 = 0;

322 
	gRxBufC¡
 = 0;

323 
	gEºC¡
 = 0;

327 
ölöe
 

328 
	$PrötSumm¨y
 ()

332 
u32
 
vÆ
;

334 
	`¥ötk
 ("---------------------------------------------------\n");

335 
	`¥ötk
 ("%†DrivîÑesu…†Summ¨y:-\n", 
MYNAME
);

336 
	`¥ötk
 ("Current Run Min Packet Size = %d, Max Packet Size = %d\n",

337 
RawMöPktSize
, 
RawMaxPktSize
);

338 
¥ötk


340 
TxBufC¡
, 
RxBufC¡
, 
EºC¡
);

343 
vÆ
 = 
	`XIo_In32
 (
TXb¨ba£
 + 
STATUS_ADDRESS
);

344 
	`¥ötk
 ("D©®Mism©ch Sètu†%x\n", 
vÆ
);

345 #ifde‡
RAW_ETH


346 
	`¥ötk
("XGEMAC TX Byã†0 = %x\t", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x208));

347 
	`¥ötk
("XGEMAC TX Byã†1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x20C));

348 
	`¥ötk
("XGEMAC RX Byã†0 = %x\t", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x200));

349 
	`¥ötk
("XGEMAC RX Byã†1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
NW_PATH_OFFSET
+0x204));

351 
	`¥ötk
 ("---------------------------------------------------\n");

353 
	}
}

355 #ifde‡
X86_64


357 
	$myInô
 (
u64
 
b¨ba£
, 
¥ivd©a
)

361 
	$myInô
 (
b¨ba£
, 
¥ivd©a
)

364 
	`log_n‹mÆ
 ("Reached myInit with barbase %xándÖrivdata %x\n",

365 
b¨ba£
, 
¥ivd©a
);

367 
	`•ö_lock_bh
 (&
RawLock
);

368 i‡(
¥ivd©a
 == 0x54545454)

370 
TXb¨ba£
 = 
b¨ba£
;

372 i‡(
¥ivd©a
 == 0x54545456)

374 
RXb¨ba£
 = 
b¨ba£
;

376 
TxBufC¡
 = 0;

377 
RxBufC¡
 = 0;

378 
EºC¡
 = 0;

384 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 0);

385 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 0);

387 
	`•ö_u∆ock_bh
 (&
RawLock
);

390 
	}
}

393 
	$myPutRxPkt
 (*
hndl
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

395 
i
;

396 
Êags
;

397 
PktBuf
 *
pbuf
 = 
vaddr
;

398 
pktSize
;

399 *
u§Addr
 = 
NULL
;

400 
Buf„rInfo
 
ãmpBuffInfo
;

401 
noPages
;

404 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

406 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

411 i‡(
hndl
 !
h™dÀ
[2])

413 
	`log_n‹mÆ
 ("Camêwôh wr⁄g h™dÀ %x\n", (
u32
Ë
hndl
);

418 
i
 = 0; i < 
numpkts
; i++)

420 
Êags
 = 
vaddr
->flags;

422 
pbuf
 = 
vaddr
;

424 
	`∑ge_ˇche_ªÀa£
–(
∑ge
 *)
pbuf
->
∑geAddr
);

425 
pktSize
 =ÖktSizê+ 
pbuf
->
size
;

426 i‡(
Êags
 & 
PKT_SOP
)

428 
u§Addr
 = 
pbuf
->
bufInfo
;

429 
pktSize
 = 
pbuf
->
size
;

431 
noPages
++;

432 i‡(
Êags
 & 
PKT_EOP
)

434 
ãmpBuffInfo
.
buf„rAddªss
 = 
u§Addr
;

435 
ãmpBuffInfo
.
buffSize
 = 
pktSize
;

436 
ãmpBuffInfo
.
noPages
=ÇoPages ;

437 
ãmpBuffInfo
.
ídAddªss

pbuf
->
bufInfo
;

438 
ãmpBuffInfo
.
ídSize
=
pbuf
->
size
;

440 
	`putBuffInfo
 (&
RxD⁄eQ
, 
ãmpBuffInfo
);

441 
pktSize
 = 0;

442 
noPages
=0;

443 
u§Addr
 = 
NULL
;

445 
vaddr
++;

451 
	}
}

454 
	$myGëRxPkt
 (*
hndl
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
,

455 
¥ivd©a
)

457 #ifde‡
USE_LATER


458 *
bufVA
;

459 
PktBuf
 *
pbuf
;

460 
i
;

462 
	`log_vîbo£
(
KERN_INFO
 "myGetRxPkt: Came with handle %p size %dÖrivdata %x\n",

463 
hndl
, 
size
, 
¥ivd©a
);

466 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

468 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

473 i‡(
hndl
 !
h™dÀ
[2])

475 
	`¥ötk
 ("Came with wrong handle\n");

480 i‡(
size
 !
BUFSIZE
)

481 
	`¥ötk
 ("myGetRxPkt: Requested size %d doesÇot matchÉxpected %d\n",

482 
size
, (
u32
Ë
BUFSIZE
);

484 
	`•ö_lock_bh
 (&
RawLock
);

486 
i
 = 0; i < 
numpkts
; i++)

488 
pbuf
 = &(
vaddr
[
i
]);

490 
bufVA
 = 
	`AŒocBuf
 (&
RxBufs
);

491 
	`log_vîbo£
 (
KERN_INFO


493 (
u32
Ë
bufVA
, (u32Ë
BUFSIZE
);

494 i‡(
bufVA
 =
NULL
)

496 
	`log_n‹mÆ
 (
KERN_ERR
 "RX: AllocBuf failed\n");

500 
pbuf
->
pktBuf
 = 
bufVA
;

501 
pbuf
->
bufInfo
 = 
bufVA
;

502 
pbuf
->
size
 = 
BUFSIZE
;

504 
	`•ö_u∆ock_bh
 (&
RawLock
);

506 
	`log_vîbo£
 (
KERN_INFO
 "Reque°ed %d,áŒoˇãd %d buf„rs\n", 
numpkts
, 
i
);

507  
i
;

510 
	}
}

513 
	$myPutTxPkt
 (*
hndl
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

515 
i
;

516 
Êags
;

517 
PktBuf
 *
pbuf
 = 
vaddr
;

518 
pktSize
;

519 *
u§Addr
 = 
NULL
;

520 
Buf„rInfo
 
ãmpBuffInfo
;

522 
	`log_vîbo£
 (
KERN_INFO


524 
hndl
, 
numpkts
, 
¥ivd©a
);

527 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

529 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

534 i‡(
hndl
 !
h™dÀ
[0])

536 
	`¥ötk
 ("Came with wrong handle\n");

542 
i
 = 0; i < 
numpkts
; i++)

544 
Êags
 = 
vaddr
->flags;

546 
pbuf
 = 
vaddr
;

548 if(
pbuf
->
∑geAddr
)

549 
	`∑ge_ˇche_ªÀa£
–(
∑ge
 *)
pbuf
->
∑geAddr
);

551 
pktSize
 =ÖktSizê+ 
pbuf
->
size
;

553 i‡(
Êags
 & 
PKT_SOP
)

555 
u§Addr
 = 
pbuf
->
bufInfo
;

556 
pktSize
 = 
pbuf
->
size
;

559 i‡(
Êags
 & 
PKT_EOP
)

561 
ãmpBuffInfo
.
buf„rAddªss
 = 
u§Addr
;

562 
ãmpBuffInfo
.
buffSize
 = 
pktSize
;

563 
	`putBuffInfo
 (&
TxD⁄eQ
, 
ãmpBuffInfo
);

564 
pktSize
 = 0;

565 
u§Addr
 = 
NULL
;

568 
vaddr
++;

574 
	}
}

577 
	$mySëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

579 
vÆ
;

580 #i‚de‡
RAW_ETH


581 
£qno
;

584 
ã°mode
;

586 
	`log_vîbo£
 (
KERN_INFO
 "Róched mySëSèã wôhÖrivd©®%x\n", 
¥ivd©a
);

589 i‡(
xøw_DrivîSèã
 !
REGISTERED
)

591 
	`¥ötk
 ("Driver doesÇot seemÅo beÑeady\n");

592  
EFAULT
;

596 i‡((
hndl
 !
h™dÀ
[0]) && (hndl != handle[2]))

598 
	`¥ötk
 ("Came with wrong handle\n");

599  
EBADF
;

603 i‡(
¥ivd©a
 == 0x54545454)

605 
	`•ö_lock_bh
 (&
RawLock
);

608 
RawTe°Mode
 = 
u°©e
->
Te°Mode
;

610 i‡(
RawTe°Mode
 & 
TEST_START
)

612 
ã°mode
 = 0;

613 
Te°St›
=0;

614 i‡(
RawTe°Mode
 & 
ENABLE_LOOPBACK
)

615 
ã°mode
 |
LOOPBACK
;

616 i‡(
RawTe°Mode
 & 
ENABLE_PKTCHK
)

617 
ã°mode
 |
PKTCHKR
;

618 i‡(
RawTe°Mode
 & 
ENABLE_PKTGEN
)

619 
ã°mode
 |
PKTGENR
;

627 i‡(
RawTe°Mode
 & 
ENABLE_PKTCHK
)

628 
ã°mode
 &~
PKTCHKR
;

629 i‡(
RawTe°Mode
 & 
ENABLE_PKTGEN
)

630 
ã°mode
 &~
PKTGENR
;

632 
Te°St›
=1;

634 #ifde‡
USE_LATER


635 i‡(
RawTe°Mode
 & 
ENABLE_LOOPBACK
)

636 
ã°mode
 &~
LOOPBACK
;

640 
	`log_vîbo£
("SetState TX with RawTestMode %x,Ñeg value %x\n",

641 
RawTe°Mode
, 
ã°mode
);

644 i‡(
RawTe°Mode
 & 
TEST_START
)

647 (
RawTe°Mode
 &

648 (
ENABLE_PKTCHK
 | 
ENABLE_PKTGEN
 | 
ENABLE_LOOPBACK
)))

650 
	`¥ötk
 ("%s Driver: TX Test Start called with wrong mode %x\n",

651 
MYNAME
, 
ã°mode
);

652 
RawTe°Mode
 = 0;

653 
	`•ö_u∆ock_bh
 (&
RawLock
);

654  
EBADRQC
;

657 
	`log_vîbo£
("%s Driver: StartingÅheÅest - mode %x,Ñeg %x\n",

658 
MYNAME
, 
RawTe°Mode
, 
ã°mode
);

661 
RawMöPktSize
 = 
u°©e
->
MöPktSize
;

662 
RawMaxPktSize
 = 
u°©e
->
MaxPktSize
;

665 
vÆ
 = 
RawMaxPktSize
;

666 
	`log_vîbo£
("Reg %x = %x\n", 
PKT_SIZE_ADDRESS
, 
vÆ
);

667 
RawMöPktSize
 = 
RawMaxPktSize
 = 
vÆ
;

669 i‡(
RawMaxPktSize
 > 
MAXPKTSIZE
)

670 
RawMöPktSize
 = 
RawMaxPktSize
 = 
MAXPKTSIZE
;

671 i‡(
RawMöPktSize
 < 
MINPKTSIZE
)

672 
RawMöPktSize
 = 
RawMaxPktSize
 = 
MINPKTSIZE
;

673 i‡(
RawMöPktSize
 > 
RawMaxPktSize
)

674 
RawMöPktSize
 = 
RawMaxPktSize
;

675 
vÆ
 = 
RawMaxPktSize
;

676 #i‚de‡
RAW_ETH


677 
	`log_vîbo£
("========Reg %x = %d\n",
DESIGN_MODE_ADDRESS
, 
PERF_DESIGN_MODE
);

678 
	`XIo_Out32
 (
TXb¨ba£
 + 
DESIGN_MODE_ADDRESS
,
PERF_DESIGN_MODE
);

679 
	`log_vîbo£
("DESIGN MODE %d\n",
PERF_DESIGN_MODE
 );

681 
	`log_vîbo£
("========Reg %x = %d\n", 
PKT_SIZE_ADDRESS
, 
vÆ
);

682 
	`XIo_Out32
 (
TXb¨ba£
 + 
PKT_SIZE_ADDRESS
, 
vÆ
);

683 
	`log_vîbo£
("RxPktSizê%d\n", 
vÆ
);

684 #i‚de‡
RAW_ETH


685 
£qno

TX_CONFIG_SEQNO
;

686 
	`log_vîbo£
("========Reg %x = %d\n",
SEQNO_WRAP_REG
, 
£qno
);

687 
	`XIo_Out32
 (
TXb¨ba£
 + 
SEQNO_WRAP_REG
 , 
£qno
);

688 
	`log_vîbo£
("SeqNÿWø∞¨ound %d\n", 
£qno
);

691 #ifde‡
RAW_ETH


692 #ifde‡
XRAWDATA0


693 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_0
, 
BURST_SIZE
 );

694 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_0
, 
BURST_SIZE
 );

695 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_1
, 
BURST_SIZE
 );

696 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_1
, 
BURST_SIZE
 );

698 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_2
, 
BURST_SIZE
 );

699 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_2
, 
BURST_SIZE
 );

700 
	`XIo_Out32
(
TXb¨ba£
+
WRBURST_3
, 
BURST_SIZE
 );

701 
	`XIo_Out32
(
TXb¨ba£
+
RDBURST_3
, 
BURST_SIZE
 );

705 
	`mdñay
(1);

709 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 0);

710 i‡(
RawTe°Mode
 & (
ENABLE_PKTCHK
 | 
ENABLE_LOOPBACK
))

713 
	`log_vîbo£
("========Reg %x = %x\n", 
TX_CONFIG_ADDRESS
, 
ã°mode
);

714 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 
ã°mode
);

715 #ifde‡
RAW_ETH


716 
	`log_vîbo£
("Reg[DESIGN_MODE] = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
DESIGN_MODE_ADDRESS
));

717 
	`XIo_Out32
(
TXb¨ba£
+
DESIGN_MODE_ADDRESS
,
PERF_DESIGN_MODE
);

718 
	`log_vîbo£
("DißbÀÖîf‹m™˚ mode....\nReg[DESIGN_MODE] = %x\n", 
	`XIo_In32
(
TXb¨ba£
+
DESIGN_MODE_ADDRESS
));

720 if(
RawTe°Mode
 & 
ENABLE_CRISCROSS
)

722 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET_OTHER
 + 
XXGE_RCW1_OFFSET
));

723 
	`XIo_Out32
(
TXb¨ba£
+
NW_PATH_OFFSET_OTHER
+
XXGE_RCW1_OFFSET
, 0x50000000);

724 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET_OTHER
 + 
XXGE_RCW1_OFFSET
));

728 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_RCW1_OFFSET
));

729 
	`XIo_Out32
(
TXb¨ba£
+
NW_PATH_OFFSET
+
XXGE_RCW1_OFFSET
, 0x50000000);

730 
	`log_vîbo£
("XGEMAC-RCW1 = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_RCW1_OFFSET
));

732 
	`log_vîbo£
("XGEMAC-TC = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_TC_OFFSET
));

733 
	`XIo_Out32
(
TXb¨ba£
+
NW_PATH_OFFSET
+
XXGE_TC_OFFSET
, 0x50000000);

734 
	`log_vîbo£
("XGEMAC-TC = %x\n", 
	`XIo_In32
(
TXb¨ba£
 + 
NW_PATH_OFFSET
 + 
XXGE_TC_OFFSET
));

737 i‡(
RawTe°Mode
 & 
ENABLE_PKTGEN
)

739 
	`log_vîbo£
("========Reg %x = %x\n", 
RX_CONFIG_ADDRESS
, 
ã°mode
);

740 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 
ã°mode
);

749 
	`log_vîbo£
("%†Drivî: St›pögÅhêã°, modê%x\n", 
MYNAME
,

750 
ã°mode
);

751 
	`log_vîbo£
("========Reg %x = %x\n", 
TX_CONFIG_ADDRESS
, 
ã°mode
);

752 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 
ã°mode
);

753 
	`log_vîbo£
 ("========Reg %x = %x\n", 
RX_CONFIG_ADDRESS
, 
ã°mode
);

754 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 
ã°mode
);

755 
	`mdñay
(200);

761 
	`PrötSumm¨y
 ();

762 
	`•ö_u∆ock_bh
 (&
RawLock
);

765 
	}
}

768 
	$myGëSèã
 (*
hndl
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

770 
ôî
 = 0;

774 
u°©e
->
LökSèã
 = 
LINK_UP
;

775 
u°©e
->
D©aMism©ch

	`XIo_In32
 (
TXb¨ba£
 + 
STATUS_ADDRESS
);

776 
u°©e
->
MöPktSize
 = 
RawMöPktSize
;

777 
u°©e
->
MaxPktSize
 = 
RawMaxPktSize
;

778 
u°©e
->
Te°Mode
 = 
RawTe°Mode
;

779 i‡(
¥ivd©a
 == 0x54545454)

780 
u°©e
->
Buf„rs
 = 
TxBufs
.
TŸÆNum
;

782 
u°©e
->
Buf„rs
 = 
RxBufs
.
TŸÆNum
;

784 i‡(
ôî
++ >= 4)

786 
	`PrötSumm¨y
 ();

788 
ôî
 = 0;

792 
	}
}

795 
	#QSUCCESS
 0

	)

796 
	#QFAILURE
 -1

	)

807 
	$putBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 
buff
)

812 
cuºítIndex
 = 0;

813 
	`•ö_lock_bh
 (&(
bQue
->
iLock
));

815 
cuºítIndex
 = (
bQue
->
iPutIndex
 + 1Ë% 
MAX_BUFF_INFO
;

817 i‡(
cuºítIndex
 =
bQue
->
iGëIndex
)

819 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

820 
	`¥ötk
 (
KERN_ERR
 "%s: BufferInfo Q is FULL in %s , dropÅhe incoming buffers",

821 
__func__
,
__FILE__
);

822  
QFAILURE
;

825 
bQue
->
iPutIndex
 = 
cuºítIndex
;

827 
bQue
->
iLi°
[bQue->
iPutIndex
] = 
buff
;

828 
bQue
->
iPídögD⁄e
++;

829 #ifde‡
BACK_PRESSURE


830 if(
bQue
 =&
RxD⁄eQ
)

832 if((
im∂_bp
 =
NO_BP
)&& ( 
bQue
->
iPídögD⁄e
 > 
MAX_QUEUE_THRESHOLD
))

834 
im∂_bp
 = 
YES_BP
;

835 
	`¥ötk
(
KERN_ERR
 "XXXXXX Maximum QueuêThªshﬁdÑóched.Tu∫ög o¿BACK PRESSURE XRAW0 %d \n",
bQue
->
iPídögD⁄e
);

839 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

840  
QSUCCESS
;

841 
	}
}

851 
	$gëBuffInfo
 (
Buf„rInfoQue
 * 
bQue
, 
Buf„rInfo
 * 
buff
)

854 i‡(!
buff
 || !
bQue
)

856 
	`¥ötk
 (
KERN_ERR
 "%s: BAD Buf„rInfÿpoöãr", 
__func__
);

857  
QFAILURE
;

860 
	`•ö_lock_bh
 (&(
bQue
->
iLock
));

863 i‡(!
bQue
->
iPídögD⁄e
)

865 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

866 
	`log_vîbo£
(
KERN_ERR
 "%s: Buf„rInfÿQ i†Em±y",
__func__
);

867  
QFAILURE
;

870 
bQue
->
iGëIndex
++;

871 
bQue
->
iGëIndex
 %
MAX_BUFF_INFO
;

872 *
buff
 = 
bQue
->
iLi°
[bQue->
iGëIndex
];

873 
bQue
->
iPídögD⁄e
--;

874 #ifde‡
BACK_PRESSURE


875 if(
bQue
 =&
RxD⁄eQ
)

877 if((
im∂_bp
 =
YES_BP
Ë&& (
bQue
->
iPídögD⁄e
 < 
MIN_QUEUE_THRESHOLD
))

879 
im∂_bp
 = 
NO_BP
;

880 
	`¥ötk
(
KERN_ERR
 "XXXXXXX Möimum QueuêThªshﬁdÑóched.Tu∫ög of‡Back Pªssuªáà%d %s\n",
__LINE__
,
__FILE__
);

884 
	`•ö_u∆ock_bh
 (&(
bQue
->
iLock
));

886  
QSUCCESS
;

888 
	}
}

891 
	#WRITE_TO_CARD
 0

	)

892 
	#READ_FROM_CARD
 1

	)

895 
	$DmaSëupRe˚ive
(* 
hndl
, 
num
 ,c⁄° 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
)

897 
j
;

898 
tŸÆ
, 
ªsu…
;

899 
PktBuf
 * 
pbuf
;

900 
°©us
;

901 
off£t
;

902 
ÆlocPages
;

903 
fú°
, 
œ°
;

904 
∑ge
** 
ˇchePages
;

905 
PktBuf
 **
pkts
;

908 if(
xøw_DrivîSèã
 !
REGISTERED
)

910 
	`¥ötk
("Driver doesÇot seemÅo beÑeady\n");

915 if(
hndl
 !
h™dÀ
[2])

917 
	`¥ötk
("Came with wrong handle\n");

922 if(!
num
)

924 
	`¥ötk
("Came with 0Öackets for sending\n");

928 
tŸÆ
 = 0;

933 
off£t
 = 
	`off£t_ö_∑ge
(
buf„r
);

934 
fú°
 = (()
buf„r
 & 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

935 
œ°
 = ((()
buf„r
 + 
Àngth
-1Ë& 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

936 
ÆlocPages
 = (
œ°
-
fú°
)+1;

939 
pkts
 = 
	`kmÆloc
–
ÆlocPages
 * ((
PktBuf
*)), 
GFP_KERNEL
);

940 if(
pkts
 =
NULL
)

942 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory forÖkts\n");

946 
ˇchePages
 = 
	`kmÆloc
–(
ÆlocPages
 * ((
∑ge
*))), 
GFP_KERNEL
 );

947 if–
ˇchePages
 =
NULL
 )

949 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory for cachePages\n");

950 
	`k‰ì
(
pkts
);

954 
	`mem£t
(
ˇchePages
, 0, (
ÆlocPages
 * (
∑ge
*)) );

955 
	`down_ªad
(&(
cuºít
->
mm
->
mm≠_£m
));

956 
°©us
 = 
	`gë_u£r_∑ges
(
cuºít
,

957 
cuºít
->
mm
,

958 ()
buf„r
,

959 
ÆlocPages
,

960 
READ_FROM_CARD
,

962 
ˇchePages
,

963 
NULL
);

964 
	`up_ªad
(&
cuºít
->
mm
->
mm≠_£m
);

965 if–
°©us
 < 
ÆlocPages
) {

966 
	`¥ötk
(
KERN_ERR
 ".... Eº‹:Ñeque°edÖages=%d, gø¡edÖages=%d ....\n", 
ÆlocPages
, 
°©us
);

968 
j
=0; j<
°©us
; j++)

969 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

971 
	`k‰ì
(
pkts
);

972 
	`k‰ì
(
ˇchePages
);

977 
ÆlocPages
 = 
°©us
;

979 
j
=0; j< 
ÆlocPages
; j++)

981 
pbuf
 = 
	`kmÆloc
–((
PktBuf
)), 
GFP_KERNEL
);

983 if(
pbuf
 =
NULL
) {

984 
	`¥ötk
(
KERN_ERR
 "Insufficient Memory !!\n");

985 
j
--; j>=0; j--)

986 
	`k‰ì
(
pkts
[
j
]);

987 
j
=0; j<
ÆlocPages
; j++)

988 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

989 
	`k‰ì
(
pkts
);

990 
	`k‰ì
(
ˇchePages
);

995 
pkts
[
j
] = 
pbuf
;

998 if(
j
==0) {

999 
pbuf
->
size
 = ((
PAGE_SIZE
)-
off£t
);

1002 if(
j
 =(
ÆlocPages
-1)) {

1003 
pbuf
->
size
 = 
Àngth
-
tŸÆ
;

1005 
pbuf
->
size
 = (
PAGE_SIZE
);

1007 
pbuf
->
pktBuf
 = (*)
ˇchePages
[
j
];

1009 
pbuf
->
bufInfo
 = (*Ë
buf„r
 + 
tŸÆ
;

1011 
pbuf
->
∑geAddr
(*)
ˇchePages
[
j
];

1013 
pbuf
->
Êags
 = 
PKT_ALL
;

1015 
tŸÆ
 +
pbuf
->
size
;

1020 
ÆlocPages
 = 
j
;

1022 
ªsu…
 = 
	`DmaSídPages
(
hndl
, 
pkts
, 
ÆlocPages
);

1023 if(
ªsu…
 == -1)

1025 
j
=0; j<
ÆlocPages
; j++) {

1026 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1029 
tŸÆ
 = 0;

1031 
	`k‰ì
(
ˇchePages
);

1033 
j
=0; j<
ÆlocPages
; j++) {

1034 
	`k‰ì
(
pkts
[
j
]);

1036 
	`k‰ì
(
pkts
);

1038  
tŸÆ
;

1039 
	}
}

1040 
	$DmaSëupTønsmô
(* 
hndl
, 
num
 ,c⁄° 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
)

1042 
j
;

1043 
tŸÆ
, 
ªsu…
;

1044 
PktBuf
 * 
pbuf
;

1045 
°©us
;

1046 
off£t
;

1047 
ÆlocPages
;

1048 
fú°
, 
œ°
;

1049 
∑ge
** 
ˇchePages
;

1050 
PktBuf
 **
pkts
;

1053 if(
xøw_DrivîSèã
 !
REGISTERED
)

1055 
	`¥ötk
("Driver doesÇot seemÅo beÑeady\n");

1060 if(
hndl
 !
h™dÀ
[0])

1062 
	`¥ötk
("Came with wrong handle\n");

1067 if(!
num
)

1069 
	`¥ötk
("Came with 0Öackets for sending\n");

1073 
tŸÆ
 = 0;

1077 
off£t
 = 
	`off£t_ö_∑ge
(
buf„r
);

1078 
fú°
 = (()
buf„r
 & 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

1079 
œ°
 = ((()
buf„r
 + 
Àngth
-1Ë& 
PAGE_MASK
Ë>> 
PAGE_SHIFT
;

1080 
ÆlocPages
 = (
œ°
-
fú°
)+1;

1082 
pkts
 = 
	`kmÆloc
–
ÆlocPages
 * ((
PktBuf
*)), 
GFP_KERNEL
);

1083 if(
pkts
 =
NULL
)

1085 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory forÖackets\n");

1089 
ˇchePages
 = 
	`kmÆloc
–(
ÆlocPages
 * ((
∑ge
*))), 
GFP_KERNEL
 );

1090 if–
ˇchePages
 =
NULL
 )

1092 
	`¥ötk
(
KERN_ERR
 "Error: unableÅoállocate memory for cachePages\n");

1093 
	`k‰ì
(
pkts
);

1097 
	`mem£t
(
ˇchePages
, 0, (
ÆlocPages
 * (
∑ge
*)) );

1098 
	`down_ªad
(&(
cuºít
->
mm
->
mm≠_£m
));

1099 
°©us
 = 
	`gë_u£r_∑ges
(
cuºít
,

1100 
cuºít
->
mm
,

1101 ()
buf„r
,

1102 
ÆlocPages
,

1103 
WRITE_TO_CARD
,

1105 
ˇchePages
,

1106 
NULL
);

1107 
	`up_ªad
(&
cuºít
->
mm
->
mm≠_£m
);

1108 if–
°©us
 < 
ÆlocPages
) {

1109 
	`¥ötk
(
KERN_ERR
 ".... Eº‹:Ñeque°edÖages=%d, gø¡edÖages=%d ....\n", 
ÆlocPages
, 
°©us
);

1111 
j
=0; j<
°©us
; j++)

1112 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1113 
	`k‰ì
(
pkts
);

1114 
	`k‰ì
(
ˇchePages
);

1119 
ÆlocPages
 = 
°©us
;

1121 
j
=0; j< 
ÆlocPages
; j++)

1123 
pbuf
 = 
	`kmÆloc
–((
PktBuf
)), 
GFP_KERNEL
);

1125 if(
pbuf
 =
NULL
) {

1126 
	`¥ötk
(
KERN_ERR
 "Insufficient Memory !!\n");

1127 
j
--; j>=0; j--)

1128 
	`k‰ì
(
pkts
[
j
]);

1129 
j
=0; j<
ÆlocPages
; j++)

1130 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1131 
	`k‰ì
(
pkts
);

1132 
	`k‰ì
(
ˇchePages
);

1137 
pkts
[
j
] = 
pbuf
;

1140 if(
j
==0) {

1141 if(
j
 =(
ÆlocPages
-1)) {

1142 
pbuf
->
size
 = 
Àngth
;

1145 
pbuf
->
size
 = ((
PAGE_SIZE
)-
off£t
);

1148 if(
j
 =(
ÆlocPages
-1)) {

1149 
pbuf
->
size
 = 
Àngth
-
tŸÆ
;

1151 
pbuf
->
size
 = (
PAGE_SIZE
);

1153 
pbuf
->
pktBuf
 = (*)
ˇchePages
[
j
];

1155 
pbuf
->
∑geOff£t
 = (
j
 =0Ë? 
off£t
 : 0;

1157 
pbuf
->
bufInfo
 = (*Ë
buf„r
 + 
tŸÆ
;

1158 
pbuf
->
∑geAddr
(*)
ˇchePages
[
j
];

1159 
pbuf
->
u£rInfo
 = 
Àngth
;

1161 
pbuf
->
Êags
 = 
PKT_ALL
;

1162 if(
j
 == 0)

1164 
pbuf
->
Êags
 |
PKT_SOP
;

1166 if(
j
 =(
ÆlocPages
 - 1) )

1168 
pbuf
->
Êags
 |
PKT_EOP
;

1170 
tŸÆ
 +
pbuf
->
size
;

1175 
ÆlocPages
 = 
j
;

1177 
ªsu…
 = 
	`DmaSídPages_Tx
 (
hndl
, 
pkts
,
ÆlocPages
);

1178 if(
ªsu…
 == -1)

1180 
j
=0; j<
ÆlocPages
; j++) {

1181 
	`∑ge_ˇche_ªÀa£
(
ˇchePages
[
j
]);

1183 
tŸÆ
 = 0;

1185 
	`k‰ì
(
ˇchePages
);

1187 
j
=0; j<
ÆlocPages
; j++) {

1188 
	`k‰ì
(
pkts
[
j
]);

1190 
	`k‰ì
(
pkts
);

1192  
tŸÆ
;

1193 
	}
}

1195 
	gCPU_LOADED
[16] =

1199 
	$xøw_dev_›í
 (
öode
 *
ö
, 
fûe
 *
fûp
)

1201 
˝u_id
 = 0;

1203 i‡(
xøw_DrivîSèã
 < 
INITIALIZED
)

1205 
	`¥ötk
 ("DriverÇot yetÑeady!\n");

1209 
˝u_id
 = 
	`gë_˝u
 ();

1210 i‡(
CPU_LOADED
[
˝u_id
] == 0)

1212 
CPU_LOADED
[
˝u_id
] = 1;

1216 
	`log_vîbo£
(
KERN_ERR
 "CPU %d isálreadyÜoaded,ÉxitÅhisÖrocess\n",

1217 
˝u_id
);

1220 
	`log_vîbo£
(
KERN_ERR
 "$$$$$$ CPU ID %d $$$$$$\n", 
˝u_id
);

1224 i‡(
xøw_U£rO≥n
)

1226 
	`¥ötk
 ("Deviceálready in use\n");

1227  -
EBUSY
;

1231 
xøw_U£rO≥n
++;

1236 
	}
}

1239 
	$xøw_dev_ªÀa£
 (
öode
 *
ö
, 
fûe
 *
fûp
)

1241 
˝u_id
 = 0;

1243 i‡(!
xøw_U£rO≥n
)

1246 
	`¥ötk
 ("DeviceÇot in use\n");

1247  -
EFAULT
;

1251 
xøw_U£rO≥n
--;

1254 
˝u_id
 = 
	`gë_˝u
 ();

1255 
CPU_LOADED
[
˝u_id
] = 0;

1256 
	`log_vîbo£
(
KERN_ERR
 "CPU %d i†ªÀa£d\n", 
˝u_id
);

1259 
	}
}

1262 
	$xøw_dev_io˘l
 (
fûe
 *
fûp
,

1263 
cmd
, 
¨g
)

1265 
ªtvÆ
 = 0;

1267 i‡(
xøw_DrivîSèã
 < 
INITIALIZED
)

1270 
	`¥ötk
 ("DriverÇot yetÑeady!\n");

1275 i‡(
	`_IOC_TYPE
 (
cmd
Ë!
XPMON_MAGIC
)

1276  -
ENOTTY
;

1277 i‡(
	`_IOC_NR
 (
cmd
Ë> 
XPMON_MAX_CMD
)

1278  -
ENOTTY
;

1281 i‡(
	`_IOC_DIR
 (
cmd
Ë& 
_IOC_READ
)

1282 i‡(!
	`ac˚ss_ok
 (
VERIFY_WRITE
, (*Ë
¨g
, 
	`_IOC_SIZE
 (
cmd
)))

1283  -
EFAULT
;

1284 i‡(
	`_IOC_DIR
 (
cmd
Ë& 
_IOC_WRITE
)

1285 i‡(!
	`ac˚ss_ok
 (
VERIFY_READ
, (*Ë
¨g
, 
	`_IOC_SIZE
 (
cmd
)))

1286  -
EFAULT
;

1288 
cmd
)

1291 
IGET_TRN_TXUSRINFO
:

1293 
cou¡
 = 0;

1295 
ex≥˘_cou¡
;

1296 if(
	`c›y_‰om_u£r
(&
ex≥˘_cou¡
,&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),()) != 0)

1298 
	`¥ötk
 ("##### ERROR in copy from usr #####");

1301 
cou¡
 < 
ex≥˘_cou¡
)

1303 
Buf„rInfo
 
buff
;

1304 i‡(0 !
	`gëBuffInfo
 (&
TxD⁄eQ
, &
buff
))

1308 i‡(
c›y_to_u£r


1309 (((
Buf„rInfo
 *Ë(((
FªeInfo
 *)
¨g
)->
buffLi°
Ë+ 
cou¡
), &
buff
,

1310  (
Buf„rInfo
)))

1312 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1316 
cou¡
++;

1318 if(
	`c›y_to_u£r
(&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),&
cou¡
,(())) != 0)

1320 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1325 
IGET_TRN_RXUSRINFO
:

1327 
cou¡
 = 0;

1328 
ex≥˘_cou¡
;

1330 if(
	`c›y_‰om_u£r
(&
ex≥˘_cou¡
,&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),()) != 0)

1332 
	`¥ötk
 ("##### ERROR in copy from usr #####");

1336 
cou¡
 < 
ex≥˘_cou¡
)

1338 
Buf„rInfo
 
buff
;

1339 i‡(0 !
	`gëBuffInfo
 (&
RxD⁄eQ
, &
buff
))

1343 i‡(
c›y_to_u£r


1344 (((
Buf„rInfo
 *Ë(((
FªeInfo
 *)
¨g
)->
buffLi°
Ë+ 
cou¡
), &
buff
,

1345  (
Buf„rInfo
)))

1347 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1350 
	`log_vîbo£
(" %s:buf„rAdd∏%x PktSizê%d", 
__func__
, 
u§Argumít
->
buffLi°
[
cou¡
].
buf„rAddªss
, u§Argumít->buffLi°[cou¡].
buffSize
);

1351 
cou¡
++;

1353 if(
	`c›y_to_u£r
(&(((
FªeInfo
 *)
¨g
)->
ex≥˘ed
),&
cou¡
,(())) != 0)

1355 
	`¥ötk
 ("##### ERROR in copyÅo usr #####");

1361 
	`¥ötk
 ("InvÆid comm™d %d\n", 
cmd
);

1362 
ªtvÆ
 = -1;

1366  
ªtvÆ
;

1367 
	}
}

1373 
ssize_t


1374 
	$xøw_dev_wrôe
 (
fûe
 *file,

1375 c⁄° 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
, 
loff_t
 * 
off£t
)

1377 
ªt_∑ck
=0;

1380 i‡((
RawTe°Mode
 & 
TEST_START
) &&

1381 (
RawTe°Mode
 & (
ENABLE_PKTCHK
 | 
ENABLE_LOOPBACK
)))

1382 
ªt_∑ck
 = 
	`DmaSëupTønsmô
(
h™dÀ
[0], 1, 
buf„r
, 
Àngth
);

1387  
ªt_∑ck
;

1388 
	}
}

1390 
ssize_t


1391 
	$xøw_dev_ªad
 (
fûe
 *file,

1392 
__u£r
 * 
buf„r
, 
size_t
 
Àngth
, 
loff_t
 * 
off£t
)

1394 
ªt_∑ck
=0;

1396 #ifde‡
BACK_PRESSURE


1397 if(
im∂_bp
 =
NO_BP
)

1399 
ªt_∑ck
 = 
	`DmaSëupRe˚ive
(
h™dÀ
[2],1,
buf„r
,
Àngth
);

1406  
ªt_∑ck
;

1407 
	}
}

1409 
__öô


1410 
	$øwd©a_öô
 ()

1412 
chrRë
;

1413 
dev_t
 
xøwDev
;

1414 
U£rPås
 
ufuncs
;

1415 
fûe_›î©i⁄s
 
xøwDevFûeOps
;

1418 
	`¥ötk
 (
KERN_INFO
 "%†Inô: In£πög Xûöx drivî i¿kî√l.\n", 
MYNAME
);

1420 
xøw_DrivîSèã
 = 
INITIALIZED
;

1421 
	`•ö_lock_öô
 (&
RawLock
);

1422 
	`•ö_lock_öô
 (&(
TxD⁄eQ
.
iLock
));

1423 
	`•ö_lock_öô
 (&(
RxD⁄eQ
.
iLock
));

1426 
	`m¶ìp
 (5);

1429 
chrRë
 = 
	`Æloc_chrdev_ªgi⁄
 (&
xøwDev
, 0, 1, 
DEV_NAME
);

1430 i‡(
	`IS_ERR
 ((*Ë
chrRë
))

1432 
	`log_n‹mÆ
 (
KERN_ERR
 "Errorállocating char deviceÑegion\n");

1438 
xøwCdev
 = 
	`cdev_Æloc
 ();

1439 i‡(
	`IS_ERR
 (
xøwCdev
))

1441 
	`log_n‹mÆ
 (
KERN_ERR
 "AllocÉrrorÑegistering device driver\n");

1442 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1447 
xøwDevFûeOps
.
ow√r
 = 
THIS_MODULE
;

1448 
xøwDevFûeOps
.
›í
 = 
xøw_dev_›í
;

1449 
xøwDevFûeOps
.
ªÀa£
 = 
xøw_dev_ªÀa£
;

1450 
xøwDevFûeOps
.
u∆ocked_io˘l
 = 
xøw_dev_io˘l
;

1451 
xøwDevFûeOps
.
wrôe
 = 
xøw_dev_wrôe
;

1452 
xøwDevFûeOps
.
ªad
 = 
xøw_dev_ªad
;

1453 
xøwCdev
->
ow√r
 = 
THIS_MODULE
;

1454 
xøwCdev
->
›s
 = &
xøwDevFûeOps
;

1455 
xøwCdev
->
dev
 = 
xøwDev
;

1456 
chrRë
 = 
	`cdev_add
 (
xøwCdev
, 
xøwDev
, 1);

1457 i‡(
chrRë
 < 0)

1459 
	`log_n‹mÆ
 (
KERN_ERR
 "AddÉrrorÑegistering device driver\n");

1460 
	`cdev_dñ
(
xøwCdev
);

1461 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1467 i‡(!
	`IS_ERR
 ((*Ë
chrRë
))

1469 
	`¥ötk
 (
KERN_INFO
 "DeviceÑegistered with majorÇumber %d\n",

1470 
	`MAJOR
 (
xøwDev
));

1474 
xøw_DrivîSèã
 = 
INITIALIZED
;

1476 i‡(
xøw_DrivîSèã
 < 
POLLING
)

1478 
	`•ö_lock_bh
 (&
RawLock
);

1479 
	`¥ötk
 ("Calling DmaRegister onÉngine %dánd %d\n",

1480 
ENGINE_TX
, 
ENGINE_RX
);

1481 
xøw_DrivîSèã
 = 
REGISTERED
;

1483 
ufuncs
.
U£rInô
 = 
myInô
;

1484 
ufuncs
.
U£rPutPkt
 = 
myPutTxPkt
;

1485 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1486 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1487 #ifde‡
PM_SUPPORT


1488 
ufuncs
.
U£rSu•íd_E¨ly
 = 
NULL
;

1489 
ufuncs
.
U£rSu•íd_L©e
 = 
NULL
;

1490 
ufuncs
.
U£rResume
 = 
NULL
;

1492 
ufuncs
.
¥ivD©a
 = 0x54545454;

1493 #ifde‡
RAW_ETH


1494 
ufuncs
.
mode
 = 
RAWETHERNET_MODE
;

1496 
ufuncs
.
mode
 = 
PERFORMANCE_MODE
;

1498 
	`•ö_u∆ock_bh
 (&
RawLock
);

1500 i‡((
h™dÀ
[0] =

1501 
	`DmaRegi°î
 (
ENGINE_TX
, 
MYBAR
, &
ufuncs
, 
BUFSIZE
)Ë=
NULL
)

1503 
	`¥ötk
 ("Regi°î f‹Éngöê%d faûed. St›pög.\n", 
ENGINE_TX
);

1504 
	`•ö_lock_bh
 (&
RawLock
);

1505 
xøw_DrivîSèã
 = 
UNREGISTERED
;

1506 
	`•ö_u∆ock_bh
 (&
RawLock
);

1507 
	`cdev_dñ
(
xøwCdev
);

1508 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1511 
	`¥ötk
 ("H™dÀ f‹Éngöê%d i†%p\n", 
ENGINE_TX
, 
h™dÀ
[0]);

1513 
	`•ö_lock_bh
 (&
RawLock
);

1514 
ufuncs
.
U£rInô
 = 
myInô
;

1515 
ufuncs
.
U£rPutPkt
 = 
myPutRxPkt
;

1516 
ufuncs
.
U£rGëPkt
 = 
myGëRxPkt
;

1517 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1518 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1519 #ifde‡
PM_SUPPORT


1520 
ufuncs
.
U£rSu•íd_E¨ly
 = 
NULL
;

1521 
ufuncs
.
U£rSu•íd_L©e
 = 
NULL
;

1522 
ufuncs
.
U£rResume
 = 
NULL
;

1524 
ufuncs
.
¥ivD©a
 = 0x54545456;

1525 #ifde‡
RAW_ETH


1526 
ufuncs
.
mode
 = 
RAWETHERNET_MODE
;

1528 
ufuncs
.
mode
 = 
PERFORMANCE_MODE
;

1530 
	`•ö_u∆ock_bh
 (&
RawLock
);

1532 i‡((
h™dÀ
[2] =

1533 
	`DmaRegi°î
 (
ENGINE_RX
, 
MYBAR
, &
ufuncs
, 
BUFSIZE
)Ë=
NULL
)

1535 
	`¥ötk
 ("Regi°î f‹Éngöê%d faûed. St›pög.\n", 
ENGINE_RX
);

1536 
	`•ö_lock_bh
 (&
RawLock
);

1537 
xøw_DrivîSèã
 = 
UNREGISTERED
;

1538 
	`•ö_u∆ock_bh
 (&
RawLock
);

1539 
	`cdev_dñ
(
xøwCdev
);

1540 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwDev
, 1);

1543 
	`¥ötk
 ("H™dÀ f‹Éngöê%d i†%p\n", 
ENGINE_RX
, 
h™dÀ
[2]);

1550 
	}
}

1552 
__exô


1553 
	$øwd©a_˛ónup
 ()

1555 
i
;

1560 
	`XIo_Out32
 (
TXb¨ba£
 + 
TX_CONFIG_ADDRESS
, 0);

1562 
	`XIo_Out32
 (
TXb¨ba£
 + 
RX_CONFIG_ADDRESS
, 0);

1563 #ifde‡
RAW_ETH


1564 
	`mdñay
(1);

1566 
	`XIo_Out32
(
TXb¨ba£
+(
u32
)(
NW_PATH_OFFSET
+
XXGE_TC_OFFSET
), 0x80000000);

1567 
	`mdñay
(1);

1569 
	`XIo_Out32
(
TXb¨ba£
+(
u32
)(
NW_PATH_OFFSET
+
XXGE_RCW1_OFFSET
), 0x80000000);

1570 
	`mdñay
(1);

1573 
	`¥ötk
 (
KERN_INFO
 "%s: Uƒegi°îög Xûöx drivî from kî√l.\n", 
MYNAME
);

1574 i‡(
TxBufC¡
 !
RxBufC¡
)

1576 
	`¥ötk
 ("%s: Buf„r†Tønsmôãd %u Re˚ived %u\n", 
MYNAME
, 
TxBufC¡
,

1577 
RxBufC¡
);

1579 
	`mdñay
 (1);

1581 #ifde‡
FIFO_EMPTY_CHECK


1582 
	`DmaFifoEm±yWaô
(
MYHANDLE
,
DIR_TYPE_S2C
);

1584 
	`mdñay
(
STABILITY_WAIT_TIME
);

1586 
	`DmaUƒegi°î
 (
h™dÀ
[0]);

1587 #ifde‡
FIFO_EMPTY_CHECK


1588 
	`DmaFifoEm±yWaô
(
MYHANDLE
,
DIR_TYPE_C2S
);

1590 
	`mdñay
(
STABILITY_WAIT_TIME
);

1592 
	`DmaUƒegi°î
 (
h™dÀ
[2]);

1594 
	`PrötSumm¨y
 ();

1596 i‡(
xøwCdev
 !
NULL
)

1598 
	`¥ötk
 ("Unregistering char device driver\n");

1599 
	`cdev_dñ
 (
xøwCdev
);

1600 
	`uƒegi°î_chrdev_ªgi⁄
 (
xøwCdev
->
dev
, 1);

1603 
	`mdñay
 (1000);

1606 
	`•ö_lock_bh
 (&
RawLock
);

1607 
	`¥ötk
 ("Freeing user buffers\n");

1608 
i
 = 0; i < 
TxBufs
.
TŸÆNum
; i++)

1610 
	`‰ì_∑ge
 ((Ë(
TxBufs
.
‹igVA
[
i
]));

1611 
i
 = 0; i < 
RxBufs
.
TŸÆNum
; i++)

1613 
	`‰ì_∑ge
 ((Ë(
RxBufs
.
‹igVA
[
i
]));

1614 
	`•ö_u∆ock_bh
 (&
RawLock
);

1615 
	}
}

1617 
moduÀ_öô
 (
øwd©a_öô
);

1618 
moduÀ_exô
 (
øwd©a_˛ónup
);

1620 
MODULE_AUTHOR
 ("Xilinx, Inc.");

1621 
MODULE_DESCRIPTION
 (
DRIVER_DESCRIPTION
);

1622 
MODULE_LICENSE
 ("GPL");

	@xrawdata1/xrawdata1.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 
moduÀ
 
__this_moduÀ


8 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

9 .
«me
 = 
KBUILD_MODNAME
,

10 .
	göô
 = 
öô_moduÀ
,

11 #ifde‡
CONFIG_MODULE_UNLOAD


12 .
	gexô
 = 
˛ónup_moduÀ
,

14 .
	g¨ch
 = 
MODULE_ARCH_INIT
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__u£d


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@xxgbeth0/xbasic_types.c

68 
	~<löux/moduÀ.h
>

69 
	~"xbasic_ty≥s.h
"

82 
	gXAs£πSètus
;

89 
	gXWaôInAs£π
 = 
TRUE
;

92 
XAs£πCÆlback
 
	gXAs£πCÆlbackRoutöe
 = (XAs£πCÆlbackË
NULL
;

111 
	$XAs£π
(*
Fûe
, 
Löe
)

114 i‡(
XAs£πCÆlbackRoutöe
 !
NULL
) {

115 (*
XAs£πCÆlbackRoutöe
Ë(
Fûe
, 
Löe
);

121 
XWaôInAs£π
) {

123 
	}
}

138 
	$XAs£πSëCÆlback
(
XAs£πCÆlback
 
Routöe
)

140 
XAs£πCÆlbackRoutöe
 = 
Routöe
;

141 
	}
}

158 
	$XNuŒH™dÀr
(*
NuŒP¨amëî
)

160 
	}
}

	@xxgbeth0/xgadapter.c

164 
	~<löux/vîsi⁄.h
>

165 
	~<löux/pci.h
>

166 
	~<löux/moduÀ.h
>

167 
	~<löux/kî√l.h
>

168 
	~<löux/öô.h
>

169 
	~<löux/mm.h
>

170 
	~<löux/√tdevi˚.h
>

171 
	~<löux/ëhîdevi˚.h
>

172 
	~<löux/mii.h
>

173 
	~<löux/dñay.h
>

174 
	~<löux/dma-m≠pög.h
>

175 
	~<asm/io.h
>

176 
	~<löux/ëhtoﬁ.h
>

177 
	~<löux/vmÆloc.h
>

178 
	~<löux/•ölock.h
>

180 
	~"xgad≠ãr.h
"

181 
	~"xxgëhî√t.h
"

182 
	~"xdma_u£r.h
"

201 #ifde‡
USE_NW_PATH0


202 
	#TX_ENGINE
 0

	)

203 
	#RX_ENGINE
 32

	)

204 
	#NW_PATH_OFFSET
 0xB000

	)

207 #ifde‡
USE_NW_PATH1


208 
	#TX_ENGINE
 1

	)

209 
	#RX_ENGINE
 33

	)

210 
	#NW_PATH_OFFSET
 0xC000

	)

215 
	#DESIGN_MODE_ADDRESS
 0x9004

	)

216 
	#PERF_DESIGN_MODE
 0x00000000

	)

218 
	#UNINITIALIZED
 0

	)

219 
	#INITIALIZED_TOP
 1

	)

220 
	#INITIALIZED_FIRST
 2

	)

223 
	#INITIALIZED_SECOND
 3

	)

226 
	#READY
 4

	)

227 #unde‡
UNREGISTERING


228 
	#UNREGISTERING
 5

	)

229 #ifde‡
PM_SUPPORT


230 
	#PM_SUSPEND
 6

	)

233 
	#TEMAC_BAR
 0

	)

234 
	#TEMAC_OFFSET
 0x0

	)

235 
	#TEMAC_SIZE
 0x400

	)

236 
	#TEMAC_PKTSIZE
 1600

	)

239 
	#XXGE_AUTOSTRIPPING
 1

	)

246 
	#DRIVER_NAME
 "xxgbëh_drivî"

	)

247 
	#DRIVER_DESCRIPTION
 "Xûöx 10 Gigabô Ethî√à(XGEMACËLöux drivî"

	)

248 
	#DRIVER_VERSION
 "1.0"

	)

251 
	#TX_TIMEOUT
 (3*
HZ
Ë

	)

256 
	#ALIGNMENT_RECV
 32

	)

257 
	#BUFFER_ALIGNRECV
(
adr
Ë((
ALIGNMENT_RECV
 - ((
u32
Ëadr)Ë% ALIGNMENT_RECV)

	)

260 
	eDUPLEX
 { 
	mUNKNOWN_DUPLEX
, 
	mHALF_DUPLEX
, 
	mFULL_DUPLEX
 } 
	tDUPLEX
;

265 
√t_devi˚
 *
	gndev
 = 
NULL
;

270 
PktBuf
 
	gPkt
[
MAX_SKB_FRAGS
];

279 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 29)

280 
xíë_£t_√tdev_›s
(
√t_devi˚
 *, 
√t_devi˚_›s
 *);

282 #ifde‡
X86_64


283 
xã√t_öô_bŸtom
(
u64
 , u64 );

284 
myRxGëPkt
(*, 
PktBuf
 *, , , 
u64
);

285 
myRxPutPkt
(*, 
PktBuf
 *, , 
u64
);

286 
myTxPutPkt
(*, 
PktBuf
 *, , 
u64
);

287 
mySëSèã
(*, 
U£rSèã
 *, 
u64
);

288 
myGëSèã
(*, 
U£rSèã
 *, 
u64
);

289 #ifde‡
PM_SUPPORT


290 
mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

291 
mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

292 
mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

295 
xã√t_öô_bŸtom
(, );

296 
myRxGëPkt
(*, 
PktBuf
 *, , , );

297 
myRxPutPkt
(*, 
PktBuf
 *, , );

298 
myTxPutPkt
(*, 
PktBuf
 *, , );

299 
mySëSèã
(*, 
U£rSèã
 *, );

300 
myGëSèã
(*, 
U£rSèã
 *, );

301 #ifde‡
PM_SUPPORT


302 
mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

303 
mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

304 
mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

312 
xíë_Síd_öã∫Æ
(
sk_buff
 *, 
√t_devi˚
 *);

314 #ifde‡
DEBUG_VERBOSE


315 
ªad_xgemac
();

316 
di•_‰ag
(*, 
u32
);

323 #ifde‡
X86_64


324 
	s√t_loˇl
 {

325 
li°_hód
 
	mrcv
;

326 
li°_hód
 
	mxmô
;

328 
√t_devi˚
 *
	mndev
;

329 
√t_devi˚_°©s
 
	m°©s
;

330 
timî_li°
 
	mphy_timî
;

332 
u32
 
	mödex
;

333 
u32
 
	mxgmii_addr
;

334 
u64
 
	mvîsi⁄Reg
;

336 * 
	mTxH™dÀ
;

337 * 
	mRxH™dÀ
;

339 
	mDrivîSèã
;

340 #ifde‡
PM_SUPPORT


341 
	mDrivîSèã_bef‹eSu•
;

348 
XXgEthî√t
 
	mEmac
;

350 
	mmax_‰ame_size
;

352 
sk_buff
 *
	mde„ºed_skb
;

355 
	mtx_pkts
;

356 
	mrx_pkts
;

357 
	mmax_‰ags_ö_a_∑ckë
;

358 
	mªÆignmíts
;

359 
	mloˇl_„©uªs
;

360 #i‡! 
XXGE_AUTOSTRIPPING


361 
	m°rùpög
;

365 
	s√t_loˇl
 {

366 
li°_hód
 
	mrcv
;

367 
li°_hód
 
	mxmô
;

369 
√t_devi˚
 *
	mndev
;

370 
√t_devi˚_°©s
 
	m°©s
;

371 
timî_li°
 
	mphy_timî
;

373 
u32
 
	mödex
;

374 
u32
 
	mxgmii_addr
;

375 
u32
 
	mvîsi⁄Reg
;

377 * 
	mTxH™dÀ
;

378 * 
	mRxH™dÀ
;

380 
	mDrivîSèã
;

381 #ifde‡
PM_SUPPORT


382 
	mDrivîSèã_bef‹eSu•
;

389 
XXgEthî√t
 
	mEmac
;

391 
	mmax_‰ame_size
;

393 
sk_buff
 *
	mde„ºed_skb
;

396 
	mtx_pkts
;

397 
	mrx_pkts
;

398 
	mmax_‰ags_ö_a_∑ckë
;

399 
	mªÆignmíts
;

400 
	mloˇl_„©uªs
;

401 #i‡! 
XXGE_AUTOSTRIPPING


402 
	m°rùpög
;

415 
	gxíë_ëhtoﬁ_g°rögs_°©s
[][
ETH_GSTRING_LEN
] =

428 
	#XENET_STATS_LEN
 (
xíë_ëhtoﬁ_g°rögs_°©s
Ë/ 
ETH_GSTRING_LEN


	)

430 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 29)

431 
√t_devi˚_›s
 
	gxíë_√tdev_›s
;

442 
•ölock_t
 
	gXTE_•ölock
;

445 
LIST_HEAD
(
ª˚ivedQueue
);

446 
•ölock_t
 
	gª˚ivedQueueSpö
;

448 
LIST_HEAD
(
£¡Queue
);

449 
•ölock_t
 
	g£¡QueueSpö
;

459 
ölöe
 
	$_XXgEthî√t_Sèπ
(
XXgEthî√t
 *
In°™˚På
)

461 
	`•ö_lock_bh
(&
XTE_•ölock
);

462 
	`XXgEthî√t_Sèπ
(
In°™˚På
);

463 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

464 
	}
}

466 
ölöe
 
	$_XXgEthî√t_St›
(
XXgEthî√t
 *
In°™˚På
)

468 
	`•ö_lock_bh
(&
XTE_•ölock
);

469 
	`XXgEthî√t_St›
(
In°™˚På
);

470 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

471 
	}
}

473 
ölöe
 
	$_XXgEthî√t_Re£t
(
XXgEthî√t
 *
In°™˚På
)

475 
	`•ö_lock_bh
(&
XTE_•ölock
);

476 
	`XXgEthî√t_Re£t
(
In°™˚På
);

477 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

478 
	}
}

480 
ölöe
 
	$_XXgEthî√t_SëMacAddªss
(
XXgEthî√t
 *
In°™˚På
,

481 *
AddªssPå
)

483 
°©us
;

485 
	`•ö_lock_bh
(&
XTE_•ölock
);

486 
°©us
 = 
	`XXgEthî√t_SëMacAddªss
(
In°™˚På
, 
AddªssPå
);

487 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

489  
°©us
;

490 
	}
}

492 
ölöe
 
	$_XXgEthî√t_GëMacAddªss
(
XXgEthî√t
 *
In°™˚På
,

493 *
AddªssPå
)

495 
	`•ö_lock_bh
(&
XTE_•ölock
);

496 
	`XXgEthî√t_GëMacAddªss
(
In°™˚På
, 
AddªssPå
);

497 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

498 
	}
}

500 
ölöe
 
	$_XXgEthî√t_SëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

502 
°©us
;

504 
	`•ö_lock_bh
(&
XTE_•ölock
);

505 
°©us
 = 
	`XXgEthî√t_SëO±i⁄s
(
In°™˚På
, 
O±i⁄s
);

506 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

508  
°©us
;

509 
	}
}

511 
ölöe
 
	$_XXgEthî√t_CÀ¨O±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

513 
°©us
;

515 
	`•ö_lock_bh
(&
XTE_•ölock
);

516 
°©us
 = 
	`XXgEthî√t_CÀ¨O±i⁄s
(
In°™˚På
, 
O±i⁄s
);

517 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

519  
°©us
;

520 
	}
}

522 
ölöe
 
	$_XXgEthî√t_PhyRód
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

523 
u32
 
Regi°îNum
, 
u16
 *
PhyD©aPå
)

525 
	`•ö_lock_bh
(&
XTE_•ölock
);

526 
	`XXgEthî√t_PhyRód
(
In°™˚På
, 
PhyAddªss
, 
Regi°îNum
, 
PhyD©aPå
);

527 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

528 
	}
}

530 
ölöe
 
	$_XXgEthî√t_PhyWrôe
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

531 
u32
 
Regi°îNum
, 
u16
 
PhyD©a
)

533 
	`•ö_lock_bh
(&
XTE_•ölock
);

534 
	`XXgEthî√t_PhyWrôe
(
In°™˚På
, 
PhyAddªss
, 
Regi°îNum
, 
PhyD©a
);

535 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

536 
	}
}

544 
	$ª£t
(
√t_devi˚
 *
dev
, 
u32
 
löe_num
)

547 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

548 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

550 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

553 
u32
 
O±i⁄s
;

554 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


555 
u32
 
ª£t_˙t
 = 0;

558 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthernet:Ñesets (#%u) fromádapter codeÜine %d\n",

559 
dev
->
«me
, ++
ª£t_˙t
, 
löe_num
);

562 
	`√tif_°›_queue
(
dev
);

565 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

572 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

575 
	`_XXgEthî√t_Re£t
(&
Õ
->
Emac
);

579 
	`mdñay
(2000);

586 (Ë
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
dev
->
dev_addr
);

588 (Ë
	`_XXgEthî√t_SëO±i⁄s
(&
Õ
->
Emac
, 
O±i⁄s
);

589 (Ë
	`_XXgEthî√t_CÀ¨O±i⁄s
(&
Õ
->
Emac
, ~
O±i⁄s
);

590 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

591 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthî√t: O±i⁄s: 0x%x\n", 
dev
->
«me
, 
O±i⁄s
);

594 i‡(
Õ
->
de„ºed_skb
) {

595 
	`dev_k‰ì_skb_™y
(
Õ
->
de„ºed_skb
);

596 
Õ
->
de„ºed_skb
 = 
NULL
;

597 
Õ
->
°©s
.
tx_îr‹s
++;

607 
	`_XXgEthî√t_Sèπ
(&
Õ
->
Emac
);

610 
	`√tif_wake_queue
(
dev
);

611 
	}
}

613 #ifdef 
MDIO_CHANGES


617 
	$gë_phy_°©us
(
√t_devi˚
 *
dev
, 
DUPLEX
 * 
du∂ex
, *
lökup
)

619 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

620 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

622 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

625 
u16
 
ªg
;

627 *
du∂ex
 = 
FULL_DUPLEX
;

629 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
XXGE_MDIO_REGISTER_ADDRESS
, &
ªg
);

630 #ifde‡
MDIO_CHANGES


631 *
lökup
 = 
ªg
 & 
XXGE_MDIO_PHY_LINK_UP_MASK
;

634 *
lökup
 = 1;

638 
	}
}

647 
	$pﬁl_gmii
(
d©a
)

649 #ifdef 
MDIO_CHANGES


650 
√t_devi˚
 *
dev
;

651 
√t_loˇl
 *
Õ
;

652 
DUPLEX
 
phy_du∂ex
;

653 
phy_ˇºõr
;

654 
√tif_ˇºõr
;

656 
dev
 = (
√t_devi˚
 *Ë
d©a
;

658 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

659 
Õ
 = 
	`√tdev_¥iv
(
dev
);

661 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

667 
	`log_vîbo£
(
KERN_ERR
 "poll_gmii\n");

668 i‡(
	`gë_phy_°©us
(
dev
, &
phy_du∂ex
, &
phy_ˇºõr
)) {

669 
	`log_n‹mÆ
(
KERN_ERR
 "%s: XXgEthernet:ÅerminatingÜink monitoring.\n",

670 
dev
->
«me
);

673 
√tif_ˇºõr
 = 
	`√tif_ˇºõr_ok
(
dev
) != 0;

674 i‡(
phy_ˇºõr
 !
√tif_ˇºõr
) {

675 i‡(
phy_ˇºõr
) {

676 
	`log_n‹mÆ
(
KERN_INFO


678 
dev
->
«me
);

679 
	`√tif_ˇºõr_⁄
(
dev
);

683 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthernet: PHY Link carrierÜost.\n",

684 
dev
->
«me
);

685 
	`√tif_ˇºõr_off
(
dev
);

690 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

691 
	`add_timî
(&
Õ
->
phy_timî
);

693 
	}
}

696 #ifde‡
DEBUG_VERBOSE


697 
	$ªad_xgemac
(
IoAddrTemac
)

699 
	`¥ötk
("RCW0 = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RCW0_OFFSET
));

700 
	`¥ötk
("RCW1 = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RCW1_OFFSET
));

701 
	`¥ötk
("TC = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_TC_OFFSET
));

702 
	`¥ötk
("CAP = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_CAP_OFFSET
));

703 
	`¥ötk
("MC0 = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_CFG0_OFFSET
));

704 
	`¥ötk
("MC1 = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_CFG1_OFFSET
));

705 
	`¥ötk
("MTX = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_TX_DATA_OFFSET
));

706 
	`¥ötk
("MRX = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_RX_DATA_OFFSET
));

708 
	`¥ötk
("RcvdByãsLowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXBL_OFFSET
));

709 
	`¥ötk
("RcvdByãsUµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXBU_OFFSET
));

710 
	`¥ötk
("SítByãsLowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_TXBL_OFFSET
));

711 
	`¥ötk
("SítByãsUµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_TXBU_OFFSET
));

712 
	`¥ötk
("FCS Eº‹Lowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXFCSERL_OFFSET
));

713 
	`¥ötk
("FCS Eº‹Uµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXFCSERU_OFFSET
));

714 
	`¥ötk
("L/T Eº‹Lowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXLTERL_OFFSET
));

715 
	`¥ötk
("L/T Eº‹Uµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXLTERU_OFFSET
));

716 
	}
}

722 
	$xíë_›í
(
√t_devi˚
 *
dev
)

724 
√t_loˇl
 *
Õ
;

725 
u32
 
O±i⁄s
;

727 
	`log_n‹mÆ
(
KERN_INFO
 "calling xenet_open\n");

734 
	`√tif_°›_queue
(
dev
);

736 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

737 
Õ
 = 
	`√tdev_¥iv
(
dev
);

739 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

742 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

744 i‡(
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
dev
->
dev_addr
Ë!
XST_SUCCESS
) {

745 
	`¥ötk
(
KERN_ERR
 "%s: xgbeth_axi: couldÇot set MACáddress.\n",

746 
dev
->
«me
);

747  -
EIO
;

756 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

757 
O±i⁄s
 |
XXGE_FLOW_CONTROL_OPTION
;

758 #ifde‡
ENABLE_JUMBO


759 
O±i⁄s
 |
XXGE_JUMBO_OPTION
;

761 
O±i⁄s
 |
XXGE_TRANSMITTER_ENABLE_OPTION
;

762 
O±i⁄s
 |
XXGE_RECEIVER_ENABLE_OPTION
;

763 #i‡
XXGE_AUTOSTRIPPING


764 
O±i⁄s
 |
XXGE_FCS_STRIP_OPTION
;

767 (Ë
	`_XXgEthî√t_SëO±i⁄s
(&
Õ
->
Emac
, 
O±i⁄s
);

768 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

769 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthî√t: O±i⁄s: 0x%x\n", 
dev
->
«me
, 
O±i⁄s
);

771 
	`mdñay
(2000);

774 
	`_XXgEthî√t_Sèπ
(&
Õ
->
Emac
);

777 
	`√tif_°¨t_queue
(
dev
);

779 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

780 
Õ
->
phy_timî
.
d©a
 = (Ë
dev
;

781 
Õ
->
phy_timî
.
fun˘i⁄
 = &
pﬁl_gmii
;

782 
	`öô_timî
(&
Õ
->
phy_timî
);

783 
	`add_timî
(&
Õ
->
phy_timî
);

785 
	`INIT_LIST_HEAD
(&
£¡Queue
);

786 
	`INIT_LIST_HEAD
(&
ª˚ivedQueue
);

788 
	`•ö_lock_öô
(&
£¡QueueSpö
);

789 
	`•ö_lock_öô
(&
ª˚ivedQueueSpö
);

793 
	}
}

795 
	$xíë_˛o£
(
√t_devi˚
 *
dev
)

797 
√t_loˇl
 *
Õ
;

799 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_close:\n");

801 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

802 
Õ
 = 
	`√tdev_¥iv
(
dev
);

804 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

808 
	`dñ_timî_sync
(&
Õ
->
phy_timî
);

810 
	`√tif_°›_queue
(
dev
);

812 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

815 
	}
}

817 
√t_devi˚_°©s
 *
	$xíë_gë_°©s
(
√t_devi˚
 *
dev
)

819 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

820 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

822 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

826 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_get_stats: \n");

828  &(
Õ
->
°©s
);

829 
	}
}

831 
	$xíë_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

833 
u32
 
SëMtu
=0;

834 #ifde‡
CONFIG_XILINX_GIGE_VLAN


835 
hód_size
 = 
XXGE_HDR_VLAN_SIZE
;

837 
hód_size
 = 
XXGE_HDR_SIZE
;

840 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

841 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

843 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

847 
max_‰ame
 = 
√w_mtu
 + 
hód_size
 + 
XXGE_TRL_SIZE
;

848 
mö_‰ame
 = 1 + 
hód_size
 + 
XXGE_TRL_SIZE
;

850 
	`log_vîbo£
(
KERN_INFO
 "xenet_change_mtu:\n");

852 i‡((
max_‰ame
 < 
mö_‰ame
Ë|| (max_‰amê> 
Õ
->
max_‰ame_size
))

853  -
EINVAL
;

855 
dev
->
mtu
 = 
√w_mtu
;

864 
	}
}

866 
	$xíë_£t_mac_addªss
(
√t_devi˚
 *
dev
, * 
±r
)

869 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

870 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

872 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

875 
sockaddr
 *
addr
 = 
±r
;

877 i‡(
	`√tif_ru¬ög
(
dev
))

879 
	`log_n‹mÆ
(
KERN_INFO
 "set_mac_address: Interface should be down\n");

880  -
EBUSY
;

883 i‡(!
	`is_vÆid_ëhî_addr
(
addr
->
ß_d©a
))

885 
	`log_n‹mÆ
(
KERN_INFO
 "set_mac_address: Invalid Ethernetáddress\n");

886  -
EADDRNOTAVAIL
;

889 
	`mem˝y
(
dev
->
dev_addr
, 
addr
->
ß_d©a
, dev->
addr_Àn
);

891 #ifde‡
DEBUG_VERBOSE


893 
i
;

894 
	`log_vîbo£
(
KERN_INFO
 "Setting MACáddress: ");

895 
i
=0; i<6; i++)

896 
	`¥ötk
("%x ", 
dev
->
dev_addr
[
i
]);

897 
	`¥ötk
("\n");

901 i‡(
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
dev
->
dev_addr
Ë!
XST_SUCCESS
) {

902 
	`¥ötk
(
KERN_ERR
 "xgbeth_axi: couldÇot set MACáddress.\n");

903  -
EIO
;

907 
	}
}

910 #ifde‡
DEBUG_VERBOSE


911 
	$di•_‰ag
(* 
addr
, 
u32
 
Àn
)

913 
i
;

915 
i
=0; i<
Àn
; i++)

917 
	`¥ötk
("%02x ", 
addr
[
i
]);

918 if(!((
i
+1)%4))

919 
	`¥ötk
(", ");

920 if(!((
i
+1)%16))

921 
	`¥ötk
("\n");

923 
	`¥ötk
("\n");

924 
	}
}

927 #ifde‡
DEBUG_VERBOSE


928 
	$ªad_skb_öfo
(
sk_buff
 *
skb
)

930 
	`¥ötk
("Ródög skb %x\n", (
u32
Ë
skb
);

934 
	`¥ötk
("A˘uÆ d©®Àngth %d\n", (
u32
)(
skb
->
Àn
));

935 
	`¥ötk
("D©®Àngth %d\n", (
u32
)(
skb
->
d©a_Àn
));

936 
	`¥ötk
("LökÜayî hódîÜígth %d\n", (
u32
)(
skb
->
mac_Àn
));

937 
	`¥ötk
("csum fõld %x\n", (
u32
)(
skb
->
csum
));

940 
	`¥ötk
("PackëÅy≥ %x\n", (
u32
)(
skb
->
pkt_ty≥
));

941 
	`¥ötk
("ù_summed %d\n", (
u32
)(
skb
->
ù_summed
));

942 
	`¥ötk
("PrŸocﬁ %x\n", (
u32
)(
skb
->
¥Ÿocﬁ
));

943 
	`¥ötk
("Truesizê%d\n", (
u32
)(
skb
->
åuesize
));

944 
	`¥ötk
("Buf„∏hódÖå %x\n", (
u32
)(
skb
->
hód
));

945 
	`¥ötk
("Buf„∏d©®±∏%x\n", (
u32
)(
skb
->
d©a
));

946 
	`¥ötk
("Buf„∏èûÖå %x\n", (
u32
)(
skb
->
èû
));

947 
	`¥ötk
("Buf„∏ídÖ∏%x\n", (
u32
)(
skb
->
íd
));

948 
	}
}

956 
	$xíë_Síd_öã∫Æ
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

958 
√t_loˇl
 *
Õ
;

959 
ªsu…
;

960 
tŸÆ_‰ags
;

961 
size_t
 
Àn
;

962 
skb_‰ag_t
 *
‰ag
;

963 * 
vút_addr
;

964 
i
;

966 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

967 
Õ
 = 
	`√tdev_¥iv
(
dev
);

969 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

972 if(
Õ
->
DrivîSèã
 !
READY
Ë 
XST_FAILURE
;

973 
	`log_vîbo£
(
KERN_INFO
 "Camêö wôh skb %x skb->d©®%x\n", (
u32
Ë
skb
, (u32Ëskb->
d©a
);

974 #ifde‡
DEBUG_VERBOSE


975 
	`ªad_xgemac
(
Õ
->
Emac
.
C⁄fig
.
Ba£Addªss
);

979 
tŸÆ_‰ags
 = 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
 + 1;

980 
	`log_vîbo£
(
KERN_INFO
 "Sídög %d føgmíts\n", 
tŸÆ_‰ags
);

983 i‡(
Õ
->
max_‰ags_ö_a_∑ckë
 < 
tŸÆ_‰ags
) {

984 
Õ
->
max_‰ags_ö_a_∑ckë
 = 
tŸÆ_‰ags
;

986 
Õ
->
°©s
.
tx_∑ckës
++;

989 
Àn
 = 
	`skb_hódÀn
(
skb
);

990 
Õ
->
°©s
.
tx_byãs
 +
skb
->
Àn
;

992 
Pkt
[0].
pktBuf
 = 
skb
->
d©a
;

993 
Pkt
[0].
bufInfo
 = (*)
skb
;

994 
Pkt
[0].
size
 = 
Àn
;

995 
Pkt
[0].
Êags
 = 
PKT_SOP
;

996 
Pkt
[0].
u£rInfo
 = 
skb
->
Àn
;

998 #ifde‡
DEBUG_VERBOSE


999 
	`ªad_skb_öfo
(
skb
);

1001 
	`log_n‹mÆ
("TXÖkt csum field contains %02x %02x\n",

1002 (
u8
)(
skb
->
d©a
[0x32]), (u8)(skb->data[0x33]));

1005 #ifde‡
DEBUG_VERBOSE


1006 
	`log_vîbo£
("TX føg 0ÖkàÀ¿i†%d, fœg†%x\n", 
Pkt
[0].
size
, Pkt[0].
Êags
);

1007 
	`log_vîbo£
(
KERN_INFO
 "Fragment 0:Üen is %d, buf is %x\n",

1008 
Àn
, (
u32
Ë(
skb
->
d©a
));

1009 
	`di•_‰ag
(
skb
->
d©a
, 
Àn
);

1012 if(
tŸÆ_‰ags
 == 1)

1014 
Pkt
[0].
Êags
 |
PKT_EOP
;

1015 
ªsu…
 = 
	`DmaSídPkt
(
Õ
->
TxH™dÀ
, 
Pkt
, 1);

1016 if(
ªsu…
)

1017 
Õ
->
tx_pkts
 += 1;

1018 if(!
ªsu…
)

1021 if(!
	`√tif_queue_°›≥d
(
dev
))

1022 
	`√tif_°›_queue
(
dev
);

1024  
XST_FAILURE
;

1029 
Pkt
[0].
Êags
 |
PKT_ALL
;

1030 
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[0];

1031 
i
 = 1;

1032 
tŸÆ_‰ags
)

1034 
max
;

1036 
max
 = (
tŸÆ_‰ags
 >
MAX_SKB_FRAGS
) ? MAX_SKB_FRAGS :Åotal_frags;

1037 ; 
i
<
max
; i++, 
‰ag
++)

1039 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(3, 1, 0)

1040 
vút_addr
 =

1041 (*Ë
	`∑ge_addªss
(
‰ag
->
∑ge
Ë+ føg->
∑ge_off£t
;

1043 
vút_addr
 =

1044 (*Ë
	`∑ge_addªss
(
	`skb_‰ag_∑ge
(
‰ag
)Ë+ føg->
∑ge_off£t
;

1048 
	`log_vîbo£
("∑ckëÜígth i†%d\n", 
skb
->
Àn
);

1049 
Pkt
[
i
].
pktBuf
 = 
vút_addr
;

1050 
Pkt
[
i
].
bufInfo
 = 
NULL
;

1051 
Pkt
[
i
].
size
 = 
‰ag
->size;

1052 
Pkt
[
i
].
u£rInfo
 = 
skb
->
Àn
;

1053 
	`log_vîbo£
("u£rInfÿi†%Œx\n", 
Pkt
[
i
].
u£rInfo
);

1054 
Pkt
[
i
].
Êags
 = 
PKT_ALL
;

1057 if(
tŸÆ_‰ags
 =
max
)

1058 
Pkt
[
i
 - 1].
Êags
 = 
PKT_EOP
;

1060 
ªsu…
 = 
	`DmaSídPkt
(
Õ
->
TxH™dÀ
, 
Pkt
, 
i
);

1061 if(
ªsu…
)

1062 
Õ
->
tx_pkts
 +
ªsu…
;

1064 if(
ªsu…
 !
i
)

1067 if(!
	`√tif_queue_°›≥d
(
dev
))

1068 
	`√tif_°›_queue
(
dev
);

1070  
XST_FAILURE
;

1072 
i
 = 0;

1073 
tŸÆ_‰ags
 -
max
;

1077 
dev
->
å™s_°¨t
 = 
jiffõs
;

1079  
XST_SUCCESS
;

1080 
	}
}

1083 
	$xíë_Síd
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

1085 
ªtvÆ
;

1087 
	`•ö_lock_bh
(&
XTE_•ölock
);

1089 
ªtvÆ
 = 
	`xíë_Síd_öã∫Æ
(
skb
, 
dev
);

1091 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

1093 if(
ªtvÆ
 =
XST_SUCCESS
)

1094  
NETDEV_TX_OK
;

1096  
NETDEV_TX_BUSY
;

1097 
	}
}

1099 
	$xíë_tx_timeout
(
√t_devi˚
 *
dev
)

1101 
√t_loˇl
 *
Õ
;

1102 
Êags
;

1104 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_tx_timeout:\n");

1110 
	`•ö_lock_úqßve
(&
XTE_•ölock
, 
Êags
);

1112 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1113 
Õ
 = 
	`√tdev_¥iv
(
dev
);

1115 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

1119 
	`¥ötk
(
KERN_ERR


1121 
dev
->
«me
, 
TX_TIMEOUT
 * 1000UL / 
HZ
);

1122 
Õ
->
°©s
.
tx_îr‹s
++;

1124 
	`ª£t
(
dev
, 
__LINE__
);

1126 
	`•ö_u∆ock_úqª°‹e
(&
XTE_•ölock
, 
Êags
);

1127 
	}
}

1130 
	$xíë_ëhtoﬁ_gë_£âögs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_cmd
 *
ecmd
)

1133 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1134 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1136 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1140 
u32
 
mac_›ti⁄s
;

1141 
u16
 
gmii_cmd
, 
gmii_°©us
;

1144 
	`mem£t
(
ecmd
, 0, (
ëhtoﬁ_cmd
));

1146 
mac_›ti⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&(
Õ
->
Emac
));

1148 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
MII_BMCR
, &
gmii_cmd
);

1149 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
MII_BMSR
, &
gmii_°©us
);

1152 
ecmd
->
du∂ex
 = 
DUPLEX_FULL
;

1153 
ecmd
->
suµ‹ãd
 |(
SUPPORTED_FIBRE
);

1154 
ecmd
->
p‹t
 = 
PORT_FIBRE
;

1155 
ecmd
->
•ìd
 = 
SPEED_10000
;

1156 
ecmd
->
aut⁄eg
 = 
AUTONEG_DISABLE
;

1157 
ecmd
->
advîtisög
 |
ADVERTISED_FIBRE
;

1160 
ecmd
->
phy_addªss
 = 
Õ
->
xgmii_addr
;

1161 
ecmd
->
å™s˚ivî
 = 
XCVR_INTERNAL
;

1163 
	}
}

1166 
	$xíë_ëhtoﬁ_£t_£âögs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_cmd
 *
ecmd
)

1168  -
EOPNOTSUPP
;

1169 
	}
}

1171 
	#EMAC_REGS_N
 8

	)

1173 
	$xíë_ëhtoﬁ_gë_rög∑øm
(
√t_devi˚
 *
dev
,

1174 
ëhtoﬁ_rög∑øm
 *
îög
)

1176 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1177 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1179 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1182 
	`Dma_gë_rög∑øm
(
Õ
->
TxH™dÀ
,
îög
);

1183 
	`Dma_gë_rög∑øm
(
Õ
->
RxH™dÀ
,
îög
);

1186 
	}
}

1189 
	$xíë_ëhtoﬁ_gë_ªgs_Àn
(
√t_devi˚
 *
dev
)

1191 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_regs_len\n");

1192  
EMAC_REGS_N
 * (
u16
);

1193 
	}
}

1196 
	$xíë_ëhtoﬁ_gë_ªgs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_ªgs
 *
ªgs
,

1197 *
ªt
)

1199 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1200 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1202 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1205 
u16
 * 
d©a
 = (u16 *Ë
ªt
;

1206 
i
;

1208 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_regs\n");

1209 
ªgs
->
vîsi⁄
 = 0;

1210 
ªgs
->
Àn
 = 
EMAC_REGS_N
 * (
u16
);

1211 
	`mem£t
(
ªt
, 0, 
EMAC_REGS_N
 * (
u16
));

1213 
i
 = 0; i < 
EMAC_REGS_N
; i++) {

1214 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
i
, &(
d©a
[i]));

1216 
	}
}

1219 
	$xíë_ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_drvöfo
 *
ed
)

1221 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_drvinfo\n");

1222 
	`mem£t
(
ed
, 0, (
ëhtoﬁ_drvöfo
));

1223 
	`°∫˝y
(
ed
->
drivî
, 
DRIVER_NAME
, (ed->driver) - 1);

1224 
	`°∫˝y
(
ed
->
vîsi⁄
, 
DRIVER_VERSION
, (ed->version) - 1);

1226 
ed
->
ªgdump_Àn
 = (
u16
Ë* 
EMAC_REGS_N
;

1227 
	}
}

1230 
	$xíë_ëhtoﬁ_gë_∑u£∑øm
(
√t_devi˚
 *
dev
,

1231 
ëhtoﬁ_∑u£∑øm
 *
ïp
)

1233 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1234 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1236 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1239 
ëhtoﬁ_cmd
 
ecmd
;

1240 
ªt
 = -
EOPNOTSUPP
;

1241 
u32
 
O±i⁄s
;

1243 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_pauseparam\n");

1245 
ªt
 = 
	`xíë_ëhtoﬁ_gë_£âögs
(
dev
, &
ecmd
);

1246 i‡(
ªt
 < 0)

1249 
ïp
->
aut⁄eg
 = 
ecmd
.autoneg;

1250 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

1251 i‡(
O±i⁄s
 & 
XXGE_FCS_INSERT_OPTION
) {

1252 
ïp
->
rx_∑u£
 = 1;

1253 
ïp
->
tx_∑u£
 = 1;

1256 
ïp
->
rx_∑u£
 = 0;

1257 
ïp
->
tx_∑u£
 = 0;

1259 
	}
}

1262 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(3, 1, 0)

1263 
u32
 
	$xíë_ëhtoﬁ_gë_sg
(
√t_devi˚
 *
dev
)

1265 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_sg\n");

1269 
	}
}

1273 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 33)

1274 
	$xíë_ëhtoﬁ_gë_s£t_cou¡
(
√t_devi˚
 *
dev
, 
s£t
)

1276 
	`log_n‹mÆ
(
KERN_INFO
 "ëhtoﬁ_gë_s£t_cou¡ %d\n", 
XENET_STATS_LEN
);

1278 
s£t
) {

1279 
ETH_SS_STATS
:

1280  
XENET_STATS_LEN
;

1283  -
EOPNOTSUPP
;

1285 
	}
}

1287 
	$xíë_ëhtoﬁ_gë_°©s_cou¡
(
√t_devi˚
 *
dev
)

1289 
	`log_n‹mÆ
(
KERN_INFO
 "ëhtoﬁ_gë_°©s_cou¡ %d\n", 
XENET_STATS_LEN
);

1290  
XENET_STATS_LEN
;

1291 
	}
}

1294 
	$xíë_ëhtoﬁ_gë_°rögs
(
√t_devi˚
 *
dev
, 
u32
 
s£t
, 
u8
 * 
d©a
)

1296 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_strings\n");

1298 
s£t
) {

1299 
ETH_SS_STATS
:

1300 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_strings: ETH_SS_STATS\n");

1301 
	`mem˝y
(
d©a
, *
xíë_ëhtoﬁ_g°rögs_°©s
, (xenet_ethtool_gstrings_stats));

1304 
	}
}

1306 
	$xíë_ëhtoﬁ_gë_°©s
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_°©s
 *
e°
, 
u64
 *
d©a
)

1308 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1309 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1311 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1315 
	`log_n‹mÆ
(
KERN_ERR
 "ethtool_get_stats\n");

1318 
e°
->
n_°©s
 = 
	`ARRAY_SIZE
(
xíë_ëhtoﬁ_g°rögs_°©s
);

1320 
Õ
->
°©s
.
tx_fifo_îr‹s
 = 
	`XXgEthî√t_RódReg
÷p->
Emac
.
C⁄fig
.
Ba£Addªss
,
XXGE_TXUNDRERL_OFFSET
);

1321 
Õ
->
°©s
.
rx_Àngth_îr‹s
 = 
	`XXgEthî√t_RódReg
÷p->
Emac
.
C⁄fig
.
Ba£Addªss
,
XXGE_RXLTERL_OFFSET
);

1322 
Õ
->
°©s
.
rx_¸c_îr‹s
 = 
	`XXgEthî√t_RódReg
÷p->
Emac
.
C⁄fig
.
Ba£Addªss
,
XXGE_RXFCSERL_OFFSET
);

1324 
d©a
[0] = 
Õ
->
°©s
.
tx_∑ckës
;

1325 
d©a
[1] = 
Õ
->
°©s
.
tx_byãs
;

1326 
d©a
[2] = 
Õ
->
°©s
.
tx_fifo_îr‹s
;

1327 
d©a
[3] = 
Õ
->
°©s
.
rx_∑ckës
;

1328 
d©a
[4] = 
Õ
->
°©s
.
rx_byãs
;

1329 
d©a
[5] = 
Õ
->
°©s
.
rx_Àngth_îr‹s
;

1330 
d©a
[6] = 
Õ
->
°©s
.
rx_¸c_îr‹s
;

1331 
d©a
[7] = 
Õ
->
max_‰ags_ö_a_∑ckë
;

1332 
	}
}

1334 
	$xíë_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

1336 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1337 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1339 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1344 
mii_io˘l_d©a
 *
d©a
 = (mii_io˘l_d©®*Ë&
rq
->
i‰_d©a
;

1346 
	`log_n‹mÆ
(
KERN_INFO
 "In xenet_ioctl:\n");

1348 
cmd
) {

1350 
SIOCGMIIPHY
:

1351 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCGMIIPHY\n");

1352 
SIOCDEVPRIVATE
:

1353 if(
cmd
 =
SIOCDEVPRIVATE
)

1354 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCDEVPRIVATE\n");

1356 
d©a
->
phy_id
 = 
Õ
->
xgmii_addr
;

1359 
SIOCGMIIREG
:

1360 if(
cmd
 =
SIOCGMIIREG
)

1361 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCGMIIREG\n");

1362 
SIOCDEVPRIVATE
 + 1:

1363 if(
cmd
 =(
SIOCDEVPRIVATE
+1))

1364 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCDEVPRIVATE+1\n");

1365 i‡(
d©a
->
phy_id
 > 31 || d©a->
ªg_num
 > 31)

1366  -
ENXIO
;

1369 
	`dñ_timî_sync
(&
Õ
->
phy_timî
);

1371 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
, 
d©a
->
phy_id
, d©a->
ªg_num
,

1372 &
d©a
->
vÆ_out
);

1375 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

1376 
	`add_timî
(&
Õ
->
phy_timî
);

1379 
SIOCSMIIREG
:

1380 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCSMIIREG\n");

1381 
SIOCDEVPRIVATE
 + 2:

1382 if(
cmd
 =(
SIOCDEVPRIVATE
+2))

1383 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCDEVPRIVATE+2\n");

1385 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1386  -
EPERM
;

1388 i‡(
d©a
->
phy_id
 > 31 || d©a->
ªg_num
 > 31)

1389  -
ENXIO
;

1392 
	`dñ_timî_sync
(&
Õ
->
phy_timî
);

1394 
	`_XXgEthî√t_PhyWrôe
(&
Õ
->
Emac
, 
d©a
->
phy_id
, d©a->
ªg_num
,

1395 
d©a
->
vÆ_ö
);

1398 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

1399 
	`add_timî
(&
Õ
->
phy_timî
);

1402 
	`log_n‹mÆ
(
KERN_INFO
 "xíë_io˘l: unsuµ‹ãd vÆuê%d\n", 
cmd
);

1403  -
EOPNOTSUPP
;

1405 
	}
}

1409 
	$xã√t_öô_t›
()

1411 
√t_loˇl
 *
Õ
 = 
NULL
;

1412 
U£rPås
 
ufuncs
;

1413 
rc
;

1414 * 
h™dÀ
;

1416 
	`log_vîbo£
(
KERN_ERR
 "CameÅo xtenet_init_top\n");

1419 
ndev
 = 
	`Æloc_ëhîdev
((
√t_loˇl
));

1420 i‡(!
ndev
) {

1421 
	`¥ötk
(
KERN_ERR
 "xgbeth_axi: CouldÇotállocateÇet device.\n");

1422 
rc
 = -
ENOMEM
;

1423  
rc
;

1429 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1430 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1432 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1434 
Õ
->
ndev
 =Çdev;

1435 
Õ
->
de„ºed_skb
 = 
NULL
;

1437 
	`log_vîbo£
("GoingÅo do DmaRegister\n");

1442 
Õ
->
DrivîSèã
 = 
INITIALIZED_TOP
;

1444 
ufuncs
.
U£rInô
 = 
xã√t_öô_bŸtom
;

1445 
ufuncs
.
U£rPutPkt
 = 
myTxPutPkt
;

1446 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1447 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1448 #ifde‡
PM_SUPPORT


1449 
ufuncs
.
U£rSu•íd_E¨ly
 = 
mySëSu•íd_E¨ly
;

1450 
ufuncs
.
U£rSu•íd_L©e
 = 
mySëSu•íd_L©e
;

1451 
ufuncs
.
U£rResume
 = 
mySëResume
;

1453 #ifde‡
X86_64


1454 
ufuncs
.
¥ivD©a
 = 
ndev
;

1456 
ufuncs
.
¥ivD©a
 = (
u32
Ë
ndev
;

1458 
ufuncs
.
mode
 = 
ETHERNET_APPMODE
;

1459 
h™dÀ
 = 
	`DmaRegi°î
(
TX_ENGINE
, 
TEMAC_BAR
, &
ufuncs
, 
TEMAC_PKTSIZE
);

1460 if(
h™dÀ
 =
NULL
) {

1461 
	`¥ötk
(
KERN_ERR
 "U«bÀÅÿªgi°îÉngöê%d\n", 
TX_ENGINE
);

1462 
	`‰ì_√tdev
(
ndev
);

1463 
ndev
 = 
NULL
;

1464  -
ENOMEM
;

1466 
Õ
->
TxH™dÀ
 = 
h™dÀ
;

1471 
Õ
->
vîsi⁄Reg
 = 
ufuncs
.versionReg;

1473 
ufuncs
.
U£rPutPkt
 = 
myRxPutPkt
;

1474 
ufuncs
.
U£rGëPkt
 = 
myRxGëPkt
;

1475 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1476 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1477 #ifde‡
PM_SUPPORT


1478 
ufuncs
.
U£rSu•íd_E¨ly
 = 
mySëSu•íd_E¨ly
;

1479 
ufuncs
.
U£rSu•íd_L©e
 = 
mySëSu•íd_L©e
;

1480 
ufuncs
.
U£rResume
 = 
mySëResume
;

1482 #ifde‡
X86_64


1483 
ufuncs
.
¥ivD©a
 = 
ndev
;

1485 
ufuncs
.
¥ivD©a
 = (
u32
Ë
ndev
;

1487 
ufuncs
.
mode
 = 
ETHERNET_APPMODE
;

1488 
h™dÀ
 = 
	`DmaRegi°î
(
RX_ENGINE
, 
TEMAC_BAR
, &
ufuncs
, 
TEMAC_PKTSIZE
);

1489 if(
h™dÀ
 =
NULL
) {

1490 
	`¥ötk
(
KERN_ERR
 "U«bÀÅÿªgi°îÉngöê%d\n", 
RX_ENGINE
);

1491 
	`‰ì_√tdev
(
ndev
);

1492 
ndev
 = 
NULL
;

1493  -
ENOMEM
;

1495 
Õ
->
RxH™dÀ
 = 
h™dÀ
;

1498 
	}
}

1500 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 29)

1501 
	$xíë_£t_√tdev_›s
(
√t_devi˚
 *
ndev
, 
√t_devi˚_›s
 *
nd›s
)

1503 
nd›s
->
ndo_›í
 = 
xíë_›í
;

1504 
nd›s
->
ndo_°›
 = 
xíë_˛o£
;

1505 
nd›s
->
ndo_°¨t_xmô
 = 
xíë_Síd
;

1506 
nd›s
->
ndo_£t_mac_addªss
 = 
xíë_£t_mac_addªss
;

1507 
nd›s
->
ndo_do_io˘l
 = 
xíë_io˘l
;

1508 
nd›s
->
ndo_ch™ge_mtu
 = 
xíë_ch™ge_mtu
;

1509 
nd›s
->
ndo_tx_timeout
 = 
xíë_tx_timeout
;

1510 
nd›s
->
ndo_gë_°©s
 = 
xíë_gë_°©s
;

1511 
ndev
->
√tdev_›s
 = 
nd›s
;

1512 
	}
}

1516 
ëhtoﬁ_›s
 
	gxíë_ëhtoﬁ_›s
 = {

1517 .
gë_£âögs
 = 
xíë_ëhtoﬁ_gë_£âögs
,

1518 .
	g£t_£âögs
 = 
xíë_ëhtoﬁ_£t_£âögs
,

1519 .
	ggë_∑u£∑øm
 = 
xíë_ëhtoﬁ_gë_∑u£∑øm
,

1520 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(3, 1, 0)

1521 .
	ggë_sg
 = 
xíë_ëhtoﬁ_gë_sg
,

1523 .
	ggë_drvöfo
 = 
xíë_ëhtoﬁ_gë_drvöfo
,

1524 .
	ggë_ªgs_Àn
 = 
xíë_ëhtoﬁ_gë_ªgs_Àn
,

1525 .
	ggë_ªgs
 = 
xíë_ëhtoﬁ_gë_ªgs
,

1526 .
	ggë_rög∑øm
 = 
xíë_ëhtoﬁ_gë_rög∑øm
,

1527 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

1528 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 33)

1529 .
	ggë_s£t_cou¡
 = 
xíë_ëhtoﬁ_gë_s£t_cou¡
,

1531 .
	ggë_°©s_cou¡
 = 
xíë_ëhtoﬁ_gë_°©s_cou¡
,

1533 .
	ggë_°rögs
 = 
xíë_ëhtoﬁ_gë_°rögs
,

1534 .
	ggë_ëhtoﬁ_°©s
 = 
xíë_ëhtoﬁ_gë_°©s


1537 #ifde‡
DEBUG_VERBOSE


1538 
	$ªad_ÆÃeg
(
u32
 
RegBa£
)

1542 
	`¥ötk
("Readingáll MACÑegisters\n");

1543 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_RCW0_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_RCW0_OFFSET));

1544 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_RCW1_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_RCW1_OFFSET ));

1545 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_TC_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_TC_OFFSET ));

1546 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_FCC_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_FCC_OFFSET ));

1547 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_GERS_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_GERS_OFFSET ));

1548 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_RMTU_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_RMTU_OFFSET ));

1549 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_TMTU_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_TMTU_OFFSET ));

1550 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_VER_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_VER_OFFSET ));

1551 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_CAP_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_CAP_OFFSET ));

1554 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_CFG0_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase, XXGE_MDIO_CFG0_OFFSET));

1555 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_CFG1_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_MDIO_CFG1_OFFSET ));

1556 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_TX_DATA_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_MDIO_TX_DATA_OFFSET ));

1557 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_RX_DATA_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_MDIO_RX_DATA_OFFSET ));

1559 
	}
}

1561 #ifde‡
X86_64


1562 
	$xã√t_öô_bŸtom
(
u64
 
B¨Ba£
, u64 
¥ivd©a
)

1565 
	$xã√t_öô_bŸtom
(
B¨Ba£
, 
¥ivd©a
)

1568 
u8
 
mac_addr
[6];

1569 
√t_devi˚
 *
ndev
 = 
NULL
;

1570 
√t_loˇl
 *
Õ
 = 
NULL
;

1571 
XXgEthî√t_C⁄fig
 
Temac_C⁄fig
;

1572 
rc
 = 0;

1573 #ifde‡
X86_64


1574 
u64
 
RegBa£
;

1576 
RegBa£
;

1579 
RegBa£
 = 
B¨Ba£
 + 
NW_PATH_OFFSET
;

1582 
	`XIo_Out32
 (
B¨Ba£
 + 
DESIGN_MODE_ADDRESS
, 
PERF_DESIGN_MODE
);

1585 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1586 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1587 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1589 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1598 if(
Õ
->
DrivîSèã
 =
INITIALIZED_TOP
) {

1599 
Õ
->
DrivîSèã
 = 
INITIALIZED_FIRST
;

1600  
XST_SUCCESS
;

1602 if(
Õ
->
DrivîSèã
 =
INITIALIZED_FIRST
) {

1603 
Õ
->
DrivîSèã
 = 
INITIALIZED_SECOND
;

1606 
	`¥ötk
("DrivîSèã uƒecognized %d\n", 
Õ
->
DrivîSèã
);

1607  
XST_FAILURE
;

1612 
	`log_n‹mÆ
(
KERN_INFO
 "TEMAC Ba£ %x\n", 
RegBa£
);

1619 
Temac_C⁄fig
.
Ba£Addªss
 = 
RegBa£
;

1622 
	`log_vîbo£
("GoingÅo do CfgInitialize\n");

1623 #ifde‡
X86_64


1624 i‡(
	`XXgEthî√t_CfgInôülize
(&
Õ
->
Emac
, &
Temac_C⁄fig
, 
RegBa£
Ë!
XST_SUCCESS
)

1627 i‡(
	`XXgEthî√t_CfgInôülize
(&
Õ
->
Emac
, &
Temac_C⁄fig
, (
u32
Ë
RegBa£
Ë!
XST_SUCCESS
)

1630 
	`¥ötk
(
KERN_ERR
 "xgbeth_axi: CouldÇot initialize device.\n");

1631 
rc
 = -
ENODEV
;

1632 
îr‹
;

1636 
mac_addr
[0]=0xAA;

1637 #ifde‡
USE_NW_PATH0


1638 
mac_addr
[1]=0xBB;

1640 
mac_addr
[1]=0x00;

1642 
mac_addr
[2]=0xCC;

1643 
mac_addr
[3]=0xDD;

1644 
mac_addr
[4]=0xEE;

1645 
mac_addr
[5]=0xFF;

1647 i‡(
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
mac_addr
Ë!
XST_SUCCESS
) {

1648 
	`¥ötk
(
KERN_ERR
 "CouldÇot set MACáddress.\n");

1649 
rc
 = -
EIO
;

1650 
îr‹
;

1653 #ifde‡
DEBUG_NORMAL


1654 
	`¥ötk
("**SetÅhe MACádress in init_bottom**\n");

1657 
	`_XXgEthî√t_GëMacAddªss
(&
Õ
->
Emac
,
ndev
->
dev_addr
);

1659 
	`log_vîbo£
("addr_len is %d,Öerm_addr[0] is %x, [1] = %x, [2] = %x, [3] = %x,Öerm_addr[4] is %x, [5] = %x\n",

1660 
ndev
->
addr_Àn
,Çdev->
dev_addr
[0],Çdev->dev_addr[1],Çdev->dev_addr[2],

1661 
ndev
->
dev_addr
[3],Çdev->dev_addr[4],Çdev->dev_addr[5]);

1664 #ifde‡
ENABLE_JUMBO


1665 
Õ
->
max_‰ame_size
 = 
XXGE_MAX_JUMBO_FRAME_SIZE
;

1667 
Õ
->
max_‰ame_size
 = 1600;

1669 
	`log_vîbo£
(
KERN_INFO
 "MTU sizêi†%d\n", 
ndev
->
mtu
);

1670 i‡(
ndev
->
mtu
 > 
XXGE_JUMBO_MTU
)

1671 
ndev
->
mtu
 = 
XXGE_JUMBO_MTU
;

1672 
	`log_vîbo£
(
KERN_INFO
 "MTU sizêi†%d\n", 
ndev
->
mtu
);

1676 
Õ
->
xgmii_addr
 = 
XXGE_PHY_ADDRESS
;

1677 
	`log_vîbo£
("xgmii_add∏i†%x\n", 
Õ
->
xgmii_addr
);

1679 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

1680 
	`xíë_£t_√tdev_›s
(
ndev
, &
xíë_√tdev_›s
);

1683 
ndev
->
›í
 = 
xíë_›í
;

1684 
ndev
->
°›
 = 
xíë_˛o£
;

1685 
ndev
->
h¨d_°¨t_xmô
 = 
xíë_Síd
;

1686 
ndev
->
£t_mac_addªss
 = 
xíë_£t_mac_addªss
;

1687 
ndev
->
do_io˘l
 = 
xíë_io˘l
;

1688 
ndev
->
ch™ge_mtu
 = 
xíë_ch™ge_mtu
;

1689 
ndev
->
tx_timeout
 = 
xíë_tx_timeout
;

1690 
ndev
->
gë_°©s
 = 
xíë_gë_°©s
;

1693 
ndev
->
Êags
 &~
IFF_MULTICAST
;

1694 
ndev
->
„©uªs
 = 
NETIF_F_SG
 | 
NETIF_F_FRAGLIST
;

1696 
ndev
->
w©chdog_timeo
 = 
TX_TIMEOUT
;

1697 
	`SET_ETHTOOL_OPS
(
ndev
, &
xíë_ëhtoﬁ_›s
);

1700 
Õ
->
max_‰ags_ö_a_∑ckë
 = 0;

1701 
Õ
->
rx_pkts
 = 0;

1703 #i‡! 
XXGE_AUTOSTRIPPING


1704 
Õ
->
°rùpög
 =

1705 (
	`XXgEthî√t_GëO±i⁄s
(&(
Õ
->
Emac
)Ë& 
XXGE_FCS_STRIP_OPTION
) != 0;

1708 
	`log_vîbo£
(
KERN_ERR
 "RegisteringÇet device\n");

1710 
rc
 = 
	`ªgi°î_√tdev
(
ndev
);

1711 i‡(
rc
) {

1712 
	`¥ötk
(
KERN_ERR


1713 "%s: C™nŸÑegi°îÇë devi˚,áb‹tög.\n", 
ndev
->
«me
);

1714 
îr‹
;

1717 
Õ
->
DrivîSèã
 = 
READY
;

1720 
îr‹
:

1721 i‡(
ndev
) {

1722 
	`‰ì_√tdev
(
ndev
);

1724 #ifde‡
XGEMAC_DEBUG__


1725 
	`¥ötk
("**CompletedÅhe xtenet_init_bottom functionality**\n");

1728  
rc
;

1729 
	}
}

1730 #ifde‡
X86_64


1731 
	$myRxGëPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
, 
u64
 
¥ivd©a
)

1734 
	$myRxGëPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
, 
¥ivd©a
)

1737 
√t_devi˚
 *
ndev
 = 
NULL
;

1738 
√t_loˇl
 *
Õ
 = 
NULL
;

1739 
sk_buff
 *
√w_skb
;

1740 
PktBuf
 * 
pbuf
;

1741 
i
;

1742 
u32
 
Æign
;

1744 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


1745 
ªcv_cou¡
=1;

1746 
	`log_n‹mÆ
(
KERN_INFO
 "myRxGëPkt: %d\n",
ªcv_cou¡
);

1747 
ªcv_cou¡
 +
numpkts
;

1751 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1753 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1754 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1756 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1761 if(
Õ
->
DrivîSèã
 !
READY
) {

1762 
	`¥ötk
("xenet driver isÇotÑeady\n");

1767 
i
=0; i<
numpkts
; i++)

1769 
pbuf
 = &(
vaddr
[
i
]);

1770 
√w_skb
 = 
	`Æloc_skb
(
Õ
->
max_‰ame_size
, 
GFP_ATOMIC
);

1771 i‡(
√w_skb
 =
NULL
) {

1772 
	`log_n‹mÆ
("AŒo¯SKB faûed f‹ %d\n",
i
);

1776 
Æign
 = 
	`BUFFER_ALIGNRECV
(
√w_skb
->
d©a
);

1777 i‡(
Æign
)

1779 
	`skb_ª£rve
(
√w_skb
, 
Æign
);

1782 
pbuf
->
pktBuf
 = 
√w_skb
->
d©a
;

1783 
pbuf
->
bufInfo
 = (*)
√w_skb
;

1784 
pbuf
->
size
 = 
Õ
->
max_‰ame_size
;

1787 
Õ
->
rx_pkts
 += 1;

1790  
i
;

1791 
	}
}

1792 #ifde‡
X86_64


1793 
	$myRxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
u64
 
¥ivd©a
)

1796 
	$myRxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

1799 
√t_devi˚
 *
ndev
 = 
NULL
;

1800 
√t_loˇl
 *
Õ
 = 
NULL
;

1801 
sk_buff
 *
skb
;

1802 
PktBuf
 * 
pbuf
;

1803 
Àn
, 
i
;

1807 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1808 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1809 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1811 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1814 if((
Õ
->
DrivîSèã
 !
READY
Ë&& (Õ->DrivîSèã !
UNREGISTERING
))

1816 #ifde‡
PM_SUPPORT


1817 if–
Õ
->
DrivîSèã
 !
PM_SUSPEND
)

1820 
	`¥ötk
("xenet driver isÇotÑeady\n");

1825 
i
=0; i<
numpkts
; i++)

1827 
pbuf
 = &(
vaddr
[
i
]);

1829 
skb
 = (
sk_buff
 *Ë
pbuf
->
bufInfo
;

1832 if(
pbuf
->
Êags
 & 
PKT_UNUSED
)

1834 
	`log_vîbo£
("myRxPutPkt: skb %∞ªtu∫ed unu£d\n", 
skb
);

1835 if(
skb
)

1836 
	`dev_k‰ì_skb
(
skb
);

1839 
Àn
 = 
pbuf
->
size
;

1841 #ifde‡
DEBUG_VERBOSE


1842 
	`¥ötk
(
KERN_INFO
 "Recv data:Üen %d data %x\n",

1843 
Àn
, ()(
skb
->
d©a
));

1845 * 
d±r
;

1846 
i
;

1847 
d±r
 = 
skb
->
d©a
;

1848 if(
i
<6)

1849 
	`di•_‰ag
(
skb
->
d©a
, 
Àn
);

1854 
	`skb_put
(
skb
, 
Àn
);

1855 
skb
->
dev
 = 
ndev
;

1858 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
ndev
);

1860 #ifde‡
DEBUG_VERBOSE


1861 
	`ªad_skb_öfo
(
skb
);

1865 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

1867 
Õ
->
°©s
.
rx_∑ckës
++;

1868 
Õ
->
°©s
.
rx_byãs
 +
Àn
;

1869 if(
Õ
->
rx_pkts
)

1870 
Õ
->
rx_pkts
 -= 1;

1871 
	`√tif_rx
(
skb
);

1875 
	}
}

1876 #ifde‡
X86_64


1877 
	$myTxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
u64
 
¥ivd©a
)

1880 
	$myTxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

1883 
√t_devi˚
 *
ndev
 = 
NULL
;

1884 
√t_loˇl
 *
Õ
 = 
NULL
;

1885 
sk_buff
 *
skb
;

1886 
PktBuf
 * 
pbuf
;

1887 
i
;

1890 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1892 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1893 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1895 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1899 if((
Õ
->
DrivîSèã
 !
READY
Ë&& (Õ->DrivîSèã !
UNREGISTERING
))

1901 #ifde‡
PM_SUPPORT


1902 if–
Õ
->
DrivîSèã
 !
PM_SUSPEND
)

1905 
	`¥ötk
("xenet driver isÇotÑeady\n");

1911 
i
=0; i<
numpkts
; i++)

1913 
pbuf
 = &(
vaddr
[
i
]);

1916 
skb
 = (
sk_buff
 *Ë
pbuf
->
bufInfo
;

1918 i‡(
skb
)

1919 
	`dev_k‰ì_skb
(
skb
);

1921 if(
Õ
->
tx_pkts
)

1922 
Õ
->
tx_pkts
 -= 1;

1926 #ifde‡
USE_LATER


1927 if(
Õ
->
de„ºed_skb
)

1929 
ªtvÆ
;

1930 
	`•ö_lock_bh
(&
XTE_•ölock
);

1931 
skb
 = 
Õ
->
de„ºed_skb
;

1932 
Õ
->
de„ºed_skb
 = 
NULL
;

1933 
ªtvÆ
 = 
	`xíë_DSI
(
skb
, 
ndev
);

1934 
	`¥ötk
("CÆlög DSI f‹ de„ºed skb %∞ªtu∫†%d\n", 
skb
, 
ªtvÆ
);

1935 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

1939 #ifde‡
PM_SUPPORT


1940 if–
Õ
->
DrivîSèã
 !
PM_SUSPEND
 )

1943 if(
	`√tif_queue_°›≥d
(
ndev
))

1944 
	`√tif_wake_queue
(
ndev
);

1949 
	}
}

1950 #ifde‡
X86_64


1951 
	$mySëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

1954 
	$mySëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

1958 
	}
}

1961 #ifde‡
X86_64


1962 
	$myGëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

1965 
	$myGëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

1968 
√t_devi˚
 *
ndev
 = 
NULL
;

1969 
√t_loˇl
 *
Õ
 = 
NULL
;

1971 
	`log_vîbo£
("Róched myGëSèã wôhÖrivd©®%x\n", 
¥ivd©a
);

1974 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1975 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1976 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1978 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1983 if(
Õ
->
DrivîSèã
 !
READY
)

1985 
	`¥ötk
("xenet driver isÇotÑeady\n");

1993 
u°©e
->
LökSèã
 = (
	`√tif_ˇºõr_ok
(
ndev
Ë? 
LINK_UP
 : 
LINK_DOWN
);

1994 
u°©e
->
D©aMism©ch
 = 0;

1995 
u°©e
->
MöPktSize
 = 64;

1996 
u°©e
->
MaxPktSize
 = 
Õ
->
max_‰ame_size
;

1997 
u°©e
->
Te°Mode
 = 0;

1998 if(
h™dÀ
 =
Õ
->
TxH™dÀ
)

1999 
u°©e
->
Buf„rs
 = 
Õ
->
tx_pkts
;

2001 
u°©e
->
Buf„rs
 = 
Õ
->
rx_pkts
;

2005 
	}
}

2007 #ifde‡
PM_SUPPORT


2013 #ifde‡
X86_64


2014 
	$mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

2017 
	$mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

2020 
√t_devi˚
 *
ndev
 = 
NULL
;

2021 
√t_loˇl
 *
Õ
 = 
NULL
;

2023 
	`log_vîbo£
(
KERN_ERR
 "begin: xgbeth mySetSuspend_Early\n");

2025 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

2026 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2027 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2029 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2032 if(
Õ
->
DrivîSèã
 !
PM_SUSPEND
){

2033 
Õ
->
DrivîSèã_bef‹eSu•
 =Üp->
DrivîSèã
;

2034 
Õ
->
DrivîSèã
 = 
PM_SUSPEND
;

2037 
	`log_vîbo£
(
KERN_ERR
 "...SuspendEarly:Örivdata=0x%x,Çdev=0x%x,Üp=0x%x, Emac=0x%x, baseaddr=0x%x, xgmii_addr=%d\n",

2038 ()
¥ivd©a
,

2039 ()
ndev
,

2040 ()
Õ
,

2041 ()&
Õ
->
Emac
,

2042 ()&
Õ
->
Emac
.
C⁄fig
.
Ba£Addªss
,

2043 ()
Õ
->
xgmii_addr
 );

2046 if–!(
	`√tif_queue_°›≥d
(
ndev
)) ) {

2047 
	`log_vîbo£
(
KERN_ERR
 ".... stoppingÇetifÅx\n");

2048 
	`√tif_°›_queue
(
ndev
);

2053 
	`log_vîbo£
(
KERN_ERR
 ".... disablingÑx on hw\n");

2054 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

2055 
	`m¶ìp
(3);

2056 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xgbeth mySetSuspend_Early.\n");

2058 
	}
}

2067 #ifde‡
X86_64


2068 
	$mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

2071 
	$mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

2074 
√t_devi˚
 *
ndev
 = 
NULL
;

2075 
√t_loˇl
 *
Õ
 = 
NULL
;

2077 
	`log_vîbo£
(
KERN_ERR
 "begin: xgbeth mySetSuspend_Late\n");

2079 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

2080 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2081 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2083 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2088 if–!(
	`√tif_queue_°›≥d
(
ndev
)) ) {

2089 
	`√tif_°›_queue
(
ndev
);

2090 
	`log_vîbo£
(
KERN_ERR
 "PM.... xgbeth:Çetif queue is stopped.\n");

2092 
	`m¶ìp
(3);

2095 
	`√tif_devi˚_dëach
(
ndev
);

2096 
	`log_vîbo£
(
KERN_ERR
 "PM.... xgbeth:Çetif device detached.\n");

2097 
	`m¶ìp
(3);

2098 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xgbeth mySetSuspend_Late.\n");

2100 
	}
}

2101 #ifde‡
X86_64


2102 
	$mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

2105 
	$mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

2108 
√t_devi˚
 *
ndev
 = 
NULL
;

2109 
√t_loˇl
 *
Õ
 = 
NULL
;

2111 
	`log_vîbo£
(
KERN_ERR
 "begin: xgbeth mySetResume\n");

2113 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

2114 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2115 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2117 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2120 
	`log_vîbo£
(
KERN_ERR
 "...resume:Örivdata=0x%x,Çdev=0x%x,Üp=0x%x, Emac=0x%x, baseaddr=0x%x, xgmii_addr=%d\n",

2121 ()
¥ivd©a
,

2122 ()
ndev
,

2123 ()
Õ
,

2124 ()&
Õ
->
Emac
,

2125 ()&
Õ
->
Emac
.
C⁄fig
.
Ba£Addªss
,

2126 ()
Õ
->
xgmii_addr
 );

2129 if–
Õ
->
DrivîSèã
 =
PM_SUSPEND
 ) {

2134 (Ë
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
ndev
->
dev_addr
);

2135 (Ë
	`_XXgEthî√t_SëO±i⁄s
(&
Õ
->
Emac
, (Õ->Emac).
O±i⁄s
);

2137 
	`m¶ìp
(3);

2138 
	`_XXgEthî√t_Sèπ
(&
Õ
->
Emac
);

2140 
	`√tif_wake_queue
(
ndev
);

2141 
	`log_vîbo£
("PM.... xgbeth:Çetif queue is started.\n");

2142 
	`m¶ìp
(3);

2144 
	`√tif_devi˚_©èch
(
ndev
);

2145 
	`log_vîbo£
("PM.... xgbeth:Çetif deviceáttached.\n");

2146 
	`m¶ìp
(3);

2150 
	`log_vîbo£
("PM.... xxgbethÉthernet PHY, MACálready up\n");

2151 
	`m¶ìp
(3);

2153 
Õ
->
DrivîSèã
 =Üp->
DrivîSèã_bef‹eSu•
;

2154 
	`log_vîbo£
(".... drivî sèãÑe°‹edÅÿ%d\n", 
Õ
->
DrivîSèã
);

2155 
	`log_vîbo£
("PM....Énd: xgbeth mySetResume.\n");

2157 
	}
}

2161 
	$xã√t_öô
()

2163 
ªt
;

2167 
	`•ö_lock_öô
(&
XTE_•ölock
);

2174 
	`¥ötk
(
KERN_INFO
 "Inserting Xilinx GigE driver in kernel.\n");

2176 if((
ªt
=
	`xã√t_öô_t›
())!=0){

2177 
	`log_vîbo£
("error in xtenet_init_top\n");

2181 
	}
}

2184 
	$xã√t_˛ónup
()

2186 
√t_loˇl
 *
Õ
 = 
NULL
;

2187 
°©e
;

2189 
	`¥ötk
(
KERN_INFO
 "Unregistering Xilinx GigE driver from kernel.\n");

2190 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2191 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2193 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2197 
°©e
 = 
Õ
->
DrivîSèã
;

2198 
Õ
->
DrivîSèã
 = 
UNREGISTERING
;

2199 
	`DmaUƒegi°î
(
Õ
->
TxH™dÀ
);

2200 
	`DmaUƒegi°î
(
Õ
->
RxH™dÀ
);

2201 
	`mdñay
(2000);

2207 if(
°©e
 =
READY
)

2208 
	`uƒegi°î_√tdev
(
ndev
);

2209 if(
ndev
 !
NULL
)

2210 
	`‰ì_√tdev
(
ndev
);

2211 
	}
}

2213 
moduÀ_öô
(
xã√t_öô
);

2214 
moduÀ_exô
(
xã√t_˛ónup
);

2216 
MODULE_AUTHOR
("Xilinx, Inc.");

2217 
MODULE_DESCRIPTION
(
DRIVER_DESCRIPTION
);

2218 
MODULE_LICENSE
("GPL");

2219 
MODULE_VERSION
(
DRIVER_VERSION
);

	@xxgbeth0/xgadapter.h

65 #i‚de‡
ADAPTER_H


66 
	#ADAPTER_H


	)

68 
	~"xdebug.h
"

71 
	#XPAR_LL_DMA
 1

	)

72 
	#XPAR_AXI_DMA
 1

	)

73 
	#XPAR_LL_FIFO
 0

	)

	@xxgbeth0/xxgethernet.c

77 
	~"xxgëhî√t.h
"

78 
	~"xdma_u£r.h
"

92 
InôHw
(
XXgEthî√t
 *
In°™˚På
);

96 
xdbg_°m¡
(
ödít_⁄
 = 0;)

97 
xdbg_°m¡
(
u32
 
_XXgëhî√t_rú_vÆue
;)

125 #ifde‡
X86_64


126 
	$XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
,

127 
XXgEthî√t_C⁄fig
 *
CfgPå
,

128 
u64
 
Ef„˘iveAddªss
)

131 
	$XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
,

132 
XXgEthî√t_C⁄fig
 *
CfgPå
,

133 
u32
 
Ef„˘iveAddªss
)

137 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

140 
	`mem£t
(
In°™˚På
, 0, (
XXgEthî√t
));

141 
	`mem˝y
(&
In°™˚På
->
C⁄fig
, 
CfgPå
, (
XXgEthî√t_C⁄fig
));

143 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_CfgInitialize\n");

146 
In°™˚På
->
C⁄fig
.
Ba£Addªss
 = 
Ef„˘iveAddªss
;

149 
In°™˚På
->
IsRódy
 = 
XIL_COMPONENT_IS_READY
;

151 
	`XXgEthî√t_Re£t
(
In°™˚På
);

153 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

155  
XST_SUCCESS
;

156 
	}
}

173 
	$XXgEthî√t_Sèπ
(
XXgEthî√t
 *
In°™˚På
)

175 
u32
 
Reg
;

177 #ifde‡
XGEMAC_DEBUG__


178 
u32
 
Reg_tmp
;

181 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

182 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

184 #ifde‡
XGEMAC_DEBUG__


185 
	`¥ötk
("**CompletedÅhe xtenet_init_top functionality**\n");

187 
Reg_tmp
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

188 
XXGE_VER_OFFSET
);

189 
	`¥ötk
("**Vîsi⁄ Regi°î = %x \n",
Reg_tmp
);

191 
Reg_tmp
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

192 
XXGE_CAP_OFFSET
);

193 
	`¥ötk
("thêVÆuêo‡C≠abûôy Regi°î = %x \n",
Reg_tmp
);

199 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

203 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Start\n");

206 i‡(
In°™˚På
->
O±i⁄s
 & 
XXGE_TRANSMITTER_ENABLE_OPTION
) {

207 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "enablingÅransmitter\n");

208 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

209 
XXGE_TC_OFFSET
);

210 i‡(!(
Reg
 & 
XXGE_TC_TX_MASK
)) {

211 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

213 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

214 
XXGE_TC_OFFSET
,

215 
Reg
 | 
XXGE_TC_TX_MASK
);

217 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "transmitterÉnabled\n");

221 i‡(
In°™˚På
->
O±i⁄s
 & 
XXGE_RECEIVER_ENABLE_OPTION
) {

222 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "enablingÑeceiver\n");

223 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

224 
XXGE_RCW1_OFFSET
);

225 i‡(!(
Reg
 & 
XXGE_RCW1_RX_MASK
)) {

226 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

229 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

230 
XXGE_RCW1_OFFSET
,

231 
Reg
 | 
XXGE_RCW1_RX_MASK
);

233 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "receiverÉnabled\n");

237 
In°™˚På
->
IsSèπed
 = 
XIL_COMPONENT_IS_STARTED
;

238 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Start: done\n");

239 
	}
}

260 
	$XXgEthî√t_St›
(
XXgEthî√t
 *
In°™˚På
)

262 
u32
 
Reg
;

264 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

265 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

269 i‡(
In°™˚På
->
IsSèπed
 == 0) {

273 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Stop\n");

274 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

279 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

280 
XXGE_RCW1_OFFSET
);

281 
Reg
 &~
XXGE_RCW1_RX_MASK
;

282 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

283 
XXGE_RCW1_OFFSET
, 
Reg
);

291 
In°™˚På
->
IsSèπed
 = 0;

292 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Stop: done\n");

293 
	}
}

314 
	$XXgEthî√t_Re£t
(
XXgEthî√t
 *
In°™˚På
)

316 
u32
 
Reg
;

317 
u32
 
TimeoutLo›s
;

319 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

320 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

322 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Reset\n");

325 
	`XXgEthî√t_St›
(
In°™˚På
);

326 
In°™˚På
->
O±i⁄s
 = 
XXGE_DEFAULT_OPTIONS
;

329 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "resettingÅheÑeceiver\n");

330 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

331 
XXGE_RCW1_OFFSET
);

332 
Reg
 |
XXGE_RCW1_RST_MASK
;

333 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

334 
XXGE_RCW1_OFFSET
, 
Reg
);

337 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "resettingÅheÅransmitter\n");

338 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

339 
XXGE_TC_OFFSET
);

340 
Reg
 |
XXGE_TC_RST_MASK
;

341 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

342 
XXGE_TC_OFFSET
, 
Reg
);

344 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "waiting untilÑeset is done\n");

346 
TimeoutLo›s
 = 
XXGE_RST_DELAY_LOOPCNT_VAL
;

348 
TimeoutLo›s
 && (
Reg
 & (
XXGE_RCW1_RST_MASK
 | 
XXGE_TC_RST_MASK
))) {

349 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

350 
XXGE_RCW1_OFFSET
);

351 
Reg
 |
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

352 
XXGE_TC_OFFSET
);

353 
TimeoutLo›s
 --;

355 if(0 =
TimeoutLo›s
 ) {

356 
	`Xû_As£πVoidAlways
();

360 
	`InôHw
(
In°™˚På
);

361 
	}
}

375 
	$InôHw
(
XXgEthî√t
 *
In°™˚På
)

377 
u32
 
Reg
;

379 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet InitHw\n");

383 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

384 
XXGE_RCW1_OFFSET
);

385 
Reg
 &~
XXGE_RCW1_RX_MASK
;

386 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

387 
XXGE_RCW1_OFFSET
, 
Reg
);

396 
	`XXgEthî√t_SëO±i⁄s
(
In°™˚På
, In°™˚På->
O±i⁄s
 &

397 ~(
XXGE_TRANSMITTER_ENABLE_OPTION
 |

398 
XXGE_RECEIVER_ENABLE_OPTION
));

400 
	`XXgEthî√t_CÀ¨O±i⁄s
(
In°™˚På
, ~In°™˚På->
O±i⁄s
);

403 
	`log_vîbo£
(
KERN_ERR
 "RCW1Çow contains %x\n",

404 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_RCW1_OFFSET
));

405 
	`log_vîbo£
(
KERN_ERR
 "TCÇow contains %x\n",

406 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_TC_OFFSET
));

409 
	`XXgEthî√t_PhySëMdioDivis‹
(
In°™˚På
, 
XXGE_MDIO_DIV_DFT
);

411 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet InitHw: done\n");

412 
	}
}

435 
	$XXgEthî√t_SëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
)

437 
u32
 
MacAddr
;

438 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

440 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

441 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

442 
	`Xû_As£πN⁄void
(
AddªssPå
 !
NULL
);

445 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

446  (
XST_DEVICE_IS_STARTED
);

455 
MacAddr
 = 
A±r
[0];

456 
MacAddr
 |
A±r
[1] << 8;

457 
MacAddr
 |
A±r
[2] << 16;

458 
MacAddr
 |
A±r
[3] << 24;

459 
	`log_vîbo£
(
KERN_ERR
 "AddressPtr = %x %x %x %x; MacAddrH = 0x%x, MACL=%x \n",

460 ()
A±r
[0],

461 ()
A±r
[1],

462 ()
A±r
[2],

463 ()
A±r
[3],

464 
MacAddr
, 
XXGE_MACL_OFFSET
);

466 
	`DmaMac_WrôeReg
(
XXGE_MACL_OFFSET
, 
MacAddr
);

468 
MacAddr
 = 0;

469 
MacAddr
 |
A±r
[4];

470 
MacAddr
 |
A±r
[5] << 8;

471 
	`log_vîbo£
(
KERN_ERR
 "AddressPtr = %x %x; MacAddrH = 0x%x, MACU=%x \n",

472 ()
A±r
[4],

473 ()
A±r
[5],

474 
MacAddr
, 
XXGE_MACU_OFFSET
);

476 
	`DmaMac_WrôeReg
(
XXGE_MACU_OFFSET
, 
MacAddr
);

478 
	`log_vîbo£
("0x9400 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9400) );

479 
	`log_vîbo£
("0x9404 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9404) );

480 
	`log_vîbo£
("0x9408 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9408) );

481 
	`log_vîbo£
("0x940C i†: 0x%x \n", 
	`DmaMac_RódReg
(0x940C) );

482 
	`log_vîbo£
("0x9410 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9410) );

483 
	`log_vîbo£
("0x9414 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9414) );

486  
XST_SUCCESS
;

489 #ifde‡
XGEMAC_DEBUG__


490 
	`¥ötk
("**SettingÅhe MACádress in XXgEthernet_SetMacAddress**\n");

492 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

494 
A±r
[0], Aptr[1], Aptr[2], Aptr[3], Aptr[4], Aptr[5]);

497 
MacAddr
 = 
A±r
[0];

498 
MacAddr
 |
A±r
[1] << 8;

499 
MacAddr
 |
A±r
[2] << 16;

500 
MacAddr
 |
A±r
[3] << 24;

503  (
XST_SUCCESS
);

505 
	}
}

528 
	$XXgEthî√t_GëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
)

530 
u32
 
MacAddr
;

531 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

533 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

534 
	`Xû_As£πVoid
(
AddªssPå
 !
NULL
);

535 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

538 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACL_OFFSET
);

539 
A±r
[0] = (
u8
Ë
MacAddr
;

540 
A±r
[1] = (
u8
Ë(
MacAddr
 >> 8);

541 
A±r
[2] = (
u8
Ë(
MacAddr
 >> 16);

542 
A±r
[3] = (
u8
Ë(
MacAddr
 >> 24);

545 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACU_OFFSET
);

546 
A±r
[4] = (
u8
Ë
MacAddr
;

547 
A±r
[5] = (
u8
Ë(
MacAddr
 >> 8);

550 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACL_OFFSET
);

551 
A±r
[0] = (
u8
Ë
MacAddr
;

552 
A±r
[1] = (
u8
Ë(
MacAddr
 >> 8);

553 
A±r
[2] = (
u8
Ë(
MacAddr
 >> 16);

554 
A±r
[3] = (
u8
Ë(
MacAddr
 >> 24);

557 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACU_OFFSET
);

558 
A±r
[4] = (
u8
Ë
MacAddr
;

559 
A±r
[5] = (
u8
Ë(
MacAddr
 >> 8);

561 
	}
}

601 
u32
 
	$XXgEthî√t_Upd©eDïO±i⁄s
(
XXgEthî√t
 *
In°™˚På
)

606 
u32
 
DïO±i⁄s
 = 
In°™˚På
->
O±i⁄s
;

621 
DïO±i⁄s
 |
XXGE_PROMISC_OPTION
;

622 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

626 (
DïO±i⁄s
);

627 
	}
}

651 
	$XXgEthî√t_SëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

653 
u32
 
Reg
;

654 
u32
 
RegRcw1
;

655 
u32
 
RegTc
;

656 
u32
 
RegNewRcw1
;

657 
u32
 
RegNewTc
;

658 
u32
 
DïO±i⁄s
;

661 
u32
 
TempRegRcw1
;

662 
u32
 
TempRegTc
;

665 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

666 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

669 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

670  (
XST_DEVICE_IS_STARTED
);

673 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_SetOptions\n");

680 
In°™˚På
->
O±i⁄s
 |= Options;

687 
DïO±i⁄s
 = 
	`XXgEthî√t_Upd©eDïO±i⁄s
(
In°™˚På
);

700 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

701 
XXGE_RCW1_OFFSET
);

702 
RegTc
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

703 
XXGE_TC_OFFSET
);

704 
RegNewRcw1
 = 
RegRcw1
;

705 
RegNewTc
 = 
RegTc
;

707 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

709 
RegRcw1
, 
RegTc
);

710 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

711 "O±i⁄s: 0x%0x; deÁu… o±i⁄s: 0x%0x\n",
O±i⁄s
,

712 
XXGE_DEFAULT_OPTIONS
);

715 i‡(
DïO±i⁄s
 & 
XXGE_JUMBO_OPTION
) {

716 
RegNewTc
 |
XXGE_TC_JUM_MASK
;

717 
RegNewRcw1
 |
XXGE_RCW1_JUM_MASK
;

721 i‡(
DïO±i⁄s
 & 
XXGE_FCS_STRIP_OPTION
) {

722 
RegNewTc
 &~
XXGE_TC_FCS_MASK
;

723 
RegNewRcw1
 &~
XXGE_RCW1_FCS_MASK
;

728 i‡(
DïO±i⁄s
 & 
XXGE_LENTYPE_ERR_OPTION
) {

729 
RegNewRcw1
 &~
XXGE_RCW1_LT_DIS_MASK
;

733 i‡(
DïO±i⁄s
 & 
XXGE_TRANSMITTER_ENABLE_OPTION
) {

734 
RegNewTc
 |
XXGE_TC_TX_MASK
;

738 i‡(
DïO±i⁄s
 & 
XXGE_RECEIVER_ENABLE_OPTION
) {

739 
RegNewRcw1
 |
XXGE_RCW1_RX_MASK
;

743 i‡(
RegTc
 !
RegNewTc
) {

744 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

745 "£tO±i⁄s: wrôögÅc: 0x%0x\n", 
RegNewTc
);

746 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

747 
XXGE_TC_OFFSET
, 
RegNewTc
);

750 i‡(
RegRcw1
 !
RegNewRcw1
) {

751 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

752 "£tO±i⁄s: wrôögÑcw1: 0x%0x\n", 
RegNewRcw1
);

753 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

754 
XXGE_RCW1_OFFSET
, 
RegNewRcw1
);

758 
TempRegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

759 
XXGE_RCW1_OFFSET
);

760 
TempRegTc
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

761 
XXGE_TC_OFFSET
);

769 i‡(
DïO±i⁄s
 & 
XXGE_FLOW_CONTROL_OPTION
) {

770 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

772 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

773 
XXGE_FCC_OFFSET
);

774 
Reg
 |
XXGE_FCC_FCRX_MASK
;

775 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

776 
XXGE_FCC_OFFSET
, 
Reg
);

778 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

780 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

781 
XXGE_RCW1_OFFSET
));

784 i‡(
DïO±i⁄s
 & 
XXGE_PROMISC_OPTION
) {

785 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

789 
Reg
 = 
	`DmaMac_RódReg
(
XXGE_AFC_OFFSET
);

790 
Reg
 |
XXGE_AFC_PM_MASK
;

793 
	`DmaMac_WrôeReg
(
XXGE_AFC_OFFSET
, 
Reg
);

795 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

797 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

798 
XXGE_RCW1_OFFSET
));

806 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "setOptions:Ñeturning SUCCESS\n");

807  (
XST_SUCCESS
);

808 
	}
}

829 
	$XXgEthî√t_CÀ¨O±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

831 
u32
 
Reg
;

832 
u32
 
RegRcw1
;

833 
u32
 
RegTc
;

834 
u32
 
RegNewRcw1
;

835 
u32
 
RegNewTc
;

836 
u32
 
DïO±i⁄s
;

838 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

839 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

842 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_ClearOptions: 0x%08x\n",

843 
O±i⁄s
);

845 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

846  (
XST_DEVICE_IS_STARTED
);

854 
In°™˚På
->
O±i⁄s
 &= ~Options;

856 
DïO±i⁄s
 = 0xFFFFFFFF;

865 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

866 
XXGE_RCW1_OFFSET
);

867 
RegTc
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

868 
XXGE_TC_OFFSET
);

869 
RegNewRcw1
 = 
RegRcw1
;

870 
RegNewTc
 = 
RegTc
;

873 i‡(
DïO±i⁄s
 & 
XXGE_JUMBO_OPTION
) {

874 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

876 
RegNewTc
 &~
XXGE_TC_JUM_MASK
;

877 
RegNewRcw1
 &~
XXGE_RCW1_JUM_MASK
;

882 i‡(
DïO±i⁄s
 & 
XXGE_FCS_STRIP_OPTION
) {

883 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

885 
RegNewRcw1
 |
XXGE_RCW1_FCS_MASK
;

889 i‡(
DïO±i⁄s
 & 
XXGE_FCS_INSERT_OPTION
) {

890 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

892 
RegNewTc
 |
XXGE_TC_FCS_MASK
;

896 i‡(
DïO±i⁄s
 & 
XXGE_LENTYPE_ERR_OPTION
) {

897 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

899 
RegNewRcw1
 |
XXGE_RCW1_LT_DIS_MASK
;

903 i‡(
DïO±i⁄s
 & 
XXGE_TRANSMITTER_ENABLE_OPTION
) {

904 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

906 
RegNewTc
 &~
XXGE_TC_TX_MASK
;

910 i‡(
DïO±i⁄s
 & 
XXGE_RECEIVER_ENABLE_OPTION
) {

911 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

913 
RegNewRcw1
 &~
XXGE_RCW1_RX_MASK
;

919 i‡(
RegTc
 !
RegNewTc
) {

920 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

921 "XXgEthî√t_CÀ¨O±i⁄s: sëtög TC: 0x%0x\n", 
RegNewTc
);

922 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

923 
XXGE_TC_OFFSET
, 
RegNewTc
);

926 i‡(
RegRcw1
 !
RegNewRcw1
) {

927 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

928 "XXgEthî√t_CÀ¨O±i⁄s: sëtög RCW1: 0x%0x\n",
RegNewRcw1
);

929 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

930 
XXGE_RCW1_OFFSET
, 
RegNewRcw1
);

939 i‡(
DïO±i⁄s
 & 
XXGE_FLOW_CONTROL_OPTION
) {

940 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

942 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

943 
XXGE_FCC_OFFSET
);

944 
Reg
 &~
XXGE_FCC_FCRX_MASK
;

945 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

946 
XXGE_FCC_OFFSET
, 
Reg
);

950 i‡(
DïO±i⁄s
 & 
XXGE_PROMISC_OPTION
) {

951 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

955 
Reg
 = 
	`DmaMac_RódReg
(
XXGE_AFC_OFFSET
);

956 
Reg
 &~
XXGE_AFC_PM_MASK
;

959 
	`DmaMac_WrôeReg
(
XXGE_AFC_OFFSET
, 
Reg
);

969 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "ClearOptions:Ñeturning SUCCESS\n");

970  (
XST_SUCCESS
);

971 
	}
}

987 
u32
 
	$XXgEthî√t_GëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
)

989 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

990 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

992  (
In°™˚På
->
O±i⁄s
);

993 
	}
}

1016 
	$XXgEthî√t_DißbÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
)

1018 
u32
 
RegRcw1
;

1021 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1022 
XXGE_RCW1_OFFSET
);

1023 
RegRcw1
 |
XXGE_RCW1_CL_DIS_MASK
;

1024 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1025 
XXGE_RCW1_OFFSET
, 
RegRcw1
);

1026 
	}
}

1046 
	$XXgEthî√t_E«bÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
)

1048 
u32
 
RegRcw1
;

1051 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1052 
XXGE_RCW1_OFFSET
);

1053 
RegRcw1
 &~
XXGE_RCW1_CL_DIS_MASK
;

1054 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1055 
XXGE_RCW1_OFFSET
, 
RegRcw1
);

1056 
	}
}

1086 
	$XXgEthî√t_PhySëMdioDivis‹
(
XXgEthî√t
 *
In°™˚På
, 
u8
 
Divis‹
)

1088 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

1089 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
)

1090 
	`Xû_As£πVoid
(
Divis‹
 <
XXGE_MDIO_CFG0_CLOCK_DIVIDE_MAX
);

1093 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_PhySetMdioDivisor\n");

1095 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1096 
XXGE_MDIO_CFG0_OFFSET
,

1097 (
u32
Ë
Divis‹
 | 
XXGE_MDIO_CFG0_MDIOEN_MASK
);

1098 
	}
}

1138 
	$XXgEthî√t_PhyRód
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

1139 
u32
 
Regi°îNum
, 
u16
 *
PhyD©aPå
)

1142 #ifdef 
MDIO_CHANGES


1143 
u32
 
MdioCålReg
 = 0;

1148 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

1149 
	`Xû_As£πVoid
(
Regi°îNum
 <
XXGE_PHY_REG_NUM_LIMIT
);

1151 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"PhyRead: BaseAddress %x Offset %x PhyAddress %x RegisterNum %d\n",

1152 
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_MDIO_CFG1_OFFSET
,

1153 
PhyAddªss
, 
Regi°îNum
);

1155 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

1157 
In°™˚På
->
C⁄fig
.
Ba£Addªss
);

1168 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1169 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1172 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1173 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1174 
XXGE_MDIO_CFG1_OFFSET
));

1177 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1178 
XXGE_MDIO_CFG1_OP_SETADDR_MASK
;

1179 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"Writing Base %x Offset %x = %x\n",

1180 
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1181 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"Writing Base %x Offset %x = %x\n",

1182 
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_MDIO_TX_DATA_OFFSET
,

1183 (
Regi°îNum
 & 
XXGE_MDIO_TX_DATA_MASK
));

1185 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1186 
XXGE_MDIO_TX_DATA_OFFSET
, (
Regi°îNum
 & 
XXGE_MDIO_TX_DATA_MASK
));

1188 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1189 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1194 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1195 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1198 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1199 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1200 
XXGE_MDIO_CFG1_OFFSET
));

1203 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1204 
XXGE_MDIO_CFG1_OP_READ_MASK
;

1205 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1206 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1210 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1211 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1214 *
PhyD©aPå
 = (
u16
Ë
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1215 
XXGE_MDIO_RX_DATA_OFFSET
);

1216 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"XXgEthî√t_PhyRód: VÆuêªåõved: 0x%0x\n", *
PhyD©aPå
);

1218 *
PhyD©aPå
 = 0x55AA;

1220 
	}
}

1253 
	$XXgEthî√t_PhyWrôe
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

1254 
u32
 
Regi°îNum
, 
u16
 
PhyD©a
)

1256 #ifde‡ 
MDIO_CHANGES


1257 
u32
 
MdioCålReg
 = 0;

1262 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

1263 
	`Xû_As£πVoid
(
PhyAddªss
 <
XXGE_PHY_ADDR_LIMIT
);

1264 
	`Xû_As£πVoid
(
Regi°îNum
 <
XXGE_PHY_REG_NUM_LIMIT
);

1266 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

1268 
In°™˚På
->
C⁄fig
.
Ba£Addªss
);

1280 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1281 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1285 
	`¥ötk
("MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1286 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1287 
XXGE_MDIO_CFG1_OFFSET
));

1290 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1291 
XXGE_MDIO_CFG1_OP_SETADDR_MASK
;

1292 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1293 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1294 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1295 
XXGE_MDIO_TX_DATA_OFFSET
, (
Regi°îNum
 & 
XXGE_MDIO_TX_DATA_MASK
));

1301 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1302 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1306 
	`¥ötk
("MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1307 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1308 
XXGE_MDIO_CFG1_OFFSET
));

1311 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1312 
XXGE_MDIO_CFG1_OP_WRITE_MASK
;

1313 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1314 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1315 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1316 
XXGE_MDIO_TX_DATA_OFFSET
, (
PhyD©a
 & 
XXGE_MDIO_TX_DATA_MASK
));

1322 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1323 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1327 
	`¥ötk
("MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1328 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1329 
XXGE_MDIO_CFG1_OFFSET
));

1331 
	}
}

	@xxgbeth0/xxgethernet.h

352 #i‚de‡
XXGETHERNET_H


353 
	#XXGETHERNET_H


	)

355 #ifde‡
__˝lu•lus


361 
	~"x°©us.h
"

362 
	~"xxgëhî√t_hw.h
"

382 
	#XXGE_PROMISC_OPTION
 0x00000001

	)

388 
	#XXGE_JUMBO_OPTION
 0x00000002

	)

395 
	#XXGE_FLOW_CONTROL_OPTION
 0x00000008

	)

401 
	#XXGE_FCS_STRIP_OPTION
 0x00000010

	)

407 
	#XXGE_FCS_INSERT_OPTION
 0x00000020

	)

414 
	#XXGE_LENTYPE_ERR_OPTION
 0x00000040

	)

420 
	#XXGE_TRANSMITTER_ENABLE_OPTION
 0x00000080

	)

426 
	#XXGE_RECEIVER_ENABLE_OPTION
 0x00000100

	)

433 
	#XXGE_BROADCAST_OPTION
 0x00000200

	)

436 
	#XXGE_DEFAULT_OPTIONS
 \

437 (
XXGE_FLOW_CONTROL_OPTION
 | \

438 
XXGE_FCS_INSERT_OPTION
 | \

439 
XXGE_FCS_STRIP_OPTION
 | \

440 
XXGE_LENTYPE_ERR_OPTION
 | \

441 
XXGE_TRANSMITTER_ENABLE_OPTION
 | \

442 
XXGE_RECEIVER_ENABLE_OPTION
)

	)

449 
	#XXGE_MDIO_DIV_DFT
 33

	)

455 
	#XXGE_MAC_ADDR_SIZE
 6

	)

456 
	#XXGE_MTU
 1500

	)

459 
	#XXGE_JUMBO_MTU
 8192

	)

462 
	#XXGE_HDR_SIZE
 14

	)

463 
	#XAE_HDR_VLAN_SIZE
 18

	)

466 
	#XXGE_TRL_SIZE
 4

	)

469 
	#XXGE_MAX_FRAME_SIZE
 (
XXGE_MTU
 + 
XXGE_HDR_SIZE
 + 
XXGE_TRL_SIZE
)

	)

470 
	#XAE_MAX_VLAN_FRAME_SIZE
 (
XAE_MTU
 + 
XAE_HDR_VLAN_SIZE
 + 
XAE_TRL_SIZE
)

	)

471 
	#XXGE_MAX_JUMBO_FRAME_SIZE
 (
XXGE_JUMBO_MTU
 + 
XXGE_HDR_SIZE
 + 
XXGE_TRL_SIZE
)

	)

473 #ifde‡
USE_NW_PATH0


474 
	#XXGE_PHY_PRTAD
 0

	)

476 
	#XXGE_PHY_PRTAD
 1

	)

478 
	#XXGE_PHY_DEVAD
 3

	)

479 
	#XXGE_PHY_ADDRESS
 ((
XXGE_PHY_PRTAD
 << 24Ë| (
XXGE_PHY_DEVAD
 << 16))

	)

485 
	#XXGE_RX
 1

	)

486 
	#XXGE_TX
 2

	)

494 #ifde‡
X86_64


495 
	sXXgEthî√t_C⁄fig
 {

496 
u16
 
Devi˚Id
;

497 
u64
 
Ba£Addªss
;

500 
u8
 
TemacTy≥
;

504 
u8
 
TxVœnTøn
;

505 
u8
 
RxVœnTøn
;

506 
u8
 
TxVœnTag
;

507 
u8
 
RxVœnTag
;

508 
u8
 
TxVœnSåp
;

509 
u8
 
RxVœnSåp
;

510 
u8
 
ExtMˇ°
;

512 
u8
 
Sèts
;

514 } 
	tXXgEthî√t_C⁄fig
;

516 
	sXXgEthî√t_C⁄fig
 {

517 
u16
 
Devi˚Id
;

518 
u32
 
Ba£Addªss
;

521 
u8
 
TemacTy≥
;

525 
u8
 
TxVœnTøn
;

526 
u8
 
RxVœnTøn
;

527 
u8
 
TxVœnTag
;

528 
u8
 
RxVœnTag
;

529 
u8
 
TxVœnSåp
;

530 
u8
 
RxVœnSåp
;

531 
u8
 
ExtMˇ°
;

533 
u8
 
Sèts
;

535 } 
	tXXgEthî√t_C⁄fig
;

544 
	sXXgEthî√t
 {

545 
XXgEthî√t_C⁄fig
 
C⁄fig
;

546 
u32
 
IsSèπed
;

547 
u32
 
IsRódy
;

548 
u32
 
O±i⁄s
;

549 
u32
 
Fœgs
;

550 } 
	tXXgEthî√t
;

575 
	#XXgEthî√t_IsSèπed
(
In°™˚På
) \

576 (((
In°™˚På
)->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
Ë? 
TRUE
 : 
FALSE
)

	)

598 
	#XXgEthî√t_IsSètsC⁄figuªd
(
In°™˚På
) \

599 (((
In°™˚På
)->
C⁄fig
.
Sèts
Ë? 
TRUE
 : 
FALSE
)

	)

606 #ifde‡
X86_64


607 
XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
, 
XXgEthî√t_C⁄fig
 *
CfgPå
,
u64
 
VútuÆAddªss
);

609 
XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
, 
XXgEthî√t_C⁄fig
 *
CfgPå
,
u32
 
VútuÆAddªss
);

611 
XXgEthî√t_Sèπ
(
XXgEthî√t
 *
In°™˚På
);

612 
XXgEthî√t_St›
(
XXgEthî√t
 *
In°™˚På
);

613 
XXgEthî√t_Re£t
(
XXgEthî√t
 *
In°™˚På
);

618 
XXgEthî√t_C⁄fig
 *
XXgEthî√t_LookupC⁄fig
(
u16
 
Devi˚Id
);

623 
XXgEthî√t_SëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
);

624 
XXgEthî√t_CÀ¨O±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
);

625 
u32
 
XXgEthî√t_GëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
);

627 
XXgEthî√t_SëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
);

628 
XXgEthî√t_GëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
);

630 
XXgEthî√t_SëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

631 *
AddªssPå
);

632 
XXgEthî√t_GëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

633 *
AddªssPå
);

634 
XXgEthî√t_SídPau£Packë
(
XXgEthî√t
 *
In°™˚På
, 
u16
 
Pau£VÆue
);

637 
XXgEthî√t_SëBadFrmRcvO±i⁄
(
XXgEthî√t
 *
In°™˚På
);

638 
XXgEthî√t_CÀ¨BadFrmRcvO±i⁄
(
XXgEthî√t
 *
In°™˚På
);

640 
XXgEthî√t_DißbÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
);

641 
XXgEthî√t_E«bÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
);

643 
XXgEthî√t_PhySëMdioDivis‹
(
XXgEthî√t
 *
In°™˚På
, 
u8
 
Divis‹
);

644 
XXgEthî√t_PhyRód
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

645 
u32
 
Regi°îNum
, 
u16
 *
PhyD©aPå
);

646 
XXgEthî√t_PhyWrôe
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

647 
u32
 
Regi°îNum
, 
u16
 
PhyD©a
);

650 #ifde‡
__˝lu•lus


	@xxgbeth0/xxgethernet_control.c

76 
	~"xxgëhî√t.h
"

113 
	$XXgEthî√t_SëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

114 *
AddªssPå
)

116 
u32
 
MacAddr
;

117 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

119 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

120 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

121 
	`Xû_As£πN⁄void
(
AddªssPå
 !
NULL
);

123 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_SetMacPauseAddress\n");

126 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

127 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

129  (
XST_DEVICE_IS_STARTED
);

133 
MacAddr
 = 
A±r
[0];

134 
MacAddr
 |
A±r
[1] << 8;

135 
MacAddr
 |
A±r
[2] << 16;

136 
MacAddr
 |
A±r
[3] << 24;

137 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

138 
XXGE_RCW0_OFFSET
, 
MacAddr
);

141 
MacAddr
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

142 
XXGE_RCW1_OFFSET
);

143 
MacAddr
 &~
XXGE_RCW1_PAUSEADDR_MASK
;

146 
MacAddr
 |
A±r
[4];

147 
MacAddr
 |
A±r
[5] << 8;

148 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

149 
XXGE_RCW1_OFFSET
, 
MacAddr
);

151 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

154  (
XST_SUCCESS
);

155 
	}
}

174 
	$XXgEthî√t_GëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

175 *
AddªssPå
)

177 
u32
 
MacAddr
;

178 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

180 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

181 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

182 
	`Xû_As£πVoid
(
AddªssPå
 !
NULL
);

185 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_SetMacPauseAddress\n");

188 
MacAddr
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

189 
XXGE_RCW0_OFFSET
);

190 
A±r
[0] = (
u8
Ë
MacAddr
;

191 
A±r
[1] = (
u8
Ë(
MacAddr
 >> 8);

192 
A±r
[2] = (
u8
Ë(
MacAddr
 >> 16);

193 
A±r
[3] = (
u8
Ë(
MacAddr
 >> 24);

196 
MacAddr
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

197 
XXGE_RCW1_OFFSET
);

198 
A±r
[4] = (
u8
Ë
MacAddr
;

199 
A±r
[5] = (
u8
Ë(
MacAddr
 >> 8);

201 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

203 
	}
}

	@xxgbeth0/xxgethernet_hw.h

70 #i‚de‡
XXGETHERNET_HW_H


71 
	#XXGETHERNET_HW_H


	)

74 #ifdef 
XPS__LL_MAC_H


75 #unde‡
XPS__LL_MAC_H


80 
	~"xdebug.h
"

82 
	~"xio.h
"

83 
	~"xbasic_ty≥s.h
"

85 #ifde‡
__˝lu•lus


106 
	#XXGE_RXBL_OFFSET
 0x00000200

	)

107 
	#XXGE_RXBU_OFFSET
 0x00000204

	)

108 
	#XXGE_TXBL_OFFSET
 0x00000208

	)

109 
	#XXGE_TXBU_OFFSET
 0x0000020C

	)

110 
	#XXGE_RXUNDRL_OFFSET
 0x00000210

	)

114 
	#XXGE_RXUNDRU_OFFSET
 0x00000214

	)

118 
	#XXGE_RXFRAGL_OFFSET
 0x00000218

	)

122 
	#XXGE_RXFRAGU_OFFSET
 0x0000021C

	)

126 
	#XXGE_RX64BL_OFFSET
 0x00000220

	)

129 
	#XXGE_RX64BU_OFFSET
 0x00000224

	)

132 
	#XXGE_RX65B127L_OFFSET
 0x00000228

	)

135 
	#XXGE_RX65B127U_OFFSET
 0x0000022C

	)

138 
	#XXGE_RX128B255L_OFFSET
 0x00000230

	)

141 
	#XXGE_RX128B255U_OFFSET
 0x00000234

	)

144 
	#XXGE_RX256B511L_OFFSET
 0x00000238

	)

147 
	#XXGE_RX256B511U_OFFSET
 0x0000023C

	)

150 
	#XXGE_RX512B1023L_OFFSET
 0x00000240

	)

153 
	#XXGE_RX512B1023U_OFFSET
 0x00000244

	)

156 
	#XXGE_RX1024BL_OFFSET
 0x00000248

	)

159 
	#XXGE_RX1024BU_OFFSET
 0x0000024C

	)

162 
	#XXGE_RXOVRL_OFFSET
 0x00000250

	)

165 
	#XXGE_RXOVRU_OFFSET
 0x00000254

	)

168 
	#XXGE_TX64BL_OFFSET
 0x00000258

	)

171 
	#XXGE_TX64BU_OFFSET
 0x0000025C

	)

174 
	#XXGE_TX65B127L_OFFSET
 0x00000260

	)

177 
	#XXGE_TX65B127U_OFFSET
 0x00000264

	)

180 
	#XXGE_TX128B255L_OFFSET
 0x00000268

	)

183 
	#XXGE_TX128B255U_OFFSET
 0x0000026C

	)

186 
	#XXGE_TX256B511L_OFFSET
 0x00000270

	)

189 
	#XXGE_TX256B511U_OFFSET
 0x00000274

	)

192 
	#XXGE_TX512B1023L_OFFSET
 0x00000278

	)

195 
	#XXGE_TX512B1023U_OFFSET
 0x0000027C

	)

198 
	#XXGE_TX1024L_OFFSET
 0x00000280

	)

201 
	#XXGE_TX1024U_OFFSET
 0x00000284

	)

204 
	#XXGE_TXOVRL_OFFSET
 0x00000288

	)

207 
	#XXGE_TXOVRU_OFFSET
 0x0000028C

	)

210 
	#XXGE_RXFL_OFFSET
 0x00000290

	)

213 
	#XXGE_RXFU_OFFSET
 0x00000294

	)

216 
	#XXGE_RXFCSERL_OFFSET
 0x00000298

	)

219 
	#XXGE_RXFCSERU_OFFSET
 0x0000029C

	)

222 
	#XXGE_RXBCSTFL_OFFSET
 0x000002A0

	)

225 
	#XXGE_RXBCSTFU_OFFSET
 0x000002A4

	)

228 
	#XXGE_RXMCSTFL_OFFSET
 0x000002A8

	)

231 
	#XXGE_RXMCSTFU_OFFSET
 0x000002AC

	)

234 
	#XXGE_RXCTRFL_OFFSET
 0x000002B0

	)

237 
	#XXGE_RXCTRFU_OFFSET
 0x000002B4

	)

240 
	#XXGE_RXLTERL_OFFSET
 0x000002B8

	)

243 
	#XXGE_RXLTERU_OFFSET
 0x000002BC

	)

246 
	#XXGE_RXVLANFL_OFFSET
 0x000002C0

	)

249 
	#XXGE_RXVLANFU_OFFSET
 0x000002C4

	)

252 
	#XXGE_RXPFL_OFFSET
 0x000002C8

	)

255 
	#XXGE_RXPFU_OFFSET
 0x000002CC

	)

258 
	#XXGE_RXUOPFL_OFFSET
 0x000002D0

	)

262 
	#XXGE_RXUOPFU_OFFSET
 0x000002D4

	)

266 
	#XXGE_TXFL_OFFSET
 0x000002D8

	)

269 
	#XXGE_TXFU_OFFSET
 0x000002DC

	)

272 
	#XXGE_TXBCSTFL_OFFSET
 0x000002E0

	)

275 
	#XXGE_TXBCSTFU_OFFSET
 0x000002E4

	)

278 
	#XXGE_TXMCSTFL_OFFSET
 0x000002E8

	)

281 
	#XXGE_TXMCSTFU_OFFSET
 0x000002EC

	)

284 
	#XXGE_TXUNDRERL_OFFSET
 0x000002F0

	)

287 
	#XXGE_TXUNDRERU_OFFSET
 0x000002F4

	)

290 
	#XXGE_TXCTRFL_OFFSET
 0x000002F8

	)

294 
	#XXGE_TXCTRFU_OFFSET
 0x000002FC

	)

298 
	#XXGE_TXVLANFL_OFFSET
 0x00000300

	)

301 
	#XXGE_TXVLANFU_OFFSET
 0x00000304

	)

304 
	#XXGE_TXPFL_OFFSET
 0x00000308

	)

307 
	#XXGE_TXPFU_OFFSET
 0x0000030C

	)

314 
	#XXGE_RCW0_OFFSET
 0x00000400

	)

315 
	#XXGE_RCW1_OFFSET
 0x00000404

	)

316 
	#XXGE_TC_OFFSET
 0x00000408

	)

317 
	#XXGE_FCC_OFFSET
 0x0000040C

	)

319 
	#XXGE_GERS_OFFSET
 0x00000410

	)

321 
	#XXGE_RMTU_OFFSET
 0x00000414

	)

322 
	#XXGE_TMTU_OFFSET
 0x00000418

	)

323 
	#XXGE_VER_OFFSET
 0x000004F8

	)

324 
	#XXGE_CAP_OFFSET
 0x000004FC

	)

327 
	#XXGE_MDIO_REGISTER_ADDRESS
 32

	)

328 
	#XXGE_MDIO_CFG0_OFFSET
 0x00000500

	)

329 
	#XXGE_MDIO_CFG1_OFFSET
 0x00000504

	)

330 
	#XXGE_MDIO_TX_DATA_OFFSET
 0x00000508

	)

331 
	#XXGE_MDIO_RX_DATA_OFFSET
 0x0000050C

	)

333 
	#XXGE_TC_TXCONTROLBIT
 0x1C

	)

337 #i‡
deföed
 
XGEMAC_MAC1__


340 
	#XXGE_AFC_OFFSET
 0x00009400

	)

341 
	#XXGE_MACL_OFFSET
 0x00009404

	)

342 
	#XXGE_MACU_OFFSET
 0x00009408

	)

343 #ñi‡ 
deföed
 
XGEMAC_MAC2__


346 
	#XXGE_AFC_OFFSET
 0x0000940C

	)

347 
	#XXGE_MACL_OFFSET
 0x00009410

	)

348 
	#XXGE_MACU_OFFSET
 0x00009414

	)

350 #W¨nög: 
No
 
MAC
 
is
 
©èched
 
to
 
this
 
Drivî
 
ö°™˚
 
Neôhî
 
MAC1
 
n‹
 
MAC2
.

361 
	#XXGE_AFC_PM_MASK
 0x00000004

	)

368 
	#XXGE_TPF_TPFV_MASK
 0x0000FFFF

	)

374 
	#XXGE_RCW1_RST_MASK
 0x80000000

	)

375 
	#XXGE_RCW1_JUM_MASK
 0x40000000

	)

376 
	#XXGE_RCW1_FCS_MASK
 0x20000000

	)

378 
	#XXGE_RCW1_RX_MASK
 0x10000000

	)

379 
	#XXGE_RCW1_VLAN_MASK
 0x08000000

	)

380 
	#XXGE_RCW1_HD_MASK
 0x04000000

	)

381 
	#XXGE_RCW1_LT_DIS_MASK
 0x02000000

	)

384 
	#XXGE_RCW1_CL_DIS_MASK
 0x01000000

	)

387 
	#XXGE_RCW1_PAUSEADDR_MASK
 0x0000FFFF

	)

398 
	#XXGE_TC_RST_MASK
 0x80000000

	)

399 
	#XXGE_TC_JUM_MASK
 0x40000000

	)

400 
	#XXGE_TC_FCS_MASK
 0x20000000

	)

403 
	#XXGE_TC_TX_MASK
 0x10000000

	)

404 
	#XXGE_TC_VLAN_MASK
 0x08000000

	)

405 
	#XXGE_TC_HD_MASK
 0x04000000

	)

406 
	#XXGE_TC_IFG_MASK
 0x02000000

	)

410 
	#XXGE_TC_TPP_MASK
 0x00800000

	)

411 
	#XXGE_TC_DIC_MASK
 0x01000000

	)

418 
	#XXGE_FCC_FCRX_MASK
 0x20000000

	)

419 
	#XXGE_FCC_FCTX_MASK
 0x40000000

	)

425 
	#XXGE_RSC_FI_MASK
 0x08000000

	)

426 
	#XXGE_RSC_LFR_MASK
 0x10000000

	)

427 
	#XXGE_RSC_SGMII_MASK
 0x20000000

	)

428 
	#XXGE_RSC_GPCS_MASK
 0x40000000

	)

429 
	#XXGE_RSC_HOST_MASK
 0x80000000

	)

435 
	#XXGE_RMTU_FI_MASK
 0x00010000

	)

436 
	#XXGE_RMTU_LFR_MASK
 0x

	)

442 
	#XXGE_TMTU_FI_MASK
 0x00010000

	)

443 
	#XXGE_TMTU_LFR_MASK
 0x0001FFFF

	)

449 
	#XXGE_VER_MAJ
 0xFF000000

	)

450 
	#XXGE_VER_MIN
 0x00FF0000

	)

451 
	#XXGE_VER_PTCH
 0x000000FF

	)

457 
	#XXGE_CAP_STAT_MASK
 0x00000100

	)

458 
	#XXGE_CAP_LC10G_MASK
 0x00000008

	)

459 
	#XXGE_CAP_LC1G_MASK
 0x00000004

	)

460 
	#XXGE_CAP_LC100M_MASK
 0x00000002

	)

461 
	#XXGE_CAP_LC10M_MASK
 0x00000001

	)

467 
	#XXGE_MDIO_CFG0_MDIOEN_MASK
 0x00000040

	)

468 
	#XXGE_MDIO_CFG0_CLOCK_DIVIDE_MAX
 0x3F

	)

469 
	#XXGE_MDIO_PHY_LINK_UP_MASK
 0x1000

	)

472 
	#XXGE_MDIO_MC_MDIOPRTAD_MASK
 0x1F000000

	)

473 
	#XXGE_MDIO_MC_CLOCK_DEVAD_MAX
 0x001F0000

	)

474 
	#XXGE_MDIO_MC_MDIO_TXOP_MASK
 0x0000C000

	)

475 
	#XXGE_MDIO_CFG1_INITIATE_MASK
 0x00000800

	)

476 
	#XXGE_MDIO_CFG1_READY_MASK
 0x00000080

	)

477 
	#XXGE_MDIO_CFG1_OP_SETADDR_MASK
 0x00000000

	)

478 
	#XXGE_MDIO_CFG1_OP_READ_MASK
 0x0000C000

	)

479 
	#XXGE_MDIO_CFG1_OP_WRITE_MASK
 0x00004000

	)

486 
	#XXGE_MDIO_TX_DATA_MASK
 0x0000FFFF

	)

491 
	#XXGE_MDIO_RX_DATA_MASK
 0x0000FFFF

	)

502 
	#XXGE_SPEED_10_GBPS
 10000

	)

503 
	#XXGE_SPEED_1_GBPS
 1000

	)

504 
	#XXGE_SPEED_100_MBPS
 100

	)

505 
	#XXGE_SPEED_10_MBPS
 10

	)

507 
	#XXGE_PHY_ADDR_LIMIT
 36

	)

511 
	#XXGE_PHY_REG_NUM_LIMIT
 35

	)

514 
	#XXGE_LOOPS_TO_COME_OUT_OF_RST
 5000

	)

519 
	#XXGE_RST_DELAY_LOOPCNT_VAL
 4

	)

534 
xdbg_°m¡
(
ödít_⁄
);

536 
	#XXgEthî√t_ödít
(
RegOff£t
) \

537 ((
ödít_⁄
 && ((
RegOff£t
Ë>
XXGE_RAF_OFFSET
) && ((RegOffset) <= \

538 
XXGE_RXAERU_OFFSET
)Ë? "\t" : "")

	)

541 
	#XXgEthî√t_ªg_«me
(
RegOff£t
) \

542 ((
RegOff£t
Ë=
XXGE_RXBL_OFFSET
) ? "XXGE_RXBL_OFFSET": \

543 ((
RegOff£t
Ë=
XXGE_RXBU_OFFSET
) ? "XXGE_RXBU_OFFSET": \

544 ((
RegOff£t
Ë=
XXGE_TXBL_OFFSET
) ? "XXGE_TXBL_OFFSET": \

545 ((
RegOff£t
Ë=
XXGE_TXBU_OFFSET
) ? "XXGE_TXBU_OFFSET": \

546 ((
RegOff£t
Ë=
XXGE_RXUNDRL_OFFSET
) ? "XXGE_RXUNDRL_OFFSET": \

547 ((
RegOff£t
Ë=
XXGE_RXUNDRU_OFFSET
) ? "XXGE_RXUNDRU_OFFSET": \

548 ((
RegOff£t
Ë=
XXGE_RXFRAGL_OFFSET
) ? "XXGE_RXFRAGL_OFFSET": \

549 ((
RegOff£t
Ë=
XXGE_RXFRAGU_OFFSET
) ? "XXGE_RXFRAGU_OFFSET": \

550 ((
RegOff£t
Ë=
XXGE_RX64BL_OFFSET
) ? "XXGE_RX64BL_OFFSET": \

551 ((
RegOff£t
Ë=
XXGE_RX64BU_OFFSET
) ? "XXGE_RX64BU_OFFSET": \

552 ((
RegOff£t
Ë=
XXGE_RX65B127L_OFFSET
) ? "XXGE_RX65B127L_OFFSET": \

553 ((
RegOff£t
Ë=
XXGE_RX65B127U_OFFSET
) ? "XXGE_RX65B127U_OFFSET": \

554 ((
RegOff£t
Ë=
XXGE_RX128B255L_OFFSET
) ? "XXGE_RX128B255L_OFFSET": \

555 ((
RegOff£t
Ë=
XXGE_RX128B255U_OFFSET
) ? "XXGE_RX128B255U_OFFSET": \

556 ((
RegOff£t
Ë=
XXGE_RX256B511L_OFFSET
) ? "XXGE_RX256B511L_OFFSET": \

557 ((
RegOff£t
Ë=
XXGE_RX256B511U_OFFSET
) ? "XXGE_RX256B511U_OFFSET": \

558 ((
RegOff£t
Ë=
XXGE_RX512B1023L_OFFSET
) ? "XXGE_RX512B1023L_OFFSET": \

559 ((
RegOff£t
Ë=
XXGE_RX512B1023U_OFFSET
) ? "XXGE_RX512B1023U_OFFSET": \

560 ((
RegOff£t
Ë=
XXGE_RX1024BL_OFFSET
) ? "XXGE_RX1024L_OFFSET": \

561 ((
RegOff£t
Ë=
XXGE_RX1024BU_OFFSET
) ? "XXGE_RX1024U_OFFSET": \

562 ((
RegOff£t
Ë=
XXGE_RXOVRL_OFFSET
) ? "XXGE_RXOVRL_OFFSET": \

563 ((
RegOff£t
Ë=
XXGE_RXOVRU_OFFSET
) ? "XXGE_RXOVRU_OFFSET": \

564 ((
RegOff£t
Ë=
XXGE_TX64BL_OFFSET
) ? "XXGE_TX64BL_OFFSET": \

565 ((
RegOff£t
Ë=
XXGE_TX64BU_OFFSET
) ? "XXGE_TX64BU_OFFSET": \

566 ((
RegOff£t
Ë=
XXGE_TX65B127L_OFFSET
) ? "XXGE_TX65B127L_OFFSET": \

567 ((
RegOff£t
Ë=
XXGE_TX65B127U_OFFSET
) ? "XXGE_TX65B127U_OFFSET": \

568 ((
RegOff£t
Ë=
XXGE_TX128B255L_OFFSET
) ? "XXGE_TX128B255L_OFFSET": \

569 ((
RegOff£t
Ë=
XXGE_TX128B255U_OFFSET
) ? "XXGE_TX128B255U_OFFSET": \

570 ((
RegOff£t
Ë=
XXGE_TX256B511L_OFFSET
) ? "XXGE_TX256B511L_OFFSET": \

571 ((
RegOff£t
Ë=
XXGE_TX256B511U_OFFSET
) ? "XXGE_TX256B511U_OFFSET": \

572 ((
RegOff£t
Ë=
XXGE_TX512B1023L_OFFSET
) ? "XXGE_TX512B1023L_OFFSET": \

573 ((
RegOff£t
Ë=
XXGE_TX512B1023U_OFFSET
) ? "XXGE_TX512B1023U_OFFSET": \

574 ((
RegOff£t
Ë=
XXGE_TX1024L_OFFSET
) ? "XXGE_TX1024L_OFFSET": \

575 ((
RegOff£t
Ë=
XXGE_TX1024U_OFFSET
) ? "XXGE_TX1024U_OFFSET": \

576 ((
RegOff£t
Ë=
XXGE_TXOVRL_OFFSET
) ? "XXGE_TXOVRL_OFFSET": \

577 ((
RegOff£t
Ë=
XXGE_TXOVRU_OFFSET
) ? "XXGE_TXOVRU_OFFSET": \

578 ((
RegOff£t
Ë=
XXGE_RXFL_OFFSET
) ? "XXGE_RXFL_OFFSET": \

579 ((
RegOff£t
Ë=
XXGE_RXFU_OFFSET
) ? "XXGE_RXFU_OFFSET": \

580 ((
RegOff£t
Ë=
XXGE_RXFCSERL_OFFSET
) ? "XXGE_RXFCSERL_OFFSET": \

581 ((
RegOff£t
Ë=
XXGE_RXFCSERU_OFFSET
) ? "XXGE_RXFCSERU_OFFSET": \

582 ((
RegOff£t
Ë=
XXGE_RXBCSTFL_OFFSET
) ? "XXGE_RXBCSTFL_OFFSET": \

583 ((
RegOff£t
Ë=
XXGE_RXBCSTFU_OFFSET
) ? "XXGE_RXBCSTFU_OFFSET": \

584 ((
RegOff£t
Ë=
XXGE_RXMCSTFL_OFFSET
) ? "XXGE_RXMCSTFL_OFFSET": \

585 ((
RegOff£t
Ë=
XXGE_RXMCSTFU_OFFSET
) ? "XXGE_RXMCSTFU_OFFSET": \

586 ((
RegOff£t
Ë=
XXGE_RXCTRFL_OFFSET
) ? "XXGE_RXCTRFL_OFFSET": \

587 ((
RegOff£t
Ë=
XXGE_RXCTRFU_OFFSET
) ? "XXGE_RXCTRFU_OFFSET": \

588 ((
RegOff£t
Ë=
XXGE_RXLTERL_OFFSET
) ? "XXGE_RXLTERL_OFFSET": \

589 ((
RegOff£t
Ë=
XXGE_RXLTERU_OFFSET
) ? "XXGE_RXLTERU_OFFSET": \

590 ((
RegOff£t
Ë=
XXGE_RXVLANFL_OFFSET
) ? "XXGE_RXVLANFL_OFFSET": \

591 ((
RegOff£t
Ë=
XXGE_RXVLANFU_OFFSET
) ? "XXGE_RXVLANFU_OFFSET": \

592 ((
RegOff£t
Ë=
XXGE_RXPFL_OFFSET
) ? "XXGE_RXFL_OFFSET": \

593 ((
RegOff£t
Ë=
XXGE_RXPFU_OFFSET
) ? "XXGE_RXFU_OFFSET": \

594 ((
RegOff£t
Ë=
XXGE_RXUOPFL_OFFSET
) ? "XXGE_RXUOPFL_OFFSET": \

595 ((
RegOff£t
Ë=
XXGE_RXUOPFU_OFFSET
) ? "XXGE_RXUOPFU_OFFSET": \

596 ((
RegOff£t
Ë=
XXGE_TXFL_OFFSET
) ? "XXGE_TXFL_OFFSET": \

597 ((
RegOff£t
Ë=
XXGE_TXFU_OFFSET
) ? "XXGE_TXFU_OFFSET": \

598 ((
RegOff£t
Ë=
XXGE_TXBCSTFL_OFFSET
) ? "XXGE_TXBCSTFL_OFFSET": \

599 ((
RegOff£t
Ë=
XXGE_TXBCSTFU_OFFSET
) ? "XXGE_TXBCSTFU_OFFSET": \

600 ((
RegOff£t
Ë=
XXGE_TXMCSTFL_OFFSET
) ? "XXGE_TXMCSTFL_OFFSET": \

601 ((
RegOff£t
Ë=
XXGE_TXMCSTFU_OFFSET
) ? "XXGE_TXMCSTFU_OFFSET": \

602 ((
RegOff£t
Ë=
XXGE_TXUNDRERL_OFFSET
) ? "XXGE_TXUNDRERL_OFFSET": \

603 ((
RegOff£t
Ë=
XXGE_TXUNDRERU_OFFSET
) ? "XXGE_TXUNDRERU_OFFSET": \

604 ((
RegOff£t
Ë=
XXGE_TXCTRFL_OFFSET
) ? "XXGE_TXCTRFL_OFFSET": \

605 ((
RegOff£t
Ë=
XXGE_TXCTRFU_OFFSET
) ? "XXGE_TXCTRFU_OFFSET": \

606 ((
RegOff£t
Ë=
XXGE_TXVLANFL_OFFSET
) ? "XXGE_TXVLANFL_OFFSET": \

607 ((
RegOff£t
Ë=
XXGE_TXVLANFU_OFFSET
) ? "XXGE_TXVLANFU_OFFSET": \

608 ((
RegOff£t
Ë=
XXGE_TXPFL_OFFSET
) ? "XXGE_TXPFL_OFFSET": \

609 ((
RegOff£t
Ë=
XXGE_TXPFU_OFFSET
) ? "XXGE_TXPFU_OFFSET": \

610 ((
RegOff£t
Ë=
XXGE_RCW0_OFFSET
) ? "XXGE_RCW0_OFFSET": \

611 ((
RegOff£t
Ë=
XXGE_RCW1_OFFSET
) ? "XXGE_RCW1_OFFSET": \

612 ((
RegOff£t
Ë=
XXGE_TC_OFFSET
) ? "XXGE_TC_OFFSET": \

613 ((
RegOff£t
Ë=
XXGE_FCC_OFFSET
) ? "XXGE_FCC_OFFSET": \

614 ((
RegOff£t
Ë=
XXGE_GERS_OFFSET
) ? "XXGE_GERS_OFFSET": \

615 ((
RegOff£t
Ë=
XXGE_RMTU_OFFSET
) ? "XXGE_RMTU_OFFSET": \

616 ((
RegOff£t
Ë=
XXGE_TMTU_OFFSET
) ? "XXGE_TMTU_OFFSET": \

617 ((
RegOff£t
Ë=
XXGE_VER_OFFSET
) ? "XXGE_VER_OFFSET": \

618 ((
RegOff£t
Ë=
XXGE_CAP_OFFSET
) ? "XXGE_CAP_OFFSET": \

619 ((
RegOff£t
Ë=
XXGE_MDIO_CFGL_OFFSET
) ? "XXGE_MDIO_CFGL_OFFSET": \

620 ((
RegOff£t
Ë=
XXGE_MDIO_CFGL_OFFSET
) ? "XXGE_MDIO_CFGL_OFFSET": \

621 ((
RegOff£t
Ë=
XXGE_MDIO_TX_OFFSET
) ? "XXGE_MDIO_TX_OFFSET": \

622 ((
RegOff£t
Ë=
XXGE_MDIO_RX_OFFSET
) ? "XXGE_MDIO_RX_OFFSET": \

623 ((
RegOff£t
Ë=
XXGE_MDIO_MIS_OFFSET
) ? "XXGE_MDIO_MIS_OFFSET": \

624 ((
RegOff£t
Ë=
XXGE_MDIO_MIP_OFFSET
) ? "XXGE_MDIO_MIP_OFFSET": \

625 ((
RegOff£t
Ë=
XXGE_MDIO_MIE_OFFSET
) ? "XXGE_MDIO_MIE_OFFSET": \

626 ((
RegOff£t
Ë=
XXGE_MDIO_MIA_OFFSET
) ? "XXGE_MDIO_MIA_OFFSET": \

627 ((
RegOff£t
Ë=
XXGE_AFC_OFFSET
) ? "XXGE_AFC_OFFSET": \

628 ((
RegOff£t
Ë=
XXGE_MACL_OFFSET
) ? "XXGE_MACL_OFFSET": \

629 ((
RegOff£t
Ë=
XXGE_MACU_OFFSET
) ? "XXGE_MACU_OFFSET": \

630 "unknown")

	)

632 
	#XXgEthî√t_¥öt_ªg_o
(
Ba£Addªss
, 
RegOff£t
, 
VÆue
) \

633 
	`xdbg_¥ötf
(
XDBG_DEBUG_TEMAC_REG
, "%s0x%0x -> %s(0x%0x)\n", \

634 
	`XXgEthî√t_ödít
(
RegOff£t
), (
VÆue
), \

635 
	`XXgEthî√t_ªg_«me
(
RegOff£t
), (RegOff£t))

	)

637 
	#XXgEthî√t_¥öt_ªg_i
(
Ba£Addªss
, 
RegOff£t
, 
VÆue
) \

638 
	`xdbg_¥ötf
(
XDBG_DEBUG_TEMAC_REG
, "%s%s(0x%0x) -> 0x%0x\n", \

639 
	`XXgEthî√t_ödít
(
RegOff£t
), \

640 
	`XXgEthî√t_ªg_«me
(
RegOff£t
),(RegOff£t), (
VÆue
))

	)

657 #ifde‡
DEBUG


658 
	#XXgEthî√t_RódReg
(
Ba£Addªss
, 
RegOff£t
) \

660 
u32
 
vÆue
; \

661 
vÆue
 = 
	`Xû_In32
(((
Ba£Addªss
Ë+ (
RegOff£t
))); \

662 
	`XXgEthî√t_¥öt_ªg_i
((
Ba£Addªss
), (
RegOff£t
), 
vÆue
); \

663 })

	)

665 #ifde‡
X86_64


666 
	#XXgEthî√t_RódReg
(
Ba£Addªss
, 
RegOff£t
) \

667 (
	`Xû_In32
((((
u64
)(
Ba£Addªss
)Ë+ ()(
RegOff£t
))))

	)

669 
	#XXgEthî√t_RódReg
(
Ba£Addªss
, 
RegOff£t
) \

670 (
	`Xû_In32
(((
Ba£Addªss
Ë+ (
RegOff£t
))))

	)

691 #ifde‡
DEBUG


692 
	#XXgEthî√t_WrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

694 
	`XXgEthî√t_¥öt_ªg_o
((
Ba£Addªss
), (
RegOff£t
), (
D©a
)); \

695 
	`Xû_Out32
(((
Ba£Addªss
Ë+ (
RegOff£t
)), (
D©a
)); \

696 })

	)

698 #ifde‡
X86_64


699 
	#XXgEthî√t_WrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

700 
	`Xû_Out32
((((
u64
)(
Ba£Addªss
)Ë+ ()(
RegOff£t
)), (
D©a
));

	)

702 
	#XXgEthî√t_WrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

703 
	`Xû_Out32
(((
Ba£Addªss
Ë+ (
RegOff£t
)), (
D©a
));

	)

708 #ifde‡
__˝lu•lus


	@xxgbeth1/xbasic_types.c

68 
	~<löux/moduÀ.h
>

69 
	~"xbasic_ty≥s.h
"

82 
	gXAs£πSètus
;

89 
	gXWaôInAs£π
 = 
TRUE
;

92 
XAs£πCÆlback
 
	gXAs£πCÆlbackRoutöe
 = (XAs£πCÆlbackË
NULL
;

111 
	$XAs£π
(*
Fûe
, 
Löe
)

114 i‡(
XAs£πCÆlbackRoutöe
 !
NULL
) {

115 (*
XAs£πCÆlbackRoutöe
Ë(
Fûe
, 
Löe
);

121 
XWaôInAs£π
) {

123 
	}
}

138 
	$XAs£πSëCÆlback
(
XAs£πCÆlback
 
Routöe
)

140 
XAs£πCÆlbackRoutöe
 = 
Routöe
;

141 
	}
}

158 
	$XNuŒH™dÀr
(*
NuŒP¨amëî
)

160 
	}
}

	@xxgbeth1/xgadapter.c

164 
	~<löux/vîsi⁄.h
>

165 
	~<löux/pci.h
>

166 
	~<löux/moduÀ.h
>

167 
	~<löux/kî√l.h
>

168 
	~<löux/öô.h
>

169 
	~<löux/mm.h
>

170 
	~<löux/√tdevi˚.h
>

171 
	~<löux/ëhîdevi˚.h
>

172 
	~<löux/mii.h
>

173 
	~<löux/dñay.h
>

174 
	~<löux/dma-m≠pög.h
>

175 
	~<asm/io.h
>

176 
	~<löux/ëhtoﬁ.h
>

177 
	~<löux/vmÆloc.h
>

178 
	~<löux/•ölock.h
>

180 
	~"xgad≠ãr.h
"

181 
	~"xxgëhî√t.h
"

182 
	~"xdma_u£r.h
"

201 #ifde‡
USE_NW_PATH0


202 
	#TX_ENGINE
 0

	)

203 
	#RX_ENGINE
 32

	)

204 
	#NW_PATH_OFFSET
 0xB000

	)

207 #ifde‡
USE_NW_PATH1


208 
	#TX_ENGINE
 1

	)

209 
	#RX_ENGINE
 33

	)

210 
	#NW_PATH_OFFSET
 0xC000

	)

215 
	#DESIGN_MODE_ADDRESS
 0x9004

	)

216 
	#PERF_DESIGN_MODE
 0x00000000

	)

218 
	#UNINITIALIZED
 0

	)

219 
	#INITIALIZED_TOP
 1

	)

220 
	#INITIALIZED_FIRST
 2

	)

223 
	#INITIALIZED_SECOND
 3

	)

226 
	#READY
 4

	)

227 #unde‡
UNREGISTERING


228 
	#UNREGISTERING
 5

	)

229 #ifde‡
PM_SUPPORT


230 
	#PM_SUSPEND
 6

	)

233 
	#TEMAC_BAR
 0

	)

234 
	#TEMAC_OFFSET
 0x0

	)

235 
	#TEMAC_SIZE
 0x400

	)

236 
	#TEMAC_PKTSIZE
 1600

	)

239 
	#XXGE_AUTOSTRIPPING
 1

	)

246 
	#DRIVER_NAME
 "xxgbëh_drivî"

	)

247 
	#DRIVER_DESCRIPTION
 "Xûöx 10 Gigabô Ethî√à(XGEMACËLöux drivî"

	)

248 
	#DRIVER_VERSION
 "1.0"

	)

251 
	#TX_TIMEOUT
 (3*
HZ
Ë

	)

256 
	#ALIGNMENT_RECV
 32

	)

257 
	#BUFFER_ALIGNRECV
(
adr
Ë((
ALIGNMENT_RECV
 - ((
u32
Ëadr)Ë% ALIGNMENT_RECV)

	)

260 
	eDUPLEX
 { 
	mUNKNOWN_DUPLEX
, 
	mHALF_DUPLEX
, 
	mFULL_DUPLEX
 } 
	tDUPLEX
;

265 
√t_devi˚
 *
	gndev
 = 
NULL
;

270 
PktBuf
 
	gPkt
[
MAX_SKB_FRAGS
];

279 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 29)

280 
xíë_£t_√tdev_›s
(
√t_devi˚
 *, 
√t_devi˚_›s
 *);

282 #ifde‡
X86_64


283 
xã√t_öô_bŸtom
(
u64
 , u64 );

284 
myRxGëPkt
(*, 
PktBuf
 *, , , 
u64
);

285 
myRxPutPkt
(*, 
PktBuf
 *, , 
u64
);

286 
myTxPutPkt
(*, 
PktBuf
 *, , 
u64
);

287 
mySëSèã
(*, 
U£rSèã
 *, 
u64
);

288 
myGëSèã
(*, 
U£rSèã
 *, 
u64
);

289 #ifde‡
PM_SUPPORT


290 
mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

291 
mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

292 
mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
);

295 
xã√t_öô_bŸtom
(, );

296 
myRxGëPkt
(*, 
PktBuf
 *, , , );

297 
myRxPutPkt
(*, 
PktBuf
 *, , );

298 
myTxPutPkt
(*, 
PktBuf
 *, , );

299 
mySëSèã
(*, 
U£rSèã
 *, );

300 
myGëSèã
(*, 
U£rSèã
 *, );

301 #ifde‡
PM_SUPPORT


302 
mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

303 
mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

304 
mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
);

312 
xíë_Síd_öã∫Æ
(
sk_buff
 *, 
√t_devi˚
 *);

314 #ifde‡
DEBUG_VERBOSE


315 
ªad_xgemac
();

316 
di•_‰ag
(*, 
u32
);

323 #ifde‡
X86_64


324 
	s√t_loˇl
 {

325 
li°_hód
 
	mrcv
;

326 
li°_hód
 
	mxmô
;

328 
√t_devi˚
 *
	mndev
;

329 
√t_devi˚_°©s
 
	m°©s
;

330 
timî_li°
 
	mphy_timî
;

332 
u32
 
	mödex
;

333 
u32
 
	mxgmii_addr
;

334 
u64
 
	mvîsi⁄Reg
;

336 * 
	mTxH™dÀ
;

337 * 
	mRxH™dÀ
;

339 
	mDrivîSèã
;

340 #ifde‡
PM_SUPPORT


341 
	mDrivîSèã_bef‹eSu•
;

348 
XXgEthî√t
 
	mEmac
;

350 
	mmax_‰ame_size
;

352 
sk_buff
 *
	mde„ºed_skb
;

355 
	mtx_pkts
;

356 
	mrx_pkts
;

357 
	mmax_‰ags_ö_a_∑ckë
;

358 
	mªÆignmíts
;

359 
	mloˇl_„©uªs
;

360 #i‡! 
XXGE_AUTOSTRIPPING


361 
	m°rùpög
;

365 
	s√t_loˇl
 {

366 
li°_hód
 
	mrcv
;

367 
li°_hód
 
	mxmô
;

369 
√t_devi˚
 *
	mndev
;

370 
√t_devi˚_°©s
 
	m°©s
;

371 
timî_li°
 
	mphy_timî
;

373 
u32
 
	mödex
;

374 
u32
 
	mxgmii_addr
;

375 
u32
 
	mvîsi⁄Reg
;

377 * 
	mTxH™dÀ
;

378 * 
	mRxH™dÀ
;

380 
	mDrivîSèã
;

381 #ifde‡
PM_SUPPORT


382 
	mDrivîSèã_bef‹eSu•
;

389 
XXgEthî√t
 
	mEmac
;

391 
	mmax_‰ame_size
;

393 
sk_buff
 *
	mde„ºed_skb
;

396 
	mtx_pkts
;

397 
	mrx_pkts
;

398 
	mmax_‰ags_ö_a_∑ckë
;

399 
	mªÆignmíts
;

400 
	mloˇl_„©uªs
;

401 #i‡! 
XXGE_AUTOSTRIPPING


402 
	m°rùpög
;

415 
	gxíë_ëhtoﬁ_g°rögs_°©s
[][
ETH_GSTRING_LEN
] =

428 
	#XENET_STATS_LEN
 (
xíë_ëhtoﬁ_g°rögs_°©s
Ë/ 
ETH_GSTRING_LEN


	)

430 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 29)

431 
√t_devi˚_›s
 
	gxíë_√tdev_›s
;

442 
•ölock_t
 
	gXTE_•ölock
;

445 
LIST_HEAD
(
ª˚ivedQueue
);

446 
•ölock_t
 
	gª˚ivedQueueSpö
;

448 
LIST_HEAD
(
£¡Queue
);

449 
•ölock_t
 
	g£¡QueueSpö
;

459 
ölöe
 
	$_XXgEthî√t_Sèπ
(
XXgEthî√t
 *
In°™˚På
)

461 
	`•ö_lock_bh
(&
XTE_•ölock
);

462 
	`XXgEthî√t_Sèπ
(
In°™˚På
);

463 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

464 
	}
}

466 
ölöe
 
	$_XXgEthî√t_St›
(
XXgEthî√t
 *
In°™˚På
)

468 
	`•ö_lock_bh
(&
XTE_•ölock
);

469 
	`XXgEthî√t_St›
(
In°™˚På
);

470 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

471 
	}
}

473 
ölöe
 
	$_XXgEthî√t_Re£t
(
XXgEthî√t
 *
In°™˚På
)

475 
	`•ö_lock_bh
(&
XTE_•ölock
);

476 
	`XXgEthî√t_Re£t
(
In°™˚På
);

477 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

478 
	}
}

480 
ölöe
 
	$_XXgEthî√t_SëMacAddªss
(
XXgEthî√t
 *
In°™˚På
,

481 *
AddªssPå
)

483 
°©us
;

485 
	`•ö_lock_bh
(&
XTE_•ölock
);

486 
°©us
 = 
	`XXgEthî√t_SëMacAddªss
(
In°™˚På
, 
AddªssPå
);

487 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

489  
°©us
;

490 
	}
}

492 
ölöe
 
	$_XXgEthî√t_GëMacAddªss
(
XXgEthî√t
 *
In°™˚På
,

493 *
AddªssPå
)

495 
	`•ö_lock_bh
(&
XTE_•ölock
);

496 
	`XXgEthî√t_GëMacAddªss
(
In°™˚På
, 
AddªssPå
);

497 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

498 
	}
}

500 
ölöe
 
	$_XXgEthî√t_SëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

502 
°©us
;

504 
	`•ö_lock_bh
(&
XTE_•ölock
);

505 
°©us
 = 
	`XXgEthî√t_SëO±i⁄s
(
In°™˚På
, 
O±i⁄s
);

506 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

508  
°©us
;

509 
	}
}

511 
ölöe
 
	$_XXgEthî√t_CÀ¨O±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

513 
°©us
;

515 
	`•ö_lock_bh
(&
XTE_•ölock
);

516 
°©us
 = 
	`XXgEthî√t_CÀ¨O±i⁄s
(
In°™˚På
, 
O±i⁄s
);

517 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

519  
°©us
;

520 
	}
}

522 
ölöe
 
	$_XXgEthî√t_PhyRód
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

523 
u32
 
Regi°îNum
, 
u16
 *
PhyD©aPå
)

525 
	`•ö_lock_bh
(&
XTE_•ölock
);

526 
	`XXgEthî√t_PhyRód
(
In°™˚På
, 
PhyAddªss
, 
Regi°îNum
, 
PhyD©aPå
);

527 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

528 
	}
}

530 
ölöe
 
	$_XXgEthî√t_PhyWrôe
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

531 
u32
 
Regi°îNum
, 
u16
 
PhyD©a
)

533 
	`•ö_lock_bh
(&
XTE_•ölock
);

534 
	`XXgEthî√t_PhyWrôe
(
In°™˚På
, 
PhyAddªss
, 
Regi°îNum
, 
PhyD©a
);

535 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

536 
	}
}

544 
	$ª£t
(
√t_devi˚
 *
dev
, 
u32
 
löe_num
)

547 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

548 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

550 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

553 
u32
 
O±i⁄s
;

554 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


555 
u32
 
ª£t_˙t
 = 0;

558 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthernet:Ñesets (#%u) fromádapter codeÜine %d\n",

559 
dev
->
«me
, ++
ª£t_˙t
, 
löe_num
);

562 
	`√tif_°›_queue
(
dev
);

565 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

572 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

575 
	`_XXgEthî√t_Re£t
(&
Õ
->
Emac
);

579 
	`mdñay
(2000);

586 (Ë
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
dev
->
dev_addr
);

588 (Ë
	`_XXgEthî√t_SëO±i⁄s
(&
Õ
->
Emac
, 
O±i⁄s
);

589 (Ë
	`_XXgEthî√t_CÀ¨O±i⁄s
(&
Õ
->
Emac
, ~
O±i⁄s
);

590 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

591 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthî√t: O±i⁄s: 0x%x\n", 
dev
->
«me
, 
O±i⁄s
);

594 i‡(
Õ
->
de„ºed_skb
) {

595 
	`dev_k‰ì_skb_™y
(
Õ
->
de„ºed_skb
);

596 
Õ
->
de„ºed_skb
 = 
NULL
;

597 
Õ
->
°©s
.
tx_îr‹s
++;

607 
	`_XXgEthî√t_Sèπ
(&
Õ
->
Emac
);

610 
	`√tif_wake_queue
(
dev
);

611 
	}
}

613 #ifdef 
MDIO_CHANGES


617 
	$gë_phy_°©us
(
√t_devi˚
 *
dev
, 
DUPLEX
 * 
du∂ex
, *
lökup
)

619 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

620 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

622 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

625 
u16
 
ªg
;

627 *
du∂ex
 = 
FULL_DUPLEX
;

629 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
XXGE_MDIO_REGISTER_ADDRESS
, &
ªg
);

630 #ifde‡
MDIO_CHANGES


631 *
lökup
 = 
ªg
 & 
XXGE_MDIO_PHY_LINK_UP_MASK
;

634 *
lökup
 = 1;

638 
	}
}

647 
	$pﬁl_gmii
(
d©a
)

649 #ifdef 
MDIO_CHANGES


650 
√t_devi˚
 *
dev
;

651 
√t_loˇl
 *
Õ
;

652 
DUPLEX
 
phy_du∂ex
;

653 
phy_ˇºõr
;

654 
√tif_ˇºõr
;

656 
dev
 = (
√t_devi˚
 *Ë
d©a
;

658 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

659 
Õ
 = 
	`√tdev_¥iv
(
dev
);

661 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

667 
	`log_vîbo£
(
KERN_ERR
 "poll_gmii\n");

668 i‡(
	`gë_phy_°©us
(
dev
, &
phy_du∂ex
, &
phy_ˇºõr
)) {

669 
	`log_n‹mÆ
(
KERN_ERR
 "%s: XXgEthernet:ÅerminatingÜink monitoring.\n",

670 
dev
->
«me
);

673 
√tif_ˇºõr
 = 
	`√tif_ˇºõr_ok
(
dev
) != 0;

674 i‡(
phy_ˇºõr
 !
√tif_ˇºõr
) {

675 i‡(
phy_ˇºõr
) {

676 
	`log_n‹mÆ
(
KERN_INFO


678 
dev
->
«me
);

679 
	`√tif_ˇºõr_⁄
(
dev
);

683 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthernet: PHY Link carrierÜost.\n",

684 
dev
->
«me
);

685 
	`√tif_ˇºõr_off
(
dev
);

690 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

691 
	`add_timî
(&
Õ
->
phy_timî
);

693 
	}
}

696 #ifde‡
DEBUG_VERBOSE


697 
	$ªad_xgemac
(
IoAddrTemac
)

699 
	`¥ötk
("RCW0 = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RCW0_OFFSET
));

700 
	`¥ötk
("RCW1 = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RCW1_OFFSET
));

701 
	`¥ötk
("TC = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_TC_OFFSET
));

702 
	`¥ötk
("CAP = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_CAP_OFFSET
));

703 
	`¥ötk
("MC0 = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_CFG0_OFFSET
));

704 
	`¥ötk
("MC1 = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_CFG1_OFFSET
));

705 
	`¥ötk
("MTX = 0x%x\t", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_TX_DATA_OFFSET
));

706 
	`¥ötk
("MRX = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_MDIO_RX_DATA_OFFSET
));

708 
	`¥ötk
("RcvdByãsLowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXBL_OFFSET
));

709 
	`¥ötk
("RcvdByãsUµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXBU_OFFSET
));

710 
	`¥ötk
("SítByãsLowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_TXBL_OFFSET
));

711 
	`¥ötk
("SítByãsUµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_TXBU_OFFSET
));

712 
	`¥ötk
("FCS Eº‹Lowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXFCSERL_OFFSET
));

713 
	`¥ötk
("FCS Eº‹Uµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXFCSERU_OFFSET
));

714 
	`¥ötk
("L/T Eº‹Lowî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXLTERL_OFFSET
));

715 
	`¥ötk
("L/T Eº‹Uµî = 0x%x\n", 
	`XXgEthî√t_RódReg
(
IoAddrTemac
,
XXGE_RXLTERU_OFFSET
));

716 
	}
}

722 
	$xíë_›í
(
√t_devi˚
 *
dev
)

724 
√t_loˇl
 *
Õ
;

725 
u32
 
O±i⁄s
;

727 
	`log_n‹mÆ
(
KERN_INFO
 "calling xenet_open\n");

734 
	`√tif_°›_queue
(
dev
);

736 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

737 
Õ
 = 
	`√tdev_¥iv
(
dev
);

739 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

742 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

744 i‡(
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
dev
->
dev_addr
Ë!
XST_SUCCESS
) {

745 
	`¥ötk
(
KERN_ERR
 "%s: xgbeth_axi: couldÇot set MACáddress.\n",

746 
dev
->
«me
);

747  -
EIO
;

756 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

757 
O±i⁄s
 |
XXGE_FLOW_CONTROL_OPTION
;

758 #ifde‡
ENABLE_JUMBO


759 
O±i⁄s
 |
XXGE_JUMBO_OPTION
;

761 
O±i⁄s
 |
XXGE_TRANSMITTER_ENABLE_OPTION
;

762 
O±i⁄s
 |
XXGE_RECEIVER_ENABLE_OPTION
;

763 #i‡
XXGE_AUTOSTRIPPING


764 
O±i⁄s
 |
XXGE_FCS_STRIP_OPTION
;

767 (Ë
	`_XXgEthî√t_SëO±i⁄s
(&
Õ
->
Emac
, 
O±i⁄s
);

768 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

769 
	`log_n‹mÆ
(
KERN_INFO
 "%s: XXgEthî√t: O±i⁄s: 0x%x\n", 
dev
->
«me
, 
O±i⁄s
);

771 
	`mdñay
(2000);

774 
	`_XXgEthî√t_Sèπ
(&
Õ
->
Emac
);

777 
	`√tif_°¨t_queue
(
dev
);

779 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

780 
Õ
->
phy_timî
.
d©a
 = (Ë
dev
;

781 
Õ
->
phy_timî
.
fun˘i⁄
 = &
pﬁl_gmii
;

782 
	`öô_timî
(&
Õ
->
phy_timî
);

783 
	`add_timî
(&
Õ
->
phy_timî
);

785 
	`INIT_LIST_HEAD
(&
£¡Queue
);

786 
	`INIT_LIST_HEAD
(&
ª˚ivedQueue
);

788 
	`•ö_lock_öô
(&
£¡QueueSpö
);

789 
	`•ö_lock_öô
(&
ª˚ivedQueueSpö
);

793 
	}
}

795 
	$xíë_˛o£
(
√t_devi˚
 *
dev
)

797 
√t_loˇl
 *
Õ
;

799 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_close:\n");

801 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

802 
Õ
 = 
	`√tdev_¥iv
(
dev
);

804 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

808 
	`dñ_timî_sync
(&
Õ
->
phy_timî
);

810 
	`√tif_°›_queue
(
dev
);

812 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

815 
	}
}

817 
√t_devi˚_°©s
 *
	$xíë_gë_°©s
(
√t_devi˚
 *
dev
)

819 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

820 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

822 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

826 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_get_stats: \n");

828  &(
Õ
->
°©s
);

829 
	}
}

831 
	$xíë_ch™ge_mtu
(
√t_devi˚
 *
dev
, 
√w_mtu
)

833 
u32
 
SëMtu
=0;

834 #ifde‡
CONFIG_XILINX_GIGE_VLAN


835 
hód_size
 = 
XXGE_HDR_VLAN_SIZE
;

837 
hód_size
 = 
XXGE_HDR_SIZE
;

840 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

841 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

843 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

847 
max_‰ame
 = 
√w_mtu
 + 
hód_size
 + 
XXGE_TRL_SIZE
;

848 
mö_‰ame
 = 1 + 
hód_size
 + 
XXGE_TRL_SIZE
;

850 
	`log_vîbo£
(
KERN_INFO
 "xenet_change_mtu:\n");

852 i‡((
max_‰ame
 < 
mö_‰ame
Ë|| (max_‰amê> 
Õ
->
max_‰ame_size
))

853  -
EINVAL
;

855 
dev
->
mtu
 = 
√w_mtu
;

864 
	}
}

866 
	$xíë_£t_mac_addªss
(
√t_devi˚
 *
dev
, * 
±r
)

869 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

870 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

872 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

875 
sockaddr
 *
addr
 = 
±r
;

877 i‡(
	`√tif_ru¬ög
(
dev
))

879 
	`log_n‹mÆ
(
KERN_INFO
 "set_mac_address: Interface should be down\n");

880  -
EBUSY
;

883 i‡(!
	`is_vÆid_ëhî_addr
(
addr
->
ß_d©a
))

885 
	`log_n‹mÆ
(
KERN_INFO
 "set_mac_address: Invalid Ethernetáddress\n");

886  -
EADDRNOTAVAIL
;

889 
	`mem˝y
(
dev
->
dev_addr
, 
addr
->
ß_d©a
, dev->
addr_Àn
);

891 #ifde‡
DEBUG_VERBOSE


893 
i
;

894 
	`log_vîbo£
(
KERN_INFO
 "Setting MACáddress: ");

895 
i
=0; i<6; i++)

896 
	`¥ötk
("%x ", 
dev
->
dev_addr
[
i
]);

897 
	`¥ötk
("\n");

901 i‡(
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
dev
->
dev_addr
Ë!
XST_SUCCESS
) {

902 
	`¥ötk
(
KERN_ERR
 "xgbeth_axi: couldÇot set MACáddress.\n");

903  -
EIO
;

907 
	}
}

910 #ifde‡
DEBUG_VERBOSE


911 
	$di•_‰ag
(* 
addr
, 
u32
 
Àn
)

913 
i
;

915 
i
=0; i<
Àn
; i++)

917 
	`¥ötk
("%02x ", 
addr
[
i
]);

918 if(!((
i
+1)%4))

919 
	`¥ötk
(", ");

920 if(!((
i
+1)%16))

921 
	`¥ötk
("\n");

923 
	`¥ötk
("\n");

924 
	}
}

927 #ifde‡
DEBUG_VERBOSE


928 
	$ªad_skb_öfo
(
sk_buff
 *
skb
)

930 
	`¥ötk
("Ródög skb %x\n", (
u32
Ë
skb
);

934 
	`¥ötk
("A˘uÆ d©®Àngth %d\n", (
u32
)(
skb
->
Àn
));

935 
	`¥ötk
("D©®Àngth %d\n", (
u32
)(
skb
->
d©a_Àn
));

936 
	`¥ötk
("LökÜayî hódîÜígth %d\n", (
u32
)(
skb
->
mac_Àn
));

937 
	`¥ötk
("csum fõld %x\n", (
u32
)(
skb
->
csum
));

940 
	`¥ötk
("PackëÅy≥ %x\n", (
u32
)(
skb
->
pkt_ty≥
));

941 
	`¥ötk
("ù_summed %d\n", (
u32
)(
skb
->
ù_summed
));

942 
	`¥ötk
("PrŸocﬁ %x\n", (
u32
)(
skb
->
¥Ÿocﬁ
));

943 
	`¥ötk
("Truesizê%d\n", (
u32
)(
skb
->
åuesize
));

944 
	`¥ötk
("Buf„∏hódÖå %x\n", (
u32
)(
skb
->
hód
));

945 
	`¥ötk
("Buf„∏d©®±∏%x\n", (
u32
)(
skb
->
d©a
));

946 
	`¥ötk
("Buf„∏èûÖå %x\n", (
u32
)(
skb
->
èû
));

947 
	`¥ötk
("Buf„∏ídÖ∏%x\n", (
u32
)(
skb
->
íd
));

948 
	}
}

956 
	$xíë_Síd_öã∫Æ
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

958 
√t_loˇl
 *
Õ
;

959 
ªsu…
;

960 
tŸÆ_‰ags
;

961 
size_t
 
Àn
;

962 
skb_‰ag_t
 *
‰ag
;

963 * 
vút_addr
;

964 
i
;

966 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

967 
Õ
 = 
	`√tdev_¥iv
(
dev
);

969 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

972 if(
Õ
->
DrivîSèã
 !
READY
Ë 
XST_FAILURE
;

973 
	`log_vîbo£
(
KERN_INFO
 "Camêö wôh skb %x skb->d©®%x\n", (
u32
Ë
skb
, (u32Ëskb->
d©a
);

974 #ifde‡
DEBUG_VERBOSE


975 
	`ªad_xgemac
(
Õ
->
Emac
.
C⁄fig
.
Ba£Addªss
);

979 
tŸÆ_‰ags
 = 
	`skb_shöfo
(
skb
)->
ƒ_‰ags
 + 1;

980 
	`log_vîbo£
(
KERN_INFO
 "Sídög %d føgmíts\n", 
tŸÆ_‰ags
);

983 i‡(
Õ
->
max_‰ags_ö_a_∑ckë
 < 
tŸÆ_‰ags
) {

984 
Õ
->
max_‰ags_ö_a_∑ckë
 = 
tŸÆ_‰ags
;

986 
Õ
->
°©s
.
tx_∑ckës
++;

989 
Àn
 = 
	`skb_hódÀn
(
skb
);

990 
Õ
->
°©s
.
tx_byãs
 +
skb
->
Àn
;

992 
Pkt
[0].
pktBuf
 = 
skb
->
d©a
;

993 
Pkt
[0].
bufInfo
 = (*)
skb
;

994 
Pkt
[0].
size
 = 
Àn
;

995 
Pkt
[0].
Êags
 = 
PKT_SOP
;

996 
Pkt
[0].
u£rInfo
 = 
skb
->
Àn
;

998 #ifde‡
DEBUG_VERBOSE


999 
	`ªad_skb_öfo
(
skb
);

1001 
	`log_n‹mÆ
("TXÖkt csum field contains %02x %02x\n",

1002 (
u8
)(
skb
->
d©a
[0x32]), (u8)(skb->data[0x33]));

1005 #ifde‡
DEBUG_VERBOSE


1006 
	`log_vîbo£
("TX føg 0ÖkàÀ¿i†%d, fœg†%x\n", 
Pkt
[0].
size
, Pkt[0].
Êags
);

1007 
	`log_vîbo£
(
KERN_INFO
 "Fragment 0:Üen is %d, buf is %x\n",

1008 
Àn
, (
u32
Ë(
skb
->
d©a
));

1009 
	`di•_‰ag
(
skb
->
d©a
, 
Àn
);

1012 if(
tŸÆ_‰ags
 == 1)

1014 
Pkt
[0].
Êags
 |
PKT_EOP
;

1015 
ªsu…
 = 
	`DmaSídPkt
(
Õ
->
TxH™dÀ
, 
Pkt
, 1);

1016 if(
ªsu…
)

1017 
Õ
->
tx_pkts
 += 1;

1018 if(!
ªsu…
)

1021 if(!
	`√tif_queue_°›≥d
(
dev
))

1022 
	`√tif_°›_queue
(
dev
);

1024  
XST_FAILURE
;

1029 
Pkt
[0].
Êags
 |
PKT_ALL
;

1030 
‰ag
 = &
	`skb_shöfo
(
skb
)->
‰ags
[0];

1031 
i
 = 1;

1032 
tŸÆ_‰ags
)

1034 
max
;

1036 
max
 = (
tŸÆ_‰ags
 >
MAX_SKB_FRAGS
) ? MAX_SKB_FRAGS :Åotal_frags;

1037 ; 
i
<
max
; i++, 
‰ag
++)

1039 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(3, 1, 0)

1040 
vút_addr
 =

1041 (*Ë
	`∑ge_addªss
(
‰ag
->
∑ge
Ë+ føg->
∑ge_off£t
;

1043 
vút_addr
 =

1044 (*Ë
	`∑ge_addªss
(
	`skb_‰ag_∑ge
(
‰ag
)Ë+ føg->
∑ge_off£t
;

1048 
	`log_vîbo£
("∑ckëÜígth i†%d\n", 
skb
->
Àn
);

1049 
Pkt
[
i
].
pktBuf
 = 
vút_addr
;

1050 
Pkt
[
i
].
bufInfo
 = 
NULL
;

1051 
Pkt
[
i
].
size
 = 
‰ag
->size;

1052 
Pkt
[
i
].
u£rInfo
 = 
skb
->
Àn
;

1053 
	`log_vîbo£
("u£rInfÿi†%Œx\n", 
Pkt
[
i
].
u£rInfo
);

1054 
Pkt
[
i
].
Êags
 = 
PKT_ALL
;

1057 if(
tŸÆ_‰ags
 =
max
)

1058 
Pkt
[
i
 - 1].
Êags
 = 
PKT_EOP
;

1060 
ªsu…
 = 
	`DmaSídPkt
(
Õ
->
TxH™dÀ
, 
Pkt
, 
i
);

1061 if(
ªsu…
)

1062 
Õ
->
tx_pkts
 +
ªsu…
;

1064 if(
ªsu…
 !
i
)

1067 if(!
	`√tif_queue_°›≥d
(
dev
))

1068 
	`√tif_°›_queue
(
dev
);

1070  
XST_FAILURE
;

1072 
i
 = 0;

1073 
tŸÆ_‰ags
 -
max
;

1077 
dev
->
å™s_°¨t
 = 
jiffõs
;

1079  
XST_SUCCESS
;

1080 
	}
}

1083 
	$xíë_Síd
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

1085 
ªtvÆ
;

1087 
	`•ö_lock_bh
(&
XTE_•ölock
);

1089 
ªtvÆ
 = 
	`xíë_Síd_öã∫Æ
(
skb
, 
dev
);

1091 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

1093 if(
ªtvÆ
 =
XST_SUCCESS
)

1094  
NETDEV_TX_OK
;

1096  
NETDEV_TX_BUSY
;

1097 
	}
}

1099 
	$xíë_tx_timeout
(
√t_devi˚
 *
dev
)

1101 
√t_loˇl
 *
Õ
;

1102 
Êags
;

1104 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_tx_timeout:\n");

1110 
	`•ö_lock_úqßve
(&
XTE_•ölock
, 
Êags
);

1112 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1113 
Õ
 = 
	`√tdev_¥iv
(
dev
);

1115 
Õ
 = (
√t_loˇl
 *Ë
dev
->
¥iv
;

1119 
	`¥ötk
(
KERN_ERR


1121 
dev
->
«me
, 
TX_TIMEOUT
 * 1000UL / 
HZ
);

1122 
Õ
->
°©s
.
tx_îr‹s
++;

1124 
	`ª£t
(
dev
, 
__LINE__
);

1126 
	`•ö_u∆ock_úqª°‹e
(&
XTE_•ölock
, 
Êags
);

1127 
	}
}

1130 
	$xíë_ëhtoﬁ_gë_£âögs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_cmd
 *
ecmd
)

1133 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1134 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1136 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1140 
u32
 
mac_›ti⁄s
;

1141 
u16
 
gmii_cmd
, 
gmii_°©us
;

1144 
	`mem£t
(
ecmd
, 0, (
ëhtoﬁ_cmd
));

1146 
mac_›ti⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&(
Õ
->
Emac
));

1148 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
MII_BMCR
, &
gmii_cmd
);

1149 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
MII_BMSR
, &
gmii_°©us
);

1152 
ecmd
->
du∂ex
 = 
DUPLEX_FULL
;

1153 
ecmd
->
suµ‹ãd
 |(
SUPPORTED_FIBRE
);

1154 
ecmd
->
p‹t
 = 
PORT_FIBRE
;

1155 
ecmd
->
•ìd
 = 
SPEED_10000
;

1156 
ecmd
->
aut⁄eg
 = 
AUTONEG_DISABLE
;

1157 
ecmd
->
advîtisög
 |
ADVERTISED_FIBRE
;

1160 
ecmd
->
phy_addªss
 = 
Õ
->
xgmii_addr
;

1161 
ecmd
->
å™s˚ivî
 = 
XCVR_INTERNAL
;

1163 
	}
}

1166 
	$xíë_ëhtoﬁ_£t_£âögs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_cmd
 *
ecmd
)

1168  -
EOPNOTSUPP
;

1169 
	}
}

1171 
	#EMAC_REGS_N
 8

	)

1173 
	$xíë_ëhtoﬁ_gë_rög∑øm
(
√t_devi˚
 *
dev
,

1174 
ëhtoﬁ_rög∑øm
 *
îög
)

1176 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1177 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1179 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1182 
	`Dma_gë_rög∑øm
(
Õ
->
TxH™dÀ
,
îög
);

1183 
	`Dma_gë_rög∑øm
(
Õ
->
RxH™dÀ
,
îög
);

1186 
	}
}

1189 
	$xíë_ëhtoﬁ_gë_ªgs_Àn
(
√t_devi˚
 *
dev
)

1191 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_regs_len\n");

1192  
EMAC_REGS_N
 * (
u16
);

1193 
	}
}

1196 
	$xíë_ëhtoﬁ_gë_ªgs
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_ªgs
 *
ªgs
,

1197 *
ªt
)

1199 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1200 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1202 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1205 
u16
 * 
d©a
 = (u16 *Ë
ªt
;

1206 
i
;

1208 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_regs\n");

1209 
ªgs
->
vîsi⁄
 = 0;

1210 
ªgs
->
Àn
 = 
EMAC_REGS_N
 * (
u16
);

1211 
	`mem£t
(
ªt
, 0, 
EMAC_REGS_N
 * (
u16
));

1213 
i
 = 0; i < 
EMAC_REGS_N
; i++) {

1214 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
,Üp->
xgmii_addr
, 
i
, &(
d©a
[i]));

1216 
	}
}

1219 
	$xíë_ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_drvöfo
 *
ed
)

1221 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_drvinfo\n");

1222 
	`mem£t
(
ed
, 0, (
ëhtoﬁ_drvöfo
));

1223 
	`°∫˝y
(
ed
->
drivî
, 
DRIVER_NAME
, (ed->driver) - 1);

1224 
	`°∫˝y
(
ed
->
vîsi⁄
, 
DRIVER_VERSION
, (ed->version) - 1);

1226 
ed
->
ªgdump_Àn
 = (
u16
Ë* 
EMAC_REGS_N
;

1227 
	}
}

1230 
	$xíë_ëhtoﬁ_gë_∑u£∑øm
(
√t_devi˚
 *
dev
,

1231 
ëhtoﬁ_∑u£∑øm
 *
ïp
)

1233 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1234 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1236 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1239 
ëhtoﬁ_cmd
 
ecmd
;

1240 
ªt
 = -
EOPNOTSUPP
;

1241 
u32
 
O±i⁄s
;

1243 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_pauseparam\n");

1245 
ªt
 = 
	`xíë_ëhtoﬁ_gë_£âögs
(
dev
, &
ecmd
);

1246 i‡(
ªt
 < 0)

1249 
ïp
->
aut⁄eg
 = 
ecmd
.autoneg;

1250 
O±i⁄s
 = 
	`XXgEthî√t_GëO±i⁄s
(&
Õ
->
Emac
);

1251 i‡(
O±i⁄s
 & 
XXGE_FCS_INSERT_OPTION
) {

1252 
ïp
->
rx_∑u£
 = 1;

1253 
ïp
->
tx_∑u£
 = 1;

1256 
ïp
->
rx_∑u£
 = 0;

1257 
ïp
->
tx_∑u£
 = 0;

1259 
	}
}

1262 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(3, 1, 0)

1263 
u32
 
	$xíë_ëhtoﬁ_gë_sg
(
√t_devi˚
 *
dev
)

1265 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_sg\n");

1269 
	}
}

1273 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 33)

1274 
	$xíë_ëhtoﬁ_gë_s£t_cou¡
(
√t_devi˚
 *
dev
, 
s£t
)

1276 
	`log_n‹mÆ
(
KERN_INFO
 "ëhtoﬁ_gë_s£t_cou¡ %d\n", 
XENET_STATS_LEN
);

1278 
s£t
) {

1279 
ETH_SS_STATS
:

1280  
XENET_STATS_LEN
;

1283  -
EOPNOTSUPP
;

1285 
	}
}

1287 
	$xíë_ëhtoﬁ_gë_°©s_cou¡
(
√t_devi˚
 *
dev
)

1289 
	`log_n‹mÆ
(
KERN_INFO
 "ëhtoﬁ_gë_°©s_cou¡ %d\n", 
XENET_STATS_LEN
);

1290  
XENET_STATS_LEN
;

1291 
	}
}

1294 
	$xíë_ëhtoﬁ_gë_°rögs
(
√t_devi˚
 *
dev
, 
u32
 
s£t
, 
u8
 * 
d©a
)

1296 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_strings\n");

1298 
s£t
) {

1299 
ETH_SS_STATS
:

1300 
	`log_n‹mÆ
(
KERN_INFO
 "ethtool_get_strings: ETH_SS_STATS\n");

1301 
	`mem˝y
(
d©a
, *
xíë_ëhtoﬁ_g°rögs_°©s
, (xenet_ethtool_gstrings_stats));

1304 
	}
}

1306 
	$xíë_ëhtoﬁ_gë_°©s
(
√t_devi˚
 *
dev
, 
ëhtoﬁ_°©s
 *
e°
, 
u64
 *
d©a
)

1308 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1309 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1311 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1315 
	`log_n‹mÆ
(
KERN_ERR
 "ethtool_get_stats\n");

1318 
e°
->
n_°©s
 = 
	`ARRAY_SIZE
(
xíë_ëhtoﬁ_g°rögs_°©s
);

1320 
Õ
->
°©s
.
tx_fifo_îr‹s
 = 
	`XXgEthî√t_RódReg
÷p->
Emac
.
C⁄fig
.
Ba£Addªss
,
XXGE_TXUNDRERL_OFFSET
);

1321 
Õ
->
°©s
.
rx_Àngth_îr‹s
 = 
	`XXgEthî√t_RódReg
÷p->
Emac
.
C⁄fig
.
Ba£Addªss
,
XXGE_RXLTERL_OFFSET
);

1322 
Õ
->
°©s
.
rx_¸c_îr‹s
 = 
	`XXgEthî√t_RódReg
÷p->
Emac
.
C⁄fig
.
Ba£Addªss
,
XXGE_RXFCSERL_OFFSET
);

1324 
d©a
[0] = 
Õ
->
°©s
.
tx_∑ckës
;

1325 
d©a
[1] = 
Õ
->
°©s
.
tx_byãs
;

1326 
d©a
[2] = 
Õ
->
°©s
.
tx_fifo_îr‹s
;

1327 
d©a
[3] = 
Õ
->
°©s
.
rx_∑ckës
;

1328 
d©a
[4] = 
Õ
->
°©s
.
rx_byãs
;

1329 
d©a
[5] = 
Õ
->
°©s
.
rx_Àngth_îr‹s
;

1330 
d©a
[6] = 
Õ
->
°©s
.
rx_¸c_îr‹s
;

1331 
d©a
[7] = 
Õ
->
max_‰ags_ö_a_∑ckë
;

1332 
	}
}

1334 
	$xíë_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
)

1336 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1337 
√t_loˇl
 *
Õ
 = 
	`√tdev_¥iv
(
dev
);

1339 
√t_loˇl
 *
Õ
 = (√t_loˇ»*Ë
dev
->
¥iv
;

1344 
mii_io˘l_d©a
 *
d©a
 = (mii_io˘l_d©®*Ë&
rq
->
i‰_d©a
;

1346 
	`log_n‹mÆ
(
KERN_INFO
 "In xenet_ioctl:\n");

1348 
cmd
) {

1350 
SIOCGMIIPHY
:

1351 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCGMIIPHY\n");

1352 
SIOCDEVPRIVATE
:

1353 if(
cmd
 =
SIOCDEVPRIVATE
)

1354 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCDEVPRIVATE\n");

1356 
d©a
->
phy_id
 = 
Õ
->
xgmii_addr
;

1359 
SIOCGMIIREG
:

1360 if(
cmd
 =
SIOCGMIIREG
)

1361 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCGMIIREG\n");

1362 
SIOCDEVPRIVATE
 + 1:

1363 if(
cmd
 =(
SIOCDEVPRIVATE
+1))

1364 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCDEVPRIVATE+1\n");

1365 i‡(
d©a
->
phy_id
 > 31 || d©a->
ªg_num
 > 31)

1366  -
ENXIO
;

1369 
	`dñ_timî_sync
(&
Õ
->
phy_timî
);

1371 
	`_XXgEthî√t_PhyRód
(&
Õ
->
Emac
, 
d©a
->
phy_id
, d©a->
ªg_num
,

1372 &
d©a
->
vÆ_out
);

1375 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

1376 
	`add_timî
(&
Õ
->
phy_timî
);

1379 
SIOCSMIIREG
:

1380 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCSMIIREG\n");

1381 
SIOCDEVPRIVATE
 + 2:

1382 if(
cmd
 =(
SIOCDEVPRIVATE
+2))

1383 
	`log_n‹mÆ
(
KERN_INFO
 "xenet_ioctl: SIOCDEVPRIVATE+2\n");

1385 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
))

1386  -
EPERM
;

1388 i‡(
d©a
->
phy_id
 > 31 || d©a->
ªg_num
 > 31)

1389  -
ENXIO
;

1392 
	`dñ_timî_sync
(&
Õ
->
phy_timî
);

1394 
	`_XXgEthî√t_PhyWrôe
(&
Õ
->
Emac
, 
d©a
->
phy_id
, d©a->
ªg_num
,

1395 
d©a
->
vÆ_ö
);

1398 
Õ
->
phy_timî
.
expúes
 = 
jiffõs
 + 2 * 
HZ
;

1399 
	`add_timî
(&
Õ
->
phy_timî
);

1402 
	`log_n‹mÆ
(
KERN_INFO
 "xíë_io˘l: unsuµ‹ãd vÆuê%d\n", 
cmd
);

1403  -
EOPNOTSUPP
;

1405 
	}
}

1409 
	$xã√t_öô_t›
()

1411 
√t_loˇl
 *
Õ
 = 
NULL
;

1412 
U£rPås
 
ufuncs
;

1413 
rc
;

1414 * 
h™dÀ
;

1416 
	`log_vîbo£
(
KERN_ERR
 "CameÅo xtenet_init_top\n");

1419 
ndev
 = 
	`Æloc_ëhîdev
((
√t_loˇl
));

1420 i‡(!
ndev
) {

1421 
	`¥ötk
(
KERN_ERR
 "xgbeth_axi: CouldÇotállocateÇet device.\n");

1422 
rc
 = -
ENOMEM
;

1423  
rc
;

1429 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1430 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1432 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1434 
Õ
->
ndev
 =Çdev;

1435 
Õ
->
de„ºed_skb
 = 
NULL
;

1437 
	`log_vîbo£
("GoingÅo do DmaRegister\n");

1442 
Õ
->
DrivîSèã
 = 
INITIALIZED_TOP
;

1444 
ufuncs
.
U£rInô
 = 
xã√t_öô_bŸtom
;

1445 
ufuncs
.
U£rPutPkt
 = 
myTxPutPkt
;

1446 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1447 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1448 #ifde‡
PM_SUPPORT


1449 
ufuncs
.
U£rSu•íd_E¨ly
 = 
mySëSu•íd_E¨ly
;

1450 
ufuncs
.
U£rSu•íd_L©e
 = 
mySëSu•íd_L©e
;

1451 
ufuncs
.
U£rResume
 = 
mySëResume
;

1453 #ifde‡
X86_64


1454 
ufuncs
.
¥ivD©a
 = 
ndev
;

1456 
ufuncs
.
¥ivD©a
 = (
u32
Ë
ndev
;

1458 
ufuncs
.
mode
 = 
ETHERNET_APPMODE
;

1459 
h™dÀ
 = 
	`DmaRegi°î
(
TX_ENGINE
, 
TEMAC_BAR
, &
ufuncs
, 
TEMAC_PKTSIZE
);

1460 if(
h™dÀ
 =
NULL
) {

1461 
	`¥ötk
(
KERN_ERR
 "U«bÀÅÿªgi°îÉngöê%d\n", 
TX_ENGINE
);

1462 
	`‰ì_√tdev
(
ndev
);

1463 
ndev
 = 
NULL
;

1464  -
ENOMEM
;

1466 
Õ
->
TxH™dÀ
 = 
h™dÀ
;

1471 
Õ
->
vîsi⁄Reg
 = 
ufuncs
.versionReg;

1473 
ufuncs
.
U£rPutPkt
 = 
myRxPutPkt
;

1474 
ufuncs
.
U£rGëPkt
 = 
myRxGëPkt
;

1475 
ufuncs
.
U£rSëSèã
 = 
mySëSèã
;

1476 
ufuncs
.
U£rGëSèã
 = 
myGëSèã
;

1477 #ifde‡
PM_SUPPORT


1478 
ufuncs
.
U£rSu•íd_E¨ly
 = 
mySëSu•íd_E¨ly
;

1479 
ufuncs
.
U£rSu•íd_L©e
 = 
mySëSu•íd_L©e
;

1480 
ufuncs
.
U£rResume
 = 
mySëResume
;

1482 #ifde‡
X86_64


1483 
ufuncs
.
¥ivD©a
 = 
ndev
;

1485 
ufuncs
.
¥ivD©a
 = (
u32
Ë
ndev
;

1487 
ufuncs
.
mode
 = 
ETHERNET_APPMODE
;

1488 
h™dÀ
 = 
	`DmaRegi°î
(
RX_ENGINE
, 
TEMAC_BAR
, &
ufuncs
, 
TEMAC_PKTSIZE
);

1489 if(
h™dÀ
 =
NULL
) {

1490 
	`¥ötk
(
KERN_ERR
 "U«bÀÅÿªgi°îÉngöê%d\n", 
RX_ENGINE
);

1491 
	`‰ì_√tdev
(
ndev
);

1492 
ndev
 = 
NULL
;

1493  -
ENOMEM
;

1495 
Õ
->
RxH™dÀ
 = 
h™dÀ
;

1498 
	}
}

1500 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 29)

1501 
	$xíë_£t_√tdev_›s
(
√t_devi˚
 *
ndev
, 
√t_devi˚_›s
 *
nd›s
)

1503 
nd›s
->
ndo_›í
 = 
xíë_›í
;

1504 
nd›s
->
ndo_°›
 = 
xíë_˛o£
;

1505 
nd›s
->
ndo_°¨t_xmô
 = 
xíë_Síd
;

1506 
nd›s
->
ndo_£t_mac_addªss
 = 
xíë_£t_mac_addªss
;

1507 
nd›s
->
ndo_do_io˘l
 = 
xíë_io˘l
;

1508 
nd›s
->
ndo_ch™ge_mtu
 = 
xíë_ch™ge_mtu
;

1509 
nd›s
->
ndo_tx_timeout
 = 
xíë_tx_timeout
;

1510 
nd›s
->
ndo_gë_°©s
 = 
xíë_gë_°©s
;

1511 
ndev
->
√tdev_›s
 = 
nd›s
;

1512 
	}
}

1516 
ëhtoﬁ_›s
 
	gxíë_ëhtoﬁ_›s
 = {

1517 .
gë_£âögs
 = 
xíë_ëhtoﬁ_gë_£âögs
,

1518 .
	g£t_£âögs
 = 
xíë_ëhtoﬁ_£t_£âögs
,

1519 .
	ggë_∑u£∑øm
 = 
xíë_ëhtoﬁ_gë_∑u£∑øm
,

1520 #i‡
LINUX_VERSION_CODE
 <
KERNEL_VERSION
(3, 1, 0)

1521 .
	ggë_sg
 = 
xíë_ëhtoﬁ_gë_sg
,

1523 .
	ggë_drvöfo
 = 
xíë_ëhtoﬁ_gë_drvöfo
,

1524 .
	ggë_ªgs_Àn
 = 
xíë_ëhtoﬁ_gë_ªgs_Àn
,

1525 .
	ggë_ªgs
 = 
xíë_ëhtoﬁ_gë_ªgs
,

1526 .
	ggë_rög∑øm
 = 
xíë_ëhtoﬁ_gë_rög∑øm
,

1527 .
	ggë_lök
 = 
ëhtoﬁ_›_gë_lök
,

1528 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 33)

1529 .
	ggë_s£t_cou¡
 = 
xíë_ëhtoﬁ_gë_s£t_cou¡
,

1531 .
	ggë_°©s_cou¡
 = 
xíë_ëhtoﬁ_gë_°©s_cou¡
,

1533 .
	ggë_°rögs
 = 
xíë_ëhtoﬁ_gë_°rögs
,

1534 .
	ggë_ëhtoﬁ_°©s
 = 
xíë_ëhtoﬁ_gë_°©s


1537 #ifde‡
DEBUG_VERBOSE


1538 
	$ªad_ÆÃeg
(
u32
 
RegBa£
)

1542 
	`¥ötk
("Readingáll MACÑegisters\n");

1543 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_RCW0_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_RCW0_OFFSET));

1544 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_RCW1_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_RCW1_OFFSET ));

1545 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_TC_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_TC_OFFSET ));

1546 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_FCC_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_FCC_OFFSET ));

1547 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_GERS_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_GERS_OFFSET ));

1548 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_RMTU_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_RMTU_OFFSET ));

1549 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_TMTU_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_TMTU_OFFSET ));

1550 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_VER_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_VER_OFFSET ));

1551 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_CAP_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_CAP_OFFSET ));

1554 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_CFG0_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase, XXGE_MDIO_CFG0_OFFSET));

1555 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_CFG1_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_MDIO_CFG1_OFFSET ));

1556 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_TX_DATA_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_MDIO_TX_DATA_OFFSET ));

1557 
	`¥ötk
("Reg %x = %x\n", (
RegBa£
+
XXGE_MDIO_RX_DATA_OFFSET
), 
	`XXgEthî√t_RódReg
(RegBase,XXGE_MDIO_RX_DATA_OFFSET ));

1559 
	}
}

1561 #ifde‡
X86_64


1562 
	$xã√t_öô_bŸtom
(
u64
 
B¨Ba£
, u64 
¥ivd©a
)

1565 
	$xã√t_öô_bŸtom
(
B¨Ba£
, 
¥ivd©a
)

1568 
u8
 
mac_addr
[6];

1569 
√t_devi˚
 *
ndev
 = 
NULL
;

1570 
√t_loˇl
 *
Õ
 = 
NULL
;

1571 
XXgEthî√t_C⁄fig
 
Temac_C⁄fig
;

1572 
rc
 = 0;

1573 #ifde‡
X86_64


1574 
u64
 
RegBa£
;

1576 
RegBa£
;

1579 
RegBa£
 = 
B¨Ba£
 + 
NW_PATH_OFFSET
;

1582 
	`XIo_Out32
 (
B¨Ba£
 + 
DESIGN_MODE_ADDRESS
, 
PERF_DESIGN_MODE
);

1585 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1586 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1587 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1589 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1598 if(
Õ
->
DrivîSèã
 =
INITIALIZED_TOP
) {

1599 
Õ
->
DrivîSèã
 = 
INITIALIZED_FIRST
;

1600  
XST_SUCCESS
;

1602 if(
Õ
->
DrivîSèã
 =
INITIALIZED_FIRST
) {

1603 
Õ
->
DrivîSèã
 = 
INITIALIZED_SECOND
;

1606 
	`¥ötk
("DrivîSèã uƒecognized %d\n", 
Õ
->
DrivîSèã
);

1607  
XST_FAILURE
;

1612 
	`log_n‹mÆ
(
KERN_INFO
 "TEMAC Ba£ %x\n", 
RegBa£
);

1619 
Temac_C⁄fig
.
Ba£Addªss
 = 
RegBa£
;

1622 
	`log_vîbo£
("GoingÅo do CfgInitialize\n");

1623 #ifde‡
X86_64


1624 i‡(
	`XXgEthî√t_CfgInôülize
(&
Õ
->
Emac
, &
Temac_C⁄fig
, 
RegBa£
Ë!
XST_SUCCESS
)

1627 i‡(
	`XXgEthî√t_CfgInôülize
(&
Õ
->
Emac
, &
Temac_C⁄fig
, (
u32
Ë
RegBa£
Ë!
XST_SUCCESS
)

1630 
	`¥ötk
(
KERN_ERR
 "xgbeth_axi: CouldÇot initialize device.\n");

1631 
rc
 = -
ENODEV
;

1632 
îr‹
;

1636 
mac_addr
[0]=0xAA;

1637 #ifde‡
USE_NW_PATH0


1638 
mac_addr
[1]=0xBB;

1640 
mac_addr
[1]=0x00;

1642 
mac_addr
[2]=0xCC;

1643 
mac_addr
[3]=0xDD;

1644 
mac_addr
[4]=0xEE;

1645 
mac_addr
[5]=0xFF;

1647 i‡(
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
mac_addr
Ë!
XST_SUCCESS
) {

1648 
	`¥ötk
(
KERN_ERR
 "CouldÇot set MACáddress.\n");

1649 
rc
 = -
EIO
;

1650 
îr‹
;

1653 #ifde‡
DEBUG_NORMAL


1654 
	`¥ötk
("**SetÅhe MACádress in init_bottom**\n");

1657 
	`_XXgEthî√t_GëMacAddªss
(&
Õ
->
Emac
,
ndev
->
dev_addr
);

1659 
	`log_vîbo£
("addr_len is %d,Öerm_addr[0] is %x, [1] = %x, [2] = %x, [3] = %x,Öerm_addr[4] is %x, [5] = %x\n",

1660 
ndev
->
addr_Àn
,Çdev->
dev_addr
[0],Çdev->dev_addr[1],Çdev->dev_addr[2],

1661 
ndev
->
dev_addr
[3],Çdev->dev_addr[4],Çdev->dev_addr[5]);

1664 #ifde‡
ENABLE_JUMBO


1665 
Õ
->
max_‰ame_size
 = 
XXGE_MAX_JUMBO_FRAME_SIZE
;

1667 
Õ
->
max_‰ame_size
 = 1600;

1669 
	`log_vîbo£
(
KERN_INFO
 "MTU sizêi†%d\n", 
ndev
->
mtu
);

1670 i‡(
ndev
->
mtu
 > 
XXGE_JUMBO_MTU
)

1671 
ndev
->
mtu
 = 
XXGE_JUMBO_MTU
;

1672 
	`log_vîbo£
(
KERN_INFO
 "MTU sizêi†%d\n", 
ndev
->
mtu
);

1676 
Õ
->
xgmii_addr
 = 
XXGE_PHY_ADDRESS
;

1677 
	`log_vîbo£
("xgmii_add∏i†%x\n", 
Õ
->
xgmii_addr
);

1679 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

1680 
	`xíë_£t_√tdev_›s
(
ndev
, &
xíë_√tdev_›s
);

1683 
ndev
->
›í
 = 
xíë_›í
;

1684 
ndev
->
°›
 = 
xíë_˛o£
;

1685 
ndev
->
h¨d_°¨t_xmô
 = 
xíë_Síd
;

1686 
ndev
->
£t_mac_addªss
 = 
xíë_£t_mac_addªss
;

1687 
ndev
->
do_io˘l
 = 
xíë_io˘l
;

1688 
ndev
->
ch™ge_mtu
 = 
xíë_ch™ge_mtu
;

1689 
ndev
->
tx_timeout
 = 
xíë_tx_timeout
;

1690 
ndev
->
gë_°©s
 = 
xíë_gë_°©s
;

1693 
ndev
->
Êags
 &~
IFF_MULTICAST
;

1694 
ndev
->
„©uªs
 = 
NETIF_F_SG
 | 
NETIF_F_FRAGLIST
;

1696 
ndev
->
w©chdog_timeo
 = 
TX_TIMEOUT
;

1697 
	`SET_ETHTOOL_OPS
(
ndev
, &
xíë_ëhtoﬁ_›s
);

1700 
Õ
->
max_‰ags_ö_a_∑ckë
 = 0;

1701 
Õ
->
rx_pkts
 = 0;

1703 #i‡! 
XXGE_AUTOSTRIPPING


1704 
Õ
->
°rùpög
 =

1705 (
	`XXgEthî√t_GëO±i⁄s
(&(
Õ
->
Emac
)Ë& 
XXGE_FCS_STRIP_OPTION
) != 0;

1708 
	`log_vîbo£
(
KERN_ERR
 "RegisteringÇet device\n");

1710 
rc
 = 
	`ªgi°î_√tdev
(
ndev
);

1711 i‡(
rc
) {

1712 
	`¥ötk
(
KERN_ERR


1713 "%s: C™nŸÑegi°îÇë devi˚,áb‹tög.\n", 
ndev
->
«me
);

1714 
îr‹
;

1717 
Õ
->
DrivîSèã
 = 
READY
;

1720 
îr‹
:

1721 i‡(
ndev
) {

1722 
	`‰ì_√tdev
(
ndev
);

1724 #ifde‡
XGEMAC_DEBUG__


1725 
	`¥ötk
("**CompletedÅhe xtenet_init_bottom functionality**\n");

1728  
rc
;

1729 
	}
}

1730 #ifde‡
X86_64


1731 
	$myRxGëPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
, 
u64
 
¥ivd©a
)

1734 
	$myRxGëPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
size
, 
numpkts
, 
¥ivd©a
)

1737 
√t_devi˚
 *
ndev
 = 
NULL
;

1738 
√t_loˇl
 *
Õ
 = 
NULL
;

1739 
sk_buff
 *
√w_skb
;

1740 
PktBuf
 * 
pbuf
;

1741 
i
;

1742 
u32
 
Æign
;

1744 #i‡
deföed
 
DEBUG_NORMAL
 || deföed 
DEBUG_VERBOSE


1745 
ªcv_cou¡
=1;

1746 
	`log_n‹mÆ
(
KERN_INFO
 "myRxGëPkt: %d\n",
ªcv_cou¡
);

1747 
ªcv_cou¡
 +
numpkts
;

1751 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1753 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1754 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1756 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1761 if(
Õ
->
DrivîSèã
 !
READY
) {

1762 
	`¥ötk
("xenet driver isÇotÑeady\n");

1767 
i
=0; i<
numpkts
; i++)

1769 
pbuf
 = &(
vaddr
[
i
]);

1770 
√w_skb
 = 
	`Æloc_skb
(
Õ
->
max_‰ame_size
, 
GFP_ATOMIC
);

1771 i‡(
√w_skb
 =
NULL
) {

1772 
	`log_n‹mÆ
("AŒo¯SKB faûed f‹ %d\n",
i
);

1776 
Æign
 = 
	`BUFFER_ALIGNRECV
(
√w_skb
->
d©a
);

1777 i‡(
Æign
)

1779 
	`skb_ª£rve
(
√w_skb
, 
Æign
);

1782 
pbuf
->
pktBuf
 = 
√w_skb
->
d©a
;

1783 
pbuf
->
bufInfo
 = (*)
√w_skb
;

1784 
pbuf
->
size
 = 
Õ
->
max_‰ame_size
;

1787 
Õ
->
rx_pkts
 += 1;

1790  
i
;

1791 
	}
}

1792 #ifde‡
X86_64


1793 
	$myRxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
u64
 
¥ivd©a
)

1796 
	$myRxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

1799 
√t_devi˚
 *
ndev
 = 
NULL
;

1800 
√t_loˇl
 *
Õ
 = 
NULL
;

1801 
sk_buff
 *
skb
;

1802 
PktBuf
 * 
pbuf
;

1803 
Àn
, 
i
;

1807 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1808 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1809 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1811 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1814 if((
Õ
->
DrivîSèã
 !
READY
Ë&& (Õ->DrivîSèã !
UNREGISTERING
))

1816 #ifde‡
PM_SUPPORT


1817 if–
Õ
->
DrivîSèã
 !
PM_SUSPEND
)

1820 
	`¥ötk
("xenet driver isÇotÑeady\n");

1825 
i
=0; i<
numpkts
; i++)

1827 
pbuf
 = &(
vaddr
[
i
]);

1829 
skb
 = (
sk_buff
 *Ë
pbuf
->
bufInfo
;

1832 if(
pbuf
->
Êags
 & 
PKT_UNUSED
)

1834 
	`log_vîbo£
("myRxPutPkt: skb %∞ªtu∫ed unu£d\n", 
skb
);

1835 if(
skb
)

1836 
	`dev_k‰ì_skb
(
skb
);

1839 
Àn
 = 
pbuf
->
size
;

1841 #ifde‡
DEBUG_VERBOSE


1842 
	`¥ötk
(
KERN_INFO
 "Recv data:Üen %d data %x\n",

1843 
Àn
, ()(
skb
->
d©a
));

1845 * 
d±r
;

1846 
i
;

1847 
d±r
 = 
skb
->
d©a
;

1848 if(
i
<6)

1849 
	`di•_‰ag
(
skb
->
d©a
, 
Àn
);

1854 
	`skb_put
(
skb
, 
Àn
);

1855 
skb
->
dev
 = 
ndev
;

1858 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
ndev
);

1860 #ifde‡
DEBUG_VERBOSE


1861 
	`ªad_skb_öfo
(
skb
);

1865 
skb
->
ù_summed
 = 
CHECKSUM_NONE
;

1867 
Õ
->
°©s
.
rx_∑ckës
++;

1868 
Õ
->
°©s
.
rx_byãs
 +
Àn
;

1869 if(
Õ
->
rx_pkts
)

1870 
Õ
->
rx_pkts
 -= 1;

1871 
	`√tif_rx
(
skb
);

1875 
	}
}

1876 #ifde‡
X86_64


1877 
	$myTxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
u64
 
¥ivd©a
)

1880 
	$myTxPutPkt
(* 
h™dÀ
, 
PktBuf
 * 
vaddr
, 
numpkts
, 
¥ivd©a
)

1883 
√t_devi˚
 *
ndev
 = 
NULL
;

1884 
√t_loˇl
 *
Õ
 = 
NULL
;

1885 
sk_buff
 *
skb
;

1886 
PktBuf
 * 
pbuf
;

1887 
i
;

1890 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1892 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1893 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1895 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1899 if((
Õ
->
DrivîSèã
 !
READY
Ë&& (Õ->DrivîSèã !
UNREGISTERING
))

1901 #ifde‡
PM_SUPPORT


1902 if–
Õ
->
DrivîSèã
 !
PM_SUSPEND
)

1905 
	`¥ötk
("xenet driver isÇotÑeady\n");

1911 
i
=0; i<
numpkts
; i++)

1913 
pbuf
 = &(
vaddr
[
i
]);

1916 
skb
 = (
sk_buff
 *Ë
pbuf
->
bufInfo
;

1918 i‡(
skb
)

1919 
	`dev_k‰ì_skb
(
skb
);

1921 if(
Õ
->
tx_pkts
)

1922 
Õ
->
tx_pkts
 -= 1;

1926 #ifde‡
USE_LATER


1927 if(
Õ
->
de„ºed_skb
)

1929 
ªtvÆ
;

1930 
	`•ö_lock_bh
(&
XTE_•ölock
);

1931 
skb
 = 
Õ
->
de„ºed_skb
;

1932 
Õ
->
de„ºed_skb
 = 
NULL
;

1933 
ªtvÆ
 = 
	`xíë_DSI
(
skb
, 
ndev
);

1934 
	`¥ötk
("CÆlög DSI f‹ de„ºed skb %∞ªtu∫†%d\n", 
skb
, 
ªtvÆ
);

1935 
	`•ö_u∆ock_bh
(&
XTE_•ölock
);

1939 #ifde‡
PM_SUPPORT


1940 if–
Õ
->
DrivîSèã
 !
PM_SUSPEND
 )

1943 if(
	`√tif_queue_°›≥d
(
ndev
))

1944 
	`√tif_wake_queue
(
ndev
);

1949 
	}
}

1950 #ifde‡
X86_64


1951 
	$mySëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

1954 
	$mySëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

1958 
	}
}

1961 #ifde‡
X86_64


1962 
	$myGëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

1965 
	$myGëSèã
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

1968 
√t_devi˚
 *
ndev
 = 
NULL
;

1969 
√t_loˇl
 *
Õ
 = 
NULL
;

1971 
	`log_vîbo£
("Róched myGëSèã wôhÖrivd©®%x\n", 
¥ivd©a
);

1974 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

1975 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

1976 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

1978 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

1983 if(
Õ
->
DrivîSèã
 !
READY
)

1985 
	`¥ötk
("xenet driver isÇotÑeady\n");

1993 
u°©e
->
LökSèã
 = (
	`√tif_ˇºõr_ok
(
ndev
Ë? 
LINK_UP
 : 
LINK_DOWN
);

1994 
u°©e
->
D©aMism©ch
 = 0;

1995 
u°©e
->
MöPktSize
 = 64;

1996 
u°©e
->
MaxPktSize
 = 
Õ
->
max_‰ame_size
;

1997 
u°©e
->
Te°Mode
 = 0;

1998 if(
h™dÀ
 =
Õ
->
TxH™dÀ
)

1999 
u°©e
->
Buf„rs
 = 
Õ
->
tx_pkts
;

2001 
u°©e
->
Buf„rs
 = 
Õ
->
rx_pkts
;

2005 
	}
}

2007 #ifde‡
PM_SUPPORT


2013 #ifde‡
X86_64


2014 
	$mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

2017 
	$mySëSu•íd_E¨ly
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

2020 
√t_devi˚
 *
ndev
 = 
NULL
;

2021 
√t_loˇl
 *
Õ
 = 
NULL
;

2023 
	`log_vîbo£
(
KERN_ERR
 "begin: xgbeth mySetSuspend_Early\n");

2025 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

2026 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2027 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2029 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2032 if(
Õ
->
DrivîSèã
 !
PM_SUSPEND
){

2033 
Õ
->
DrivîSèã_bef‹eSu•
 =Üp->
DrivîSèã
;

2034 
Õ
->
DrivîSèã
 = 
PM_SUSPEND
;

2037 
	`log_vîbo£
(
KERN_ERR
 "...SuspendEarly:Örivdata=0x%x,Çdev=0x%x,Üp=0x%x, Emac=0x%x, baseaddr=0x%x, xgmii_addr=%d\n",

2038 ()
¥ivd©a
,

2039 ()
ndev
,

2040 ()
Õ
,

2041 ()&
Õ
->
Emac
,

2042 ()&
Õ
->
Emac
.
C⁄fig
.
Ba£Addªss
,

2043 ()
Õ
->
xgmii_addr
 );

2046 if–!(
	`√tif_queue_°›≥d
(
ndev
)) ) {

2047 
	`log_vîbo£
(
KERN_ERR
 ".... stoppingÇetifÅx\n");

2048 
	`√tif_°›_queue
(
ndev
);

2053 
	`log_vîbo£
(
KERN_ERR
 ".... disablingÑx on hw\n");

2054 
	`_XXgEthî√t_St›
(&
Õ
->
Emac
);

2055 
	`m¶ìp
(3);

2056 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xgbeth mySetSuspend_Early.\n");

2058 
	}
}

2067 #ifde‡
X86_64


2068 
	$mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

2071 
	$mySëSu•íd_L©e
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

2074 
√t_devi˚
 *
ndev
 = 
NULL
;

2075 
√t_loˇl
 *
Õ
 = 
NULL
;

2077 
	`log_vîbo£
(
KERN_ERR
 "begin: xgbeth mySetSuspend_Late\n");

2079 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

2080 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2081 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2083 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2088 if–!(
	`√tif_queue_°›≥d
(
ndev
)) ) {

2089 
	`√tif_°›_queue
(
ndev
);

2090 
	`log_vîbo£
(
KERN_ERR
 "PM.... xgbeth:Çetif queue is stopped.\n");

2092 
	`m¶ìp
(3);

2095 
	`√tif_devi˚_dëach
(
ndev
);

2096 
	`log_vîbo£
(
KERN_ERR
 "PM.... xgbeth:Çetif device detached.\n");

2097 
	`m¶ìp
(3);

2098 
	`log_vîbo£
(
KERN_ERR
 "PM....Énd: xgbeth mySetSuspend_Late.\n");

2100 
	}
}

2101 #ifde‡
X86_64


2102 
	$mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
u64
 
¥ivd©a
)

2105 
	$mySëResume
(* 
h™dÀ
, 
U£rSèã
 * 
u°©e
, 
¥ivd©a
)

2108 
√t_devi˚
 *
ndev
 = 
NULL
;

2109 
√t_loˇl
 *
Õ
 = 
NULL
;

2111 
	`log_vîbo£
(
KERN_ERR
 "begin: xgbeth mySetResume\n");

2113 
ndev
 = (
√t_devi˚
 *)
¥ivd©a
;

2114 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2115 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2117 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2120 
	`log_vîbo£
(
KERN_ERR
 "...resume:Örivdata=0x%x,Çdev=0x%x,Üp=0x%x, Emac=0x%x, baseaddr=0x%x, xgmii_addr=%d\n",

2121 ()
¥ivd©a
,

2122 ()
ndev
,

2123 ()
Õ
,

2124 ()&
Õ
->
Emac
,

2125 ()&
Õ
->
Emac
.
C⁄fig
.
Ba£Addªss
,

2126 ()
Õ
->
xgmii_addr
 );

2129 if–
Õ
->
DrivîSèã
 =
PM_SUSPEND
 ) {

2134 (Ë
	`_XXgEthî√t_SëMacAddªss
(&
Õ
->
Emac
, 
ndev
->
dev_addr
);

2135 (Ë
	`_XXgEthî√t_SëO±i⁄s
(&
Õ
->
Emac
, (Õ->Emac).
O±i⁄s
);

2137 
	`m¶ìp
(3);

2138 
	`_XXgEthî√t_Sèπ
(&
Õ
->
Emac
);

2140 
	`√tif_wake_queue
(
ndev
);

2141 
	`log_vîbo£
("PM.... xgbeth:Çetif queue is started.\n");

2142 
	`m¶ìp
(3);

2144 
	`√tif_devi˚_©èch
(
ndev
);

2145 
	`log_vîbo£
("PM.... xgbeth:Çetif deviceáttached.\n");

2146 
	`m¶ìp
(3);

2150 
	`log_vîbo£
("PM.... xxgbethÉthernet PHY, MACálready up\n");

2151 
	`m¶ìp
(3);

2153 
Õ
->
DrivîSèã
 =Üp->
DrivîSèã_bef‹eSu•
;

2154 
	`log_vîbo£
(".... drivî sèãÑe°‹edÅÿ%d\n", 
Õ
->
DrivîSèã
);

2155 
	`log_vîbo£
("PM....Énd: xgbeth mySetResume.\n");

2157 
	}
}

2161 
	$xã√t_öô
()

2163 
ªt
;

2167 
	`•ö_lock_öô
(&
XTE_•ölock
);

2174 
	`¥ötk
(
KERN_INFO
 "Inserting Xilinx GigE driver in kernel.\n");

2176 if((
ªt
=
	`xã√t_öô_t›
())!=0){

2177 
	`log_vîbo£
("error in xtenet_init_top\n");

2181 
	}
}

2184 
	$xã√t_˛ónup
()

2186 
√t_loˇl
 *
Õ
 = 
NULL
;

2187 
°©e
;

2189 
	`¥ötk
(
KERN_INFO
 "Unregistering Xilinx GigE driver from kernel.\n");

2190 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 28)

2191 
Õ
 = 
	`√tdev_¥iv
(
ndev
);

2193 
Õ
 = (
√t_loˇl
 *Ë
ndev
->
¥iv
;

2197 
°©e
 = 
Õ
->
DrivîSèã
;

2198 
Õ
->
DrivîSèã
 = 
UNREGISTERING
;

2199 
	`DmaUƒegi°î
(
Õ
->
TxH™dÀ
);

2200 
	`DmaUƒegi°î
(
Õ
->
RxH™dÀ
);

2201 
	`mdñay
(2000);

2207 if(
°©e
 =
READY
)

2208 
	`uƒegi°î_√tdev
(
ndev
);

2209 if(
ndev
 !
NULL
)

2210 
	`‰ì_√tdev
(
ndev
);

2211 
	}
}

2213 
moduÀ_öô
(
xã√t_öô
);

2214 
moduÀ_exô
(
xã√t_˛ónup
);

2216 
MODULE_AUTHOR
("Xilinx, Inc.");

2217 
MODULE_DESCRIPTION
(
DRIVER_DESCRIPTION
);

2218 
MODULE_LICENSE
("GPL");

2219 
MODULE_VERSION
(
DRIVER_VERSION
);

	@xxgbeth1/xgadapter.h

65 #i‚de‡
ADAPTER_H


66 
	#ADAPTER_H


	)

68 
	~"xdebug.h
"

71 
	#XPAR_LL_DMA
 1

	)

72 
	#XPAR_AXI_DMA
 1

	)

73 
	#XPAR_LL_FIFO
 0

	)

	@xxgbeth1/xxgethernet.c

77 
	~"xxgëhî√t.h
"

78 
	~"xdma_u£r.h
"

92 
InôHw
(
XXgEthî√t
 *
In°™˚På
);

96 
xdbg_°m¡
(
ödít_⁄
 = 0;)

97 
xdbg_°m¡
(
u32
 
_XXgëhî√t_rú_vÆue
;)

125 #ifde‡
X86_64


126 
	$XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
,

127 
XXgEthî√t_C⁄fig
 *
CfgPå
,

128 
u64
 
Ef„˘iveAddªss
)

131 
	$XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
,

132 
XXgEthî√t_C⁄fig
 *
CfgPå
,

133 
u32
 
Ef„˘iveAddªss
)

137 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

140 
	`mem£t
(
In°™˚På
, 0, (
XXgEthî√t
));

141 
	`mem˝y
(&
In°™˚På
->
C⁄fig
, 
CfgPå
, (
XXgEthî√t_C⁄fig
));

143 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_CfgInitialize\n");

146 
In°™˚På
->
C⁄fig
.
Ba£Addªss
 = 
Ef„˘iveAddªss
;

149 
In°™˚På
->
IsRódy
 = 
XIL_COMPONENT_IS_READY
;

151 
	`XXgEthî√t_Re£t
(
In°™˚På
);

153 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

155  
XST_SUCCESS
;

156 
	}
}

173 
	$XXgEthî√t_Sèπ
(
XXgEthî√t
 *
In°™˚På
)

175 
u32
 
Reg
;

177 #ifde‡
XGEMAC_DEBUG__


178 
u32
 
Reg_tmp
;

181 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

182 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

184 #ifde‡
XGEMAC_DEBUG__


185 
	`¥ötk
("**CompletedÅhe xtenet_init_top functionality**\n");

187 
Reg_tmp
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

188 
XXGE_VER_OFFSET
);

189 
	`¥ötk
("**Vîsi⁄ Regi°î = %x \n",
Reg_tmp
);

191 
Reg_tmp
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

192 
XXGE_CAP_OFFSET
);

193 
	`¥ötk
("thêVÆuêo‡C≠abûôy Regi°î = %x \n",
Reg_tmp
);

199 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

203 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Start\n");

206 i‡(
In°™˚På
->
O±i⁄s
 & 
XXGE_TRANSMITTER_ENABLE_OPTION
) {

207 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "enablingÅransmitter\n");

208 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

209 
XXGE_TC_OFFSET
);

210 i‡(!(
Reg
 & 
XXGE_TC_TX_MASK
)) {

211 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

213 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

214 
XXGE_TC_OFFSET
,

215 
Reg
 | 
XXGE_TC_TX_MASK
);

217 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "transmitterÉnabled\n");

221 i‡(
In°™˚På
->
O±i⁄s
 & 
XXGE_RECEIVER_ENABLE_OPTION
) {

222 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "enablingÑeceiver\n");

223 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

224 
XXGE_RCW1_OFFSET
);

225 i‡(!(
Reg
 & 
XXGE_RCW1_RX_MASK
)) {

226 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

229 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

230 
XXGE_RCW1_OFFSET
,

231 
Reg
 | 
XXGE_RCW1_RX_MASK
);

233 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "receiverÉnabled\n");

237 
In°™˚På
->
IsSèπed
 = 
XIL_COMPONENT_IS_STARTED
;

238 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Start: done\n");

239 
	}
}

260 
	$XXgEthî√t_St›
(
XXgEthî√t
 *
In°™˚På
)

262 
u32
 
Reg
;

264 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

265 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

269 i‡(
In°™˚På
->
IsSèπed
 == 0) {

273 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Stop\n");

274 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

279 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

280 
XXGE_RCW1_OFFSET
);

281 
Reg
 &~
XXGE_RCW1_RX_MASK
;

282 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

283 
XXGE_RCW1_OFFSET
, 
Reg
);

291 
In°™˚På
->
IsSèπed
 = 0;

292 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Stop: done\n");

293 
	}
}

314 
	$XXgEthî√t_Re£t
(
XXgEthî√t
 *
In°™˚På
)

316 
u32
 
Reg
;

317 
u32
 
TimeoutLo›s
;

319 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

320 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

322 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_Reset\n");

325 
	`XXgEthî√t_St›
(
In°™˚På
);

326 
In°™˚På
->
O±i⁄s
 = 
XXGE_DEFAULT_OPTIONS
;

329 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "resettingÅheÑeceiver\n");

330 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

331 
XXGE_RCW1_OFFSET
);

332 
Reg
 |
XXGE_RCW1_RST_MASK
;

333 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

334 
XXGE_RCW1_OFFSET
, 
Reg
);

337 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "resettingÅheÅransmitter\n");

338 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

339 
XXGE_TC_OFFSET
);

340 
Reg
 |
XXGE_TC_RST_MASK
;

341 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

342 
XXGE_TC_OFFSET
, 
Reg
);

344 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "waiting untilÑeset is done\n");

346 
TimeoutLo›s
 = 
XXGE_RST_DELAY_LOOPCNT_VAL
;

348 
TimeoutLo›s
 && (
Reg
 & (
XXGE_RCW1_RST_MASK
 | 
XXGE_TC_RST_MASK
))) {

349 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

350 
XXGE_RCW1_OFFSET
);

351 
Reg
 |
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

352 
XXGE_TC_OFFSET
);

353 
TimeoutLo›s
 --;

355 if(0 =
TimeoutLo›s
 ) {

356 
	`Xû_As£πVoidAlways
();

360 
	`InôHw
(
In°™˚På
);

361 
	}
}

375 
	$InôHw
(
XXgEthî√t
 *
In°™˚På
)

377 
u32
 
Reg
;

379 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet InitHw\n");

383 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

384 
XXGE_RCW1_OFFSET
);

385 
Reg
 &~
XXGE_RCW1_RX_MASK
;

386 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

387 
XXGE_RCW1_OFFSET
, 
Reg
);

396 
	`XXgEthî√t_SëO±i⁄s
(
In°™˚På
, In°™˚På->
O±i⁄s
 &

397 ~(
XXGE_TRANSMITTER_ENABLE_OPTION
 |

398 
XXGE_RECEIVER_ENABLE_OPTION
));

400 
	`XXgEthî√t_CÀ¨O±i⁄s
(
In°™˚På
, ~In°™˚På->
O±i⁄s
);

403 
	`log_vîbo£
(
KERN_ERR
 "RCW1Çow contains %x\n",

404 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_RCW1_OFFSET
));

405 
	`log_vîbo£
(
KERN_ERR
 "TCÇow contains %x\n",

406 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_TC_OFFSET
));

409 
	`XXgEthî√t_PhySëMdioDivis‹
(
In°™˚På
, 
XXGE_MDIO_DIV_DFT
);

411 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet InitHw: done\n");

412 
	}
}

435 
	$XXgEthî√t_SëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
)

437 
u32
 
MacAddr
;

438 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

440 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

441 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

442 
	`Xû_As£πN⁄void
(
AddªssPå
 !
NULL
);

445 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

446  (
XST_DEVICE_IS_STARTED
);

455 
MacAddr
 = 
A±r
[0];

456 
MacAddr
 |
A±r
[1] << 8;

457 
MacAddr
 |
A±r
[2] << 16;

458 
MacAddr
 |
A±r
[3] << 24;

459 
	`log_vîbo£
(
KERN_ERR
 "AddressPtr = %x %x %x %x; MacAddrH = 0x%x, MACL=%x \n",

460 ()
A±r
[0],

461 ()
A±r
[1],

462 ()
A±r
[2],

463 ()
A±r
[3],

464 
MacAddr
, 
XXGE_MACL_OFFSET
);

466 
	`DmaMac_WrôeReg
(
XXGE_MACL_OFFSET
, 
MacAddr
);

468 
MacAddr
 = 0;

469 
MacAddr
 |
A±r
[4];

470 
MacAddr
 |
A±r
[5] << 8;

471 
	`log_vîbo£
(
KERN_ERR
 "AddressPtr = %x %x; MacAddrH = 0x%x, MACU=%x \n",

472 ()
A±r
[4],

473 ()
A±r
[5],

474 
MacAddr
, 
XXGE_MACU_OFFSET
);

476 
	`DmaMac_WrôeReg
(
XXGE_MACU_OFFSET
, 
MacAddr
);

478 
	`log_vîbo£
("0x9400 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9400) );

479 
	`log_vîbo£
("0x9404 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9404) );

480 
	`log_vîbo£
("0x9408 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9408) );

481 
	`log_vîbo£
("0x940C i†: 0x%x \n", 
	`DmaMac_RódReg
(0x940C) );

482 
	`log_vîbo£
("0x9410 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9410) );

483 
	`log_vîbo£
("0x9414 i†: 0x%x \n", 
	`DmaMac_RódReg
(0x9414) );

486  
XST_SUCCESS
;

489 #ifde‡
XGEMAC_DEBUG__


490 
	`¥ötk
("**SettingÅhe MACádress in XXgEthernet_SetMacAddress**\n");

492 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

494 
A±r
[0], Aptr[1], Aptr[2], Aptr[3], Aptr[4], Aptr[5]);

497 
MacAddr
 = 
A±r
[0];

498 
MacAddr
 |
A±r
[1] << 8;

499 
MacAddr
 |
A±r
[2] << 16;

500 
MacAddr
 |
A±r
[3] << 24;

503  (
XST_SUCCESS
);

505 
	}
}

528 
	$XXgEthî√t_GëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
)

530 
u32
 
MacAddr
;

531 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

533 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

534 
	`Xû_As£πVoid
(
AddªssPå
 !
NULL
);

535 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

538 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACL_OFFSET
);

539 
A±r
[0] = (
u8
Ë
MacAddr
;

540 
A±r
[1] = (
u8
Ë(
MacAddr
 >> 8);

541 
A±r
[2] = (
u8
Ë(
MacAddr
 >> 16);

542 
A±r
[3] = (
u8
Ë(
MacAddr
 >> 24);

545 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACU_OFFSET
);

546 
A±r
[4] = (
u8
Ë
MacAddr
;

547 
A±r
[5] = (
u8
Ë(
MacAddr
 >> 8);

550 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACL_OFFSET
);

551 
A±r
[0] = (
u8
Ë
MacAddr
;

552 
A±r
[1] = (
u8
Ë(
MacAddr
 >> 8);

553 
A±r
[2] = (
u8
Ë(
MacAddr
 >> 16);

554 
A±r
[3] = (
u8
Ë(
MacAddr
 >> 24);

557 
MacAddr
 = 
	`DmaMac_RódReg
(
XXGE_MACU_OFFSET
);

558 
A±r
[4] = (
u8
Ë
MacAddr
;

559 
A±r
[5] = (
u8
Ë(
MacAddr
 >> 8);

561 
	}
}

601 
u32
 
	$XXgEthî√t_Upd©eDïO±i⁄s
(
XXgEthî√t
 *
In°™˚På
)

606 
u32
 
DïO±i⁄s
 = 
In°™˚På
->
O±i⁄s
;

621 
DïO±i⁄s
 |
XXGE_PROMISC_OPTION
;

622 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

626 (
DïO±i⁄s
);

627 
	}
}

651 
	$XXgEthî√t_SëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

653 
u32
 
Reg
;

654 
u32
 
RegRcw1
;

655 
u32
 
RegTc
;

656 
u32
 
RegNewRcw1
;

657 
u32
 
RegNewTc
;

658 
u32
 
DïO±i⁄s
;

661 
u32
 
TempRegRcw1
;

662 
u32
 
TempRegTc
;

665 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

666 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

669 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

670  (
XST_DEVICE_IS_STARTED
);

673 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_SetOptions\n");

680 
In°™˚På
->
O±i⁄s
 |= Options;

687 
DïO±i⁄s
 = 
	`XXgEthî√t_Upd©eDïO±i⁄s
(
In°™˚På
);

700 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

701 
XXGE_RCW1_OFFSET
);

702 
RegTc
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

703 
XXGE_TC_OFFSET
);

704 
RegNewRcw1
 = 
RegRcw1
;

705 
RegNewTc
 = 
RegTc
;

707 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

709 
RegRcw1
, 
RegTc
);

710 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

711 "O±i⁄s: 0x%0x; deÁu… o±i⁄s: 0x%0x\n",
O±i⁄s
,

712 
XXGE_DEFAULT_OPTIONS
);

715 i‡(
DïO±i⁄s
 & 
XXGE_JUMBO_OPTION
) {

716 
RegNewTc
 |
XXGE_TC_JUM_MASK
;

717 
RegNewRcw1
 |
XXGE_RCW1_JUM_MASK
;

721 i‡(
DïO±i⁄s
 & 
XXGE_FCS_STRIP_OPTION
) {

722 
RegNewTc
 &~
XXGE_TC_FCS_MASK
;

723 
RegNewRcw1
 &~
XXGE_RCW1_FCS_MASK
;

728 i‡(
DïO±i⁄s
 & 
XXGE_LENTYPE_ERR_OPTION
) {

729 
RegNewRcw1
 &~
XXGE_RCW1_LT_DIS_MASK
;

733 i‡(
DïO±i⁄s
 & 
XXGE_TRANSMITTER_ENABLE_OPTION
) {

734 
RegNewTc
 |
XXGE_TC_TX_MASK
;

738 i‡(
DïO±i⁄s
 & 
XXGE_RECEIVER_ENABLE_OPTION
) {

739 
RegNewRcw1
 |
XXGE_RCW1_RX_MASK
;

743 i‡(
RegTc
 !
RegNewTc
) {

744 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

745 "£tO±i⁄s: wrôögÅc: 0x%0x\n", 
RegNewTc
);

746 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

747 
XXGE_TC_OFFSET
, 
RegNewTc
);

750 i‡(
RegRcw1
 !
RegNewRcw1
) {

751 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

752 "£tO±i⁄s: wrôögÑcw1: 0x%0x\n", 
RegNewRcw1
);

753 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

754 
XXGE_RCW1_OFFSET
, 
RegNewRcw1
);

758 
TempRegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

759 
XXGE_RCW1_OFFSET
);

760 
TempRegTc
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

761 
XXGE_TC_OFFSET
);

769 i‡(
DïO±i⁄s
 & 
XXGE_FLOW_CONTROL_OPTION
) {

770 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

772 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

773 
XXGE_FCC_OFFSET
);

774 
Reg
 |
XXGE_FCC_FCRX_MASK
;

775 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

776 
XXGE_FCC_OFFSET
, 
Reg
);

778 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

780 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

781 
XXGE_RCW1_OFFSET
));

784 i‡(
DïO±i⁄s
 & 
XXGE_PROMISC_OPTION
) {

785 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

789 
Reg
 = 
	`DmaMac_RódReg
(
XXGE_AFC_OFFSET
);

790 
Reg
 |
XXGE_AFC_PM_MASK
;

793 
	`DmaMac_WrôeReg
(
XXGE_AFC_OFFSET
, 
Reg
);

795 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

797 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

798 
XXGE_RCW1_OFFSET
));

806 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "setOptions:Ñeturning SUCCESS\n");

807  (
XST_SUCCESS
);

808 
	}
}

829 
	$XXgEthî√t_CÀ¨O±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
)

831 
u32
 
Reg
;

832 
u32
 
RegRcw1
;

833 
u32
 
RegTc
;

834 
u32
 
RegNewRcw1
;

835 
u32
 
RegNewTc
;

836 
u32
 
DïO±i⁄s
;

838 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

839 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

842 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_ClearOptions: 0x%08x\n",

843 
O±i⁄s
);

845 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

846  (
XST_DEVICE_IS_STARTED
);

854 
In°™˚På
->
O±i⁄s
 &= ~Options;

856 
DïO±i⁄s
 = 0xFFFFFFFF;

865 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

866 
XXGE_RCW1_OFFSET
);

867 
RegTc
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

868 
XXGE_TC_OFFSET
);

869 
RegNewRcw1
 = 
RegRcw1
;

870 
RegNewTc
 = 
RegTc
;

873 i‡(
DïO±i⁄s
 & 
XXGE_JUMBO_OPTION
) {

874 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

876 
RegNewTc
 &~
XXGE_TC_JUM_MASK
;

877 
RegNewRcw1
 &~
XXGE_RCW1_JUM_MASK
;

882 i‡(
DïO±i⁄s
 & 
XXGE_FCS_STRIP_OPTION
) {

883 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

885 
RegNewRcw1
 |
XXGE_RCW1_FCS_MASK
;

889 i‡(
DïO±i⁄s
 & 
XXGE_FCS_INSERT_OPTION
) {

890 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

892 
RegNewTc
 |
XXGE_TC_FCS_MASK
;

896 i‡(
DïO±i⁄s
 & 
XXGE_LENTYPE_ERR_OPTION
) {

897 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

899 
RegNewRcw1
 |
XXGE_RCW1_LT_DIS_MASK
;

903 i‡(
DïO±i⁄s
 & 
XXGE_TRANSMITTER_ENABLE_OPTION
) {

904 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

906 
RegNewTc
 &~
XXGE_TC_TX_MASK
;

910 i‡(
DïO±i⁄s
 & 
XXGE_RECEIVER_ENABLE_OPTION
) {

911 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

913 
RegNewRcw1
 &~
XXGE_RCW1_RX_MASK
;

919 i‡(
RegTc
 !
RegNewTc
) {

920 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

921 "XXgEthî√t_CÀ¨O±i⁄s: sëtög TC: 0x%0x\n", 
RegNewTc
);

922 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

923 
XXGE_TC_OFFSET
, 
RegNewTc
);

926 i‡(
RegRcw1
 !
RegNewRcw1
) {

927 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

928 "XXgEthî√t_CÀ¨O±i⁄s: sëtög RCW1: 0x%0x\n",
RegNewRcw1
);

929 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

930 
XXGE_RCW1_OFFSET
, 
RegNewRcw1
);

939 i‡(
DïO±i⁄s
 & 
XXGE_FLOW_CONTROL_OPTION
) {

940 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

942 
Reg
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

943 
XXGE_FCC_OFFSET
);

944 
Reg
 &~
XXGE_FCC_FCRX_MASK
;

945 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

946 
XXGE_FCC_OFFSET
, 
Reg
);

950 i‡(
DïO±i⁄s
 & 
XXGE_PROMISC_OPTION
) {

951 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

955 
Reg
 = 
	`DmaMac_RódReg
(
XXGE_AFC_OFFSET
);

956 
Reg
 &~
XXGE_AFC_PM_MASK
;

959 
	`DmaMac_WrôeReg
(
XXGE_AFC_OFFSET
, 
Reg
);

969 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "ClearOptions:Ñeturning SUCCESS\n");

970  (
XST_SUCCESS
);

971 
	}
}

987 
u32
 
	$XXgEthî√t_GëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
)

989 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

990 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

992  (
In°™˚På
->
O±i⁄s
);

993 
	}
}

1016 
	$XXgEthî√t_DißbÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
)

1018 
u32
 
RegRcw1
;

1021 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1022 
XXGE_RCW1_OFFSET
);

1023 
RegRcw1
 |
XXGE_RCW1_CL_DIS_MASK
;

1024 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1025 
XXGE_RCW1_OFFSET
, 
RegRcw1
);

1026 
	}
}

1046 
	$XXgEthî√t_E«bÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
)

1048 
u32
 
RegRcw1
;

1051 
RegRcw1
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1052 
XXGE_RCW1_OFFSET
);

1053 
RegRcw1
 &~
XXGE_RCW1_CL_DIS_MASK
;

1054 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1055 
XXGE_RCW1_OFFSET
, 
RegRcw1
);

1056 
	}
}

1086 
	$XXgEthî√t_PhySëMdioDivis‹
(
XXgEthî√t
 *
In°™˚På
, 
u8
 
Divis‹
)

1088 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

1089 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
)

1090 
	`Xû_As£πVoid
(
Divis‹
 <
XXGE_MDIO_CFG0_CLOCK_DIVIDE_MAX
);

1093 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_PhySetMdioDivisor\n");

1095 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1096 
XXGE_MDIO_CFG0_OFFSET
,

1097 (
u32
Ë
Divis‹
 | 
XXGE_MDIO_CFG0_MDIOEN_MASK
);

1098 
	}
}

1138 
	$XXgEthî√t_PhyRód
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

1139 
u32
 
Regi°îNum
, 
u16
 *
PhyD©aPå
)

1142 #ifdef 
MDIO_CHANGES


1143 
u32
 
MdioCålReg
 = 0;

1148 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

1149 
	`Xû_As£πVoid
(
Regi°îNum
 <
XXGE_PHY_REG_NUM_LIMIT
);

1151 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"PhyRead: BaseAddress %x Offset %x PhyAddress %x RegisterNum %d\n",

1152 
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_MDIO_CFG1_OFFSET
,

1153 
PhyAddªss
, 
Regi°îNum
);

1155 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

1157 
In°™˚På
->
C⁄fig
.
Ba£Addªss
);

1168 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1169 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1172 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1173 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1174 
XXGE_MDIO_CFG1_OFFSET
));

1177 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1178 
XXGE_MDIO_CFG1_OP_SETADDR_MASK
;

1179 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"Writing Base %x Offset %x = %x\n",

1180 
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1181 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"Writing Base %x Offset %x = %x\n",

1182 
In°™˚På
->
C⁄fig
.
Ba£Addªss
, 
XXGE_MDIO_TX_DATA_OFFSET
,

1183 (
Regi°îNum
 & 
XXGE_MDIO_TX_DATA_MASK
));

1185 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1186 
XXGE_MDIO_TX_DATA_OFFSET
, (
Regi°îNum
 & 
XXGE_MDIO_TX_DATA_MASK
));

1188 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1189 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1194 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1195 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1198 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1199 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1200 
XXGE_MDIO_CFG1_OFFSET
));

1203 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1204 
XXGE_MDIO_CFG1_OP_READ_MASK
;

1205 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1206 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1210 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1211 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1214 *
PhyD©aPå
 = (
u16
Ë
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1215 
XXGE_MDIO_RX_DATA_OFFSET
);

1216 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,"XXgEthî√t_PhyRód: VÆuêªåõved: 0x%0x\n", *
PhyD©aPå
);

1218 *
PhyD©aPå
 = 0x55AA;

1220 
	}
}

1253 
	$XXgEthî√t_PhyWrôe
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

1254 
u32
 
Regi°îNum
, 
u16
 
PhyD©a
)

1256 #ifde‡ 
MDIO_CHANGES


1257 
u32
 
MdioCålReg
 = 0;

1262 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

1263 
	`Xû_As£πVoid
(
PhyAddªss
 <
XXGE_PHY_ADDR_LIMIT
);

1264 
	`Xû_As£πVoid
(
Regi°îNum
 <
XXGE_PHY_REG_NUM_LIMIT
);

1266 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

1268 
In°™˚På
->
C⁄fig
.
Ba£Addªss
);

1280 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1281 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1285 
	`¥ötk
("MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1286 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1287 
XXGE_MDIO_CFG1_OFFSET
));

1290 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1291 
XXGE_MDIO_CFG1_OP_SETADDR_MASK
;

1292 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1293 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1294 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1295 
XXGE_MDIO_TX_DATA_OFFSET
, (
Regi°îNum
 & 
XXGE_MDIO_TX_DATA_MASK
));

1301 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1302 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1306 
	`¥ötk
("MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1307 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1308 
XXGE_MDIO_CFG1_OFFSET
));

1311 
MdioCålReg
 = 
PhyAddªss
 | 
XXGE_MDIO_CFG1_INITIATE_MASK
 |

1312 
XXGE_MDIO_CFG1_OP_WRITE_MASK
;

1313 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1314 
XXGE_MDIO_CFG1_OFFSET
, 
MdioCålReg
);

1315 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1316 
XXGE_MDIO_TX_DATA_OFFSET
, (
PhyD©a
 & 
XXGE_MDIO_TX_DATA_MASK
));

1322 !(
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1323 
XXGE_MDIO_CFG1_OFFSET
Ë& 
XXGE_MDIO_CFG1_READY_MASK
)) {

1327 
	`¥ötk
("MDIO CFG1 %x = %x\n", 
XXGE_MDIO_CFG1_OFFSET
,

1328 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

1329 
XXGE_MDIO_CFG1_OFFSET
));

1331 
	}
}

	@xxgbeth1/xxgethernet.h

352 #i‚de‡
XXGETHERNET_H


353 
	#XXGETHERNET_H


	)

355 #ifde‡
__˝lu•lus


361 
	~"x°©us.h
"

362 
	~"xxgëhî√t_hw.h
"

382 
	#XXGE_PROMISC_OPTION
 0x00000001

	)

388 
	#XXGE_JUMBO_OPTION
 0x00000002

	)

395 
	#XXGE_FLOW_CONTROL_OPTION
 0x00000008

	)

401 
	#XXGE_FCS_STRIP_OPTION
 0x00000010

	)

407 
	#XXGE_FCS_INSERT_OPTION
 0x00000020

	)

414 
	#XXGE_LENTYPE_ERR_OPTION
 0x00000040

	)

420 
	#XXGE_TRANSMITTER_ENABLE_OPTION
 0x00000080

	)

426 
	#XXGE_RECEIVER_ENABLE_OPTION
 0x00000100

	)

433 
	#XXGE_BROADCAST_OPTION
 0x00000200

	)

436 
	#XXGE_DEFAULT_OPTIONS
 \

437 (
XXGE_FLOW_CONTROL_OPTION
 | \

438 
XXGE_FCS_INSERT_OPTION
 | \

439 
XXGE_FCS_STRIP_OPTION
 | \

440 
XXGE_LENTYPE_ERR_OPTION
 | \

441 
XXGE_TRANSMITTER_ENABLE_OPTION
 | \

442 
XXGE_RECEIVER_ENABLE_OPTION
)

	)

449 
	#XXGE_MDIO_DIV_DFT
 33

	)

455 
	#XXGE_MAC_ADDR_SIZE
 6

	)

456 
	#XXGE_MTU
 1500

	)

459 
	#XXGE_JUMBO_MTU
 8192

	)

462 
	#XXGE_HDR_SIZE
 14

	)

463 
	#XAE_HDR_VLAN_SIZE
 18

	)

466 
	#XXGE_TRL_SIZE
 4

	)

469 
	#XXGE_MAX_FRAME_SIZE
 (
XXGE_MTU
 + 
XXGE_HDR_SIZE
 + 
XXGE_TRL_SIZE
)

	)

470 
	#XAE_MAX_VLAN_FRAME_SIZE
 (
XAE_MTU
 + 
XAE_HDR_VLAN_SIZE
 + 
XAE_TRL_SIZE
)

	)

471 
	#XXGE_MAX_JUMBO_FRAME_SIZE
 (
XXGE_JUMBO_MTU
 + 
XXGE_HDR_SIZE
 + 
XXGE_TRL_SIZE
)

	)

473 #ifde‡
USE_NW_PATH0


474 
	#XXGE_PHY_PRTAD
 0

	)

476 
	#XXGE_PHY_PRTAD
 1

	)

478 
	#XXGE_PHY_DEVAD
 3

	)

479 
	#XXGE_PHY_ADDRESS
 ((
XXGE_PHY_PRTAD
 << 24Ë| (
XXGE_PHY_DEVAD
 << 16))

	)

485 
	#XXGE_RX
 1

	)

486 
	#XXGE_TX
 2

	)

494 #ifde‡
X86_64


495 
	sXXgEthî√t_C⁄fig
 {

496 
u16
 
Devi˚Id
;

497 
u64
 
Ba£Addªss
;

500 
u8
 
TemacTy≥
;

504 
u8
 
TxVœnTøn
;

505 
u8
 
RxVœnTøn
;

506 
u8
 
TxVœnTag
;

507 
u8
 
RxVœnTag
;

508 
u8
 
TxVœnSåp
;

509 
u8
 
RxVœnSåp
;

510 
u8
 
ExtMˇ°
;

512 
u8
 
Sèts
;

514 } 
	tXXgEthî√t_C⁄fig
;

516 
	sXXgEthî√t_C⁄fig
 {

517 
u16
 
Devi˚Id
;

518 
u32
 
Ba£Addªss
;

521 
u8
 
TemacTy≥
;

525 
u8
 
TxVœnTøn
;

526 
u8
 
RxVœnTøn
;

527 
u8
 
TxVœnTag
;

528 
u8
 
RxVœnTag
;

529 
u8
 
TxVœnSåp
;

530 
u8
 
RxVœnSåp
;

531 
u8
 
ExtMˇ°
;

533 
u8
 
Sèts
;

535 } 
	tXXgEthî√t_C⁄fig
;

544 
	sXXgEthî√t
 {

545 
XXgEthî√t_C⁄fig
 
C⁄fig
;

546 
u32
 
IsSèπed
;

547 
u32
 
IsRódy
;

548 
u32
 
O±i⁄s
;

549 
u32
 
Fœgs
;

550 } 
	tXXgEthî√t
;

575 
	#XXgEthî√t_IsSèπed
(
In°™˚På
) \

576 (((
In°™˚På
)->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
Ë? 
TRUE
 : 
FALSE
)

	)

598 
	#XXgEthî√t_IsSètsC⁄figuªd
(
In°™˚På
) \

599 (((
In°™˚På
)->
C⁄fig
.
Sèts
Ë? 
TRUE
 : 
FALSE
)

	)

606 #ifde‡
X86_64


607 
XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
, 
XXgEthî√t_C⁄fig
 *
CfgPå
,
u64
 
VútuÆAddªss
);

609 
XXgEthî√t_CfgInôülize
(
XXgEthî√t
 *
In°™˚På
, 
XXgEthî√t_C⁄fig
 *
CfgPå
,
u32
 
VútuÆAddªss
);

611 
XXgEthî√t_Sèπ
(
XXgEthî√t
 *
In°™˚På
);

612 
XXgEthî√t_St›
(
XXgEthî√t
 *
In°™˚På
);

613 
XXgEthî√t_Re£t
(
XXgEthî√t
 *
In°™˚På
);

618 
XXgEthî√t_C⁄fig
 *
XXgEthî√t_LookupC⁄fig
(
u16
 
Devi˚Id
);

623 
XXgEthî√t_SëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
);

624 
XXgEthî√t_CÀ¨O±i⁄s
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
O±i⁄s
);

625 
u32
 
XXgEthî√t_GëO±i⁄s
(
XXgEthî√t
 *
In°™˚På
);

627 
XXgEthî√t_SëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
);

628 
XXgEthî√t_GëMacAddªss
(
XXgEthî√t
 *
In°™˚På
, *
AddªssPå
);

630 
XXgEthî√t_SëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

631 *
AddªssPå
);

632 
XXgEthî√t_GëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

633 *
AddªssPå
);

634 
XXgEthî√t_SídPau£Packë
(
XXgEthî√t
 *
In°™˚På
, 
u16
 
Pau£VÆue
);

637 
XXgEthî√t_SëBadFrmRcvO±i⁄
(
XXgEthî√t
 *
In°™˚På
);

638 
XXgEthî√t_CÀ¨BadFrmRcvO±i⁄
(
XXgEthî√t
 *
In°™˚På
);

640 
XXgEthî√t_DißbÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
);

641 
XXgEthî√t_E«bÀC⁄åﬁFømeLíCheck
(
XXgEthî√t
 *
In°™˚På
);

643 
XXgEthî√t_PhySëMdioDivis‹
(
XXgEthî√t
 *
In°™˚På
, 
u8
 
Divis‹
);

644 
XXgEthî√t_PhyRód
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

645 
u32
 
Regi°îNum
, 
u16
 *
PhyD©aPå
);

646 
XXgEthî√t_PhyWrôe
(
XXgEthî√t
 *
In°™˚På
, 
u32
 
PhyAddªss
,

647 
u32
 
Regi°îNum
, 
u16
 
PhyD©a
);

650 #ifde‡
__˝lu•lus


	@xxgbeth1/xxgethernet_control.c

76 
	~"xxgëhî√t.h
"

113 
	$XXgEthî√t_SëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

114 *
AddªssPå
)

116 
u32
 
MacAddr
;

117 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

119 
	`Xû_As£πN⁄void
(
In°™˚På
 !
NULL
);

120 
	`Xû_As£πN⁄void
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

121 
	`Xû_As£πN⁄void
(
AddªssPå
 !
NULL
);

123 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_SetMacPauseAddress\n");

126 i‡(
In°™˚På
->
IsSèπed
 =
XIL_COMPONENT_IS_STARTED
) {

127 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

129  (
XST_DEVICE_IS_STARTED
);

133 
MacAddr
 = 
A±r
[0];

134 
MacAddr
 |
A±r
[1] << 8;

135 
MacAddr
 |
A±r
[2] << 16;

136 
MacAddr
 |
A±r
[3] << 24;

137 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

138 
XXGE_RCW0_OFFSET
, 
MacAddr
);

141 
MacAddr
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

142 
XXGE_RCW1_OFFSET
);

143 
MacAddr
 &~
XXGE_RCW1_PAUSEADDR_MASK
;

146 
MacAddr
 |
A±r
[4];

147 
MacAddr
 |
A±r
[5] << 8;

148 
	`XXgEthî√t_WrôeReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

149 
XXGE_RCW1_OFFSET
, 
MacAddr
);

151 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

154  (
XST_SUCCESS
);

155 
	}
}

174 
	$XXgEthî√t_GëMacPau£Addªss
(
XXgEthî√t
 *
In°™˚På
,

175 *
AddªssPå
)

177 
u32
 
MacAddr
;

178 
u8
 *
A±r
 = (u8 *Ë
AddªssPå
;

180 
	`Xû_As£πVoid
(
In°™˚På
 !
NULL
);

181 
	`Xû_As£πVoid
(
In°™˚På
->
IsRódy
 =
XIL_COMPONENT_IS_READY
);

182 
	`Xû_As£πVoid
(
AddªssPå
 !
NULL
);

185 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
, "XXgEthernet_SetMacPauseAddress\n");

188 
MacAddr
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

189 
XXGE_RCW0_OFFSET
);

190 
A±r
[0] = (
u8
Ë
MacAddr
;

191 
A±r
[1] = (
u8
Ë(
MacAddr
 >> 8);

192 
A±r
[2] = (
u8
Ë(
MacAddr
 >> 16);

193 
A±r
[3] = (
u8
Ë(
MacAddr
 >> 24);

196 
MacAddr
 = 
	`XXgEthî√t_RódReg
(
In°™˚På
->
C⁄fig
.
Ba£Addªss
,

197 
XXGE_RCW1_OFFSET
);

198 
A±r
[4] = (
u8
Ë
MacAddr
;

199 
A±r
[5] = (
u8
Ë(
MacAddr
 >> 8);

201 
	`xdbg_¥ötf
(
XDBG_DEBUG_GENERAL
,

203 
	}
}

	@xxgbeth1/xxgethernet_hw.h

70 #i‚de‡
XXGETHERNET_HW_H


71 
	#XXGETHERNET_HW_H


	)

74 #ifdef 
XPS__LL_MAC_H


75 #unde‡
XPS__LL_MAC_H


80 
	~"xdebug.h
"

82 
	~"xio.h
"

83 
	~"xbasic_ty≥s.h
"

85 #ifde‡
__˝lu•lus


106 
	#XXGE_RXBL_OFFSET
 0x00000200

	)

107 
	#XXGE_RXBU_OFFSET
 0x00000204

	)

108 
	#XXGE_TXBL_OFFSET
 0x00000208

	)

109 
	#XXGE_TXBU_OFFSET
 0x0000020C

	)

110 
	#XXGE_RXUNDRL_OFFSET
 0x00000210

	)

114 
	#XXGE_RXUNDRU_OFFSET
 0x00000214

	)

118 
	#XXGE_RXFRAGL_OFFSET
 0x00000218

	)

122 
	#XXGE_RXFRAGU_OFFSET
 0x0000021C

	)

126 
	#XXGE_RX64BL_OFFSET
 0x00000220

	)

129 
	#XXGE_RX64BU_OFFSET
 0x00000224

	)

132 
	#XXGE_RX65B127L_OFFSET
 0x00000228

	)

135 
	#XXGE_RX65B127U_OFFSET
 0x0000022C

	)

138 
	#XXGE_RX128B255L_OFFSET
 0x00000230

	)

141 
	#XXGE_RX128B255U_OFFSET
 0x00000234

	)

144 
	#XXGE_RX256B511L_OFFSET
 0x00000238

	)

147 
	#XXGE_RX256B511U_OFFSET
 0x0000023C

	)

150 
	#XXGE_RX512B1023L_OFFSET
 0x00000240

	)

153 
	#XXGE_RX512B1023U_OFFSET
 0x00000244

	)

156 
	#XXGE_RX1024BL_OFFSET
 0x00000248

	)

159 
	#XXGE_RX1024BU_OFFSET
 0x0000024C

	)

162 
	#XXGE_RXOVRL_OFFSET
 0x00000250

	)

165 
	#XXGE_RXOVRU_OFFSET
 0x00000254

	)

168 
	#XXGE_TX64BL_OFFSET
 0x00000258

	)

171 
	#XXGE_TX64BU_OFFSET
 0x0000025C

	)

174 
	#XXGE_TX65B127L_OFFSET
 0x00000260

	)

177 
	#XXGE_TX65B127U_OFFSET
 0x00000264

	)

180 
	#XXGE_TX128B255L_OFFSET
 0x00000268

	)

183 
	#XXGE_TX128B255U_OFFSET
 0x0000026C

	)

186 
	#XXGE_TX256B511L_OFFSET
 0x00000270

	)

189 
	#XXGE_TX256B511U_OFFSET
 0x00000274

	)

192 
	#XXGE_TX512B1023L_OFFSET
 0x00000278

	)

195 
	#XXGE_TX512B1023U_OFFSET
 0x0000027C

	)

198 
	#XXGE_TX1024L_OFFSET
 0x00000280

	)

201 
	#XXGE_TX1024U_OFFSET
 0x00000284

	)

204 
	#XXGE_TXOVRL_OFFSET
 0x00000288

	)

207 
	#XXGE_TXOVRU_OFFSET
 0x0000028C

	)

210 
	#XXGE_RXFL_OFFSET
 0x00000290

	)

213 
	#XXGE_RXFU_OFFSET
 0x00000294

	)

216 
	#XXGE_RXFCSERL_OFFSET
 0x00000298

	)

219 
	#XXGE_RXFCSERU_OFFSET
 0x0000029C

	)

222 
	#XXGE_RXBCSTFL_OFFSET
 0x000002A0

	)

225 
	#XXGE_RXBCSTFU_OFFSET
 0x000002A4

	)

228 
	#XXGE_RXMCSTFL_OFFSET
 0x000002A8

	)

231 
	#XXGE_RXMCSTFU_OFFSET
 0x000002AC

	)

234 
	#XXGE_RXCTRFL_OFFSET
 0x000002B0

	)

237 
	#XXGE_RXCTRFU_OFFSET
 0x000002B4

	)

240 
	#XXGE_RXLTERL_OFFSET
 0x000002B8

	)

243 
	#XXGE_RXLTERU_OFFSET
 0x000002BC

	)

246 
	#XXGE_RXVLANFL_OFFSET
 0x000002C0

	)

249 
	#XXGE_RXVLANFU_OFFSET
 0x000002C4

	)

252 
	#XXGE_RXPFL_OFFSET
 0x000002C8

	)

255 
	#XXGE_RXPFU_OFFSET
 0x000002CC

	)

258 
	#XXGE_RXUOPFL_OFFSET
 0x000002D0

	)

262 
	#XXGE_RXUOPFU_OFFSET
 0x000002D4

	)

266 
	#XXGE_TXFL_OFFSET
 0x000002D8

	)

269 
	#XXGE_TXFU_OFFSET
 0x000002DC

	)

272 
	#XXGE_TXBCSTFL_OFFSET
 0x000002E0

	)

275 
	#XXGE_TXBCSTFU_OFFSET
 0x000002E4

	)

278 
	#XXGE_TXMCSTFL_OFFSET
 0x000002E8

	)

281 
	#XXGE_TXMCSTFU_OFFSET
 0x000002EC

	)

284 
	#XXGE_TXUNDRERL_OFFSET
 0x000002F0

	)

287 
	#XXGE_TXUNDRERU_OFFSET
 0x000002F4

	)

290 
	#XXGE_TXCTRFL_OFFSET
 0x000002F8

	)

294 
	#XXGE_TXCTRFU_OFFSET
 0x000002FC

	)

298 
	#XXGE_TXVLANFL_OFFSET
 0x00000300

	)

301 
	#XXGE_TXVLANFU_OFFSET
 0x00000304

	)

304 
	#XXGE_TXPFL_OFFSET
 0x00000308

	)

307 
	#XXGE_TXPFU_OFFSET
 0x0000030C

	)

314 
	#XXGE_RCW0_OFFSET
 0x00000400

	)

315 
	#XXGE_RCW1_OFFSET
 0x00000404

	)

316 
	#XXGE_TC_OFFSET
 0x00000408

	)

317 
	#XXGE_FCC_OFFSET
 0x0000040C

	)

319 
	#XXGE_GERS_OFFSET
 0x00000410

	)

321 
	#XXGE_RMTU_OFFSET
 0x00000414

	)

322 
	#XXGE_TMTU_OFFSET
 0x00000418

	)

323 
	#XXGE_VER_OFFSET
 0x000004F8

	)

324 
	#XXGE_CAP_OFFSET
 0x000004FC

	)

327 
	#XXGE_MDIO_REGISTER_ADDRESS
 32

	)

328 
	#XXGE_MDIO_CFG0_OFFSET
 0x00000500

	)

329 
	#XXGE_MDIO_CFG1_OFFSET
 0x00000504

	)

330 
	#XXGE_MDIO_TX_DATA_OFFSET
 0x00000508

	)

331 
	#XXGE_MDIO_RX_DATA_OFFSET
 0x0000050C

	)

333 
	#XXGE_TC_TXCONTROLBIT
 0x1C

	)

337 #i‡
deföed
 
XGEMAC_MAC1__


340 
	#XXGE_AFC_OFFSET
 0x00009400

	)

341 
	#XXGE_MACL_OFFSET
 0x00009404

	)

342 
	#XXGE_MACU_OFFSET
 0x00009408

	)

343 #ñi‡ 
deföed
 
XGEMAC_MAC2__


346 
	#XXGE_AFC_OFFSET
 0x0000940C

	)

347 
	#XXGE_MACL_OFFSET
 0x00009410

	)

348 
	#XXGE_MACU_OFFSET
 0x00009414

	)

350 #W¨nög: 
No
 
MAC
 
is
 
©èched
 
to
 
this
 
Drivî
 
ö°™˚
 
Neôhî
 
MAC1
 
n‹
 
MAC2
.

361 
	#XXGE_AFC_PM_MASK
 0x00000004

	)

368 
	#XXGE_TPF_TPFV_MASK
 0x0000FFFF

	)

374 
	#XXGE_RCW1_RST_MASK
 0x80000000

	)

375 
	#XXGE_RCW1_JUM_MASK
 0x40000000

	)

376 
	#XXGE_RCW1_FCS_MASK
 0x20000000

	)

378 
	#XXGE_RCW1_RX_MASK
 0x10000000

	)

379 
	#XXGE_RCW1_VLAN_MASK
 0x08000000

	)

380 
	#XXGE_RCW1_HD_MASK
 0x04000000

	)

381 
	#XXGE_RCW1_LT_DIS_MASK
 0x02000000

	)

384 
	#XXGE_RCW1_CL_DIS_MASK
 0x01000000

	)

387 
	#XXGE_RCW1_PAUSEADDR_MASK
 0x0000FFFF

	)

398 
	#XXGE_TC_RST_MASK
 0x80000000

	)

399 
	#XXGE_TC_JUM_MASK
 0x40000000

	)

400 
	#XXGE_TC_FCS_MASK
 0x20000000

	)

403 
	#XXGE_TC_TX_MASK
 0x10000000

	)

404 
	#XXGE_TC_VLAN_MASK
 0x08000000

	)

405 
	#XXGE_TC_HD_MASK
 0x04000000

	)

406 
	#XXGE_TC_IFG_MASK
 0x02000000

	)

410 
	#XXGE_TC_TPP_MASK
 0x00800000

	)

411 
	#XXGE_TC_DIC_MASK
 0x01000000

	)

418 
	#XXGE_FCC_FCRX_MASK
 0x20000000

	)

419 
	#XXGE_FCC_FCTX_MASK
 0x40000000

	)

425 
	#XXGE_RSC_FI_MASK
 0x08000000

	)

426 
	#XXGE_RSC_LFR_MASK
 0x10000000

	)

427 
	#XXGE_RSC_SGMII_MASK
 0x20000000

	)

428 
	#XXGE_RSC_GPCS_MASK
 0x40000000

	)

429 
	#XXGE_RSC_HOST_MASK
 0x80000000

	)

435 
	#XXGE_RMTU_FI_MASK
 0x00010000

	)

436 
	#XXGE_RMTU_LFR_MASK
 0x

	)

442 
	#XXGE_TMTU_FI_MASK
 0x00010000

	)

443 
	#XXGE_TMTU_LFR_MASK
 0x0001FFFF

	)

449 
	#XXGE_VER_MAJ
 0xFF000000

	)

450 
	#XXGE_VER_MIN
 0x00FF0000

	)

451 
	#XXGE_VER_PTCH
 0x000000FF

	)

457 
	#XXGE_CAP_STAT_MASK
 0x00000100

	)

458 
	#XXGE_CAP_LC10G_MASK
 0x00000008

	)

459 
	#XXGE_CAP_LC1G_MASK
 0x00000004

	)

460 
	#XXGE_CAP_LC100M_MASK
 0x00000002

	)

461 
	#XXGE_CAP_LC10M_MASK
 0x00000001

	)

467 
	#XXGE_MDIO_CFG0_MDIOEN_MASK
 0x00000040

	)

468 
	#XXGE_MDIO_CFG0_CLOCK_DIVIDE_MAX
 0x3F

	)

469 
	#XXGE_MDIO_PHY_LINK_UP_MASK
 0x1000

	)

472 
	#XXGE_MDIO_MC_MDIOPRTAD_MASK
 0x1F000000

	)

473 
	#XXGE_MDIO_MC_CLOCK_DEVAD_MAX
 0x001F0000

	)

474 
	#XXGE_MDIO_MC_MDIO_TXOP_MASK
 0x0000C000

	)

475 
	#XXGE_MDIO_CFG1_INITIATE_MASK
 0x00000800

	)

476 
	#XXGE_MDIO_CFG1_READY_MASK
 0x00000080

	)

477 
	#XXGE_MDIO_CFG1_OP_SETADDR_MASK
 0x00000000

	)

478 
	#XXGE_MDIO_CFG1_OP_READ_MASK
 0x0000C000

	)

479 
	#XXGE_MDIO_CFG1_OP_WRITE_MASK
 0x00004000

	)

486 
	#XXGE_MDIO_TX_DATA_MASK
 0x0000FFFF

	)

491 
	#XXGE_MDIO_RX_DATA_MASK
 0x0000FFFF

	)

502 
	#XXGE_SPEED_10_GBPS
 10000

	)

503 
	#XXGE_SPEED_1_GBPS
 1000

	)

504 
	#XXGE_SPEED_100_MBPS
 100

	)

505 
	#XXGE_SPEED_10_MBPS
 10

	)

507 
	#XXGE_PHY_ADDR_LIMIT
 36

	)

511 
	#XXGE_PHY_REG_NUM_LIMIT
 35

	)

514 
	#XXGE_LOOPS_TO_COME_OUT_OF_RST
 5000

	)

519 
	#XXGE_RST_DELAY_LOOPCNT_VAL
 4

	)

534 
xdbg_°m¡
(
ödít_⁄
);

536 
	#XXgEthî√t_ödít
(
RegOff£t
) \

537 ((
ödít_⁄
 && ((
RegOff£t
Ë>
XXGE_RAF_OFFSET
) && ((RegOffset) <= \

538 
XXGE_RXAERU_OFFSET
)Ë? "\t" : "")

	)

541 
	#XXgEthî√t_ªg_«me
(
RegOff£t
) \

542 ((
RegOff£t
Ë=
XXGE_RXBL_OFFSET
) ? "XXGE_RXBL_OFFSET": \

543 ((
RegOff£t
Ë=
XXGE_RXBU_OFFSET
) ? "XXGE_RXBU_OFFSET": \

544 ((
RegOff£t
Ë=
XXGE_TXBL_OFFSET
) ? "XXGE_TXBL_OFFSET": \

545 ((
RegOff£t
Ë=
XXGE_TXBU_OFFSET
) ? "XXGE_TXBU_OFFSET": \

546 ((
RegOff£t
Ë=
XXGE_RXUNDRL_OFFSET
) ? "XXGE_RXUNDRL_OFFSET": \

547 ((
RegOff£t
Ë=
XXGE_RXUNDRU_OFFSET
) ? "XXGE_RXUNDRU_OFFSET": \

548 ((
RegOff£t
Ë=
XXGE_RXFRAGL_OFFSET
) ? "XXGE_RXFRAGL_OFFSET": \

549 ((
RegOff£t
Ë=
XXGE_RXFRAGU_OFFSET
) ? "XXGE_RXFRAGU_OFFSET": \

550 ((
RegOff£t
Ë=
XXGE_RX64BL_OFFSET
) ? "XXGE_RX64BL_OFFSET": \

551 ((
RegOff£t
Ë=
XXGE_RX64BU_OFFSET
) ? "XXGE_RX64BU_OFFSET": \

552 ((
RegOff£t
Ë=
XXGE_RX65B127L_OFFSET
) ? "XXGE_RX65B127L_OFFSET": \

553 ((
RegOff£t
Ë=
XXGE_RX65B127U_OFFSET
) ? "XXGE_RX65B127U_OFFSET": \

554 ((
RegOff£t
Ë=
XXGE_RX128B255L_OFFSET
) ? "XXGE_RX128B255L_OFFSET": \

555 ((
RegOff£t
Ë=
XXGE_RX128B255U_OFFSET
) ? "XXGE_RX128B255U_OFFSET": \

556 ((
RegOff£t
Ë=
XXGE_RX256B511L_OFFSET
) ? "XXGE_RX256B511L_OFFSET": \

557 ((
RegOff£t
Ë=
XXGE_RX256B511U_OFFSET
) ? "XXGE_RX256B511U_OFFSET": \

558 ((
RegOff£t
Ë=
XXGE_RX512B1023L_OFFSET
) ? "XXGE_RX512B1023L_OFFSET": \

559 ((
RegOff£t
Ë=
XXGE_RX512B1023U_OFFSET
) ? "XXGE_RX512B1023U_OFFSET": \

560 ((
RegOff£t
Ë=
XXGE_RX1024BL_OFFSET
) ? "XXGE_RX1024L_OFFSET": \

561 ((
RegOff£t
Ë=
XXGE_RX1024BU_OFFSET
) ? "XXGE_RX1024U_OFFSET": \

562 ((
RegOff£t
Ë=
XXGE_RXOVRL_OFFSET
) ? "XXGE_RXOVRL_OFFSET": \

563 ((
RegOff£t
Ë=
XXGE_RXOVRU_OFFSET
) ? "XXGE_RXOVRU_OFFSET": \

564 ((
RegOff£t
Ë=
XXGE_TX64BL_OFFSET
) ? "XXGE_TX64BL_OFFSET": \

565 ((
RegOff£t
Ë=
XXGE_TX64BU_OFFSET
) ? "XXGE_TX64BU_OFFSET": \

566 ((
RegOff£t
Ë=
XXGE_TX65B127L_OFFSET
) ? "XXGE_TX65B127L_OFFSET": \

567 ((
RegOff£t
Ë=
XXGE_TX65B127U_OFFSET
) ? "XXGE_TX65B127U_OFFSET": \

568 ((
RegOff£t
Ë=
XXGE_TX128B255L_OFFSET
) ? "XXGE_TX128B255L_OFFSET": \

569 ((
RegOff£t
Ë=
XXGE_TX128B255U_OFFSET
) ? "XXGE_TX128B255U_OFFSET": \

570 ((
RegOff£t
Ë=
XXGE_TX256B511L_OFFSET
) ? "XXGE_TX256B511L_OFFSET": \

571 ((
RegOff£t
Ë=
XXGE_TX256B511U_OFFSET
) ? "XXGE_TX256B511U_OFFSET": \

572 ((
RegOff£t
Ë=
XXGE_TX512B1023L_OFFSET
) ? "XXGE_TX512B1023L_OFFSET": \

573 ((
RegOff£t
Ë=
XXGE_TX512B1023U_OFFSET
) ? "XXGE_TX512B1023U_OFFSET": \

574 ((
RegOff£t
Ë=
XXGE_TX1024L_OFFSET
) ? "XXGE_TX1024L_OFFSET": \

575 ((
RegOff£t
Ë=
XXGE_TX1024U_OFFSET
) ? "XXGE_TX1024U_OFFSET": \

576 ((
RegOff£t
Ë=
XXGE_TXOVRL_OFFSET
) ? "XXGE_TXOVRL_OFFSET": \

577 ((
RegOff£t
Ë=
XXGE_TXOVRU_OFFSET
) ? "XXGE_TXOVRU_OFFSET": \

578 ((
RegOff£t
Ë=
XXGE_RXFL_OFFSET
) ? "XXGE_RXFL_OFFSET": \

579 ((
RegOff£t
Ë=
XXGE_RXFU_OFFSET
) ? "XXGE_RXFU_OFFSET": \

580 ((
RegOff£t
Ë=
XXGE_RXFCSERL_OFFSET
) ? "XXGE_RXFCSERL_OFFSET": \

581 ((
RegOff£t
Ë=
XXGE_RXFCSERU_OFFSET
) ? "XXGE_RXFCSERU_OFFSET": \

582 ((
RegOff£t
Ë=
XXGE_RXBCSTFL_OFFSET
) ? "XXGE_RXBCSTFL_OFFSET": \

583 ((
RegOff£t
Ë=
XXGE_RXBCSTFU_OFFSET
) ? "XXGE_RXBCSTFU_OFFSET": \

584 ((
RegOff£t
Ë=
XXGE_RXMCSTFL_OFFSET
) ? "XXGE_RXMCSTFL_OFFSET": \

585 ((
RegOff£t
Ë=
XXGE_RXMCSTFU_OFFSET
) ? "XXGE_RXMCSTFU_OFFSET": \

586 ((
RegOff£t
Ë=
XXGE_RXCTRFL_OFFSET
) ? "XXGE_RXCTRFL_OFFSET": \

587 ((
RegOff£t
Ë=
XXGE_RXCTRFU_OFFSET
) ? "XXGE_RXCTRFU_OFFSET": \

588 ((
RegOff£t
Ë=
XXGE_RXLTERL_OFFSET
) ? "XXGE_RXLTERL_OFFSET": \

589 ((
RegOff£t
Ë=
XXGE_RXLTERU_OFFSET
) ? "XXGE_RXLTERU_OFFSET": \

590 ((
RegOff£t
Ë=
XXGE_RXVLANFL_OFFSET
) ? "XXGE_RXVLANFL_OFFSET": \

591 ((
RegOff£t
Ë=
XXGE_RXVLANFU_OFFSET
) ? "XXGE_RXVLANFU_OFFSET": \

592 ((
RegOff£t
Ë=
XXGE_RXPFL_OFFSET
) ? "XXGE_RXFL_OFFSET": \

593 ((
RegOff£t
Ë=
XXGE_RXPFU_OFFSET
) ? "XXGE_RXFU_OFFSET": \

594 ((
RegOff£t
Ë=
XXGE_RXUOPFL_OFFSET
) ? "XXGE_RXUOPFL_OFFSET": \

595 ((
RegOff£t
Ë=
XXGE_RXUOPFU_OFFSET
) ? "XXGE_RXUOPFU_OFFSET": \

596 ((
RegOff£t
Ë=
XXGE_TXFL_OFFSET
) ? "XXGE_TXFL_OFFSET": \

597 ((
RegOff£t
Ë=
XXGE_TXFU_OFFSET
) ? "XXGE_TXFU_OFFSET": \

598 ((
RegOff£t
Ë=
XXGE_TXBCSTFL_OFFSET
) ? "XXGE_TXBCSTFL_OFFSET": \

599 ((
RegOff£t
Ë=
XXGE_TXBCSTFU_OFFSET
) ? "XXGE_TXBCSTFU_OFFSET": \

600 ((
RegOff£t
Ë=
XXGE_TXMCSTFL_OFFSET
) ? "XXGE_TXMCSTFL_OFFSET": \

601 ((
RegOff£t
Ë=
XXGE_TXMCSTFU_OFFSET
) ? "XXGE_TXMCSTFU_OFFSET": \

602 ((
RegOff£t
Ë=
XXGE_TXUNDRERL_OFFSET
) ? "XXGE_TXUNDRERL_OFFSET": \

603 ((
RegOff£t
Ë=
XXGE_TXUNDRERU_OFFSET
) ? "XXGE_TXUNDRERU_OFFSET": \

604 ((
RegOff£t
Ë=
XXGE_TXCTRFL_OFFSET
) ? "XXGE_TXCTRFL_OFFSET": \

605 ((
RegOff£t
Ë=
XXGE_TXCTRFU_OFFSET
) ? "XXGE_TXCTRFU_OFFSET": \

606 ((
RegOff£t
Ë=
XXGE_TXVLANFL_OFFSET
) ? "XXGE_TXVLANFL_OFFSET": \

607 ((
RegOff£t
Ë=
XXGE_TXVLANFU_OFFSET
) ? "XXGE_TXVLANFU_OFFSET": \

608 ((
RegOff£t
Ë=
XXGE_TXPFL_OFFSET
) ? "XXGE_TXPFL_OFFSET": \

609 ((
RegOff£t
Ë=
XXGE_TXPFU_OFFSET
) ? "XXGE_TXPFU_OFFSET": \

610 ((
RegOff£t
Ë=
XXGE_RCW0_OFFSET
) ? "XXGE_RCW0_OFFSET": \

611 ((
RegOff£t
Ë=
XXGE_RCW1_OFFSET
) ? "XXGE_RCW1_OFFSET": \

612 ((
RegOff£t
Ë=
XXGE_TC_OFFSET
) ? "XXGE_TC_OFFSET": \

613 ((
RegOff£t
Ë=
XXGE_FCC_OFFSET
) ? "XXGE_FCC_OFFSET": \

614 ((
RegOff£t
Ë=
XXGE_GERS_OFFSET
) ? "XXGE_GERS_OFFSET": \

615 ((
RegOff£t
Ë=
XXGE_RMTU_OFFSET
) ? "XXGE_RMTU_OFFSET": \

616 ((
RegOff£t
Ë=
XXGE_TMTU_OFFSET
) ? "XXGE_TMTU_OFFSET": \

617 ((
RegOff£t
Ë=
XXGE_VER_OFFSET
) ? "XXGE_VER_OFFSET": \

618 ((
RegOff£t
Ë=
XXGE_CAP_OFFSET
) ? "XXGE_CAP_OFFSET": \

619 ((
RegOff£t
Ë=
XXGE_MDIO_CFGL_OFFSET
) ? "XXGE_MDIO_CFGL_OFFSET": \

620 ((
RegOff£t
Ë=
XXGE_MDIO_CFGL_OFFSET
) ? "XXGE_MDIO_CFGL_OFFSET": \

621 ((
RegOff£t
Ë=
XXGE_MDIO_TX_OFFSET
) ? "XXGE_MDIO_TX_OFFSET": \

622 ((
RegOff£t
Ë=
XXGE_MDIO_RX_OFFSET
) ? "XXGE_MDIO_RX_OFFSET": \

623 ((
RegOff£t
Ë=
XXGE_MDIO_MIS_OFFSET
) ? "XXGE_MDIO_MIS_OFFSET": \

624 ((
RegOff£t
Ë=
XXGE_MDIO_MIP_OFFSET
) ? "XXGE_MDIO_MIP_OFFSET": \

625 ((
RegOff£t
Ë=
XXGE_MDIO_MIE_OFFSET
) ? "XXGE_MDIO_MIE_OFFSET": \

626 ((
RegOff£t
Ë=
XXGE_MDIO_MIA_OFFSET
) ? "XXGE_MDIO_MIA_OFFSET": \

627 ((
RegOff£t
Ë=
XXGE_AFC_OFFSET
) ? "XXGE_AFC_OFFSET": \

628 ((
RegOff£t
Ë=
XXGE_MACL_OFFSET
) ? "XXGE_MACL_OFFSET": \

629 ((
RegOff£t
Ë=
XXGE_MACU_OFFSET
) ? "XXGE_MACU_OFFSET": \

630 "unknown")

	)

632 
	#XXgEthî√t_¥öt_ªg_o
(
Ba£Addªss
, 
RegOff£t
, 
VÆue
) \

633 
	`xdbg_¥ötf
(
XDBG_DEBUG_TEMAC_REG
, "%s0x%0x -> %s(0x%0x)\n", \

634 
	`XXgEthî√t_ödít
(
RegOff£t
), (
VÆue
), \

635 
	`XXgEthî√t_ªg_«me
(
RegOff£t
), (RegOff£t))

	)

637 
	#XXgEthî√t_¥öt_ªg_i
(
Ba£Addªss
, 
RegOff£t
, 
VÆue
) \

638 
	`xdbg_¥ötf
(
XDBG_DEBUG_TEMAC_REG
, "%s%s(0x%0x) -> 0x%0x\n", \

639 
	`XXgEthî√t_ödít
(
RegOff£t
), \

640 
	`XXgEthî√t_ªg_«me
(
RegOff£t
),(RegOff£t), (
VÆue
))

	)

657 #ifde‡
DEBUG


658 
	#XXgEthî√t_RódReg
(
Ba£Addªss
, 
RegOff£t
) \

660 
u32
 
vÆue
; \

661 
vÆue
 = 
	`Xû_In32
(((
Ba£Addªss
Ë+ (
RegOff£t
))); \

662 
	`XXgEthî√t_¥öt_ªg_i
((
Ba£Addªss
), (
RegOff£t
), 
vÆue
); \

663 })

	)

665 #ifde‡
X86_64


666 
	#XXgEthî√t_RódReg
(
Ba£Addªss
, 
RegOff£t
) \

667 (
	`Xû_In32
((((
u64
)(
Ba£Addªss
)Ë+ ()(
RegOff£t
))))

	)

669 
	#XXgEthî√t_RódReg
(
Ba£Addªss
, 
RegOff£t
) \

670 (
	`Xû_In32
(((
Ba£Addªss
Ë+ (
RegOff£t
))))

	)

691 #ifde‡
DEBUG


692 
	#XXgEthî√t_WrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

694 
	`XXgEthî√t_¥öt_ªg_o
((
Ba£Addªss
), (
RegOff£t
), (
D©a
)); \

695 
	`Xû_Out32
(((
Ba£Addªss
Ë+ (
RegOff£t
)), (
D©a
)); \

696 })

	)

698 #ifde‡
X86_64


699 
	#XXgEthî√t_WrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

700 
	`Xû_Out32
((((
u64
)(
Ba£Addªss
)Ë+ ()(
RegOff£t
)), (
D©a
));

	)

702 
	#XXgEthî√t_WrôeReg
(
Ba£Addªss
, 
RegOff£t
, 
D©a
) \

703 
	`Xû_Out32
(((
Ba£Addªss
Ë+ (
RegOff£t
)), (
D©a
));

	)

708 #ifde‡
__˝lu•lus


	@
1
.
0
33
684
include/xbasic_types.h
include/xdebug.h
include/xdma_user.h
include/xio.h
include/xpmon_be.h
include/xstatus.h
xdma/xdma.c
xdma/xdma.h
xdma/xdma_base.c
xdma/xdma_bd.h
xdma/xdma_bdring.c
xdma/xdma_bdring.h
xdma/xdma_hw.h
xdma/xdma_k7.mod.c
xdma/xdma_user.c
xrawdata0/sguser.c
xrawdata0/xrawdata0.mod.c
xrawdata1/sguser.c
xrawdata1/xrawdata1.mod.c
xxgbeth0/xbasic_types.c
xxgbeth0/xgadapter.c
xxgbeth0/xgadapter.h
xxgbeth0/xxgethernet.c
xxgbeth0/xxgethernet.h
xxgbeth0/xxgethernet_control.c
xxgbeth0/xxgethernet_hw.h
xxgbeth1/xbasic_types.c
xxgbeth1/xgadapter.c
xxgbeth1/xgadapter.h
xxgbeth1/xxgethernet.c
xxgbeth1/xxgethernet.h
xxgbeth1/xxgethernet_control.c
xxgbeth1/xxgethernet_hw.h
