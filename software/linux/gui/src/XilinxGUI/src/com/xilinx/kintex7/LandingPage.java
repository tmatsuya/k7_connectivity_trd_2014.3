/*******************************************************************************
** Â© Copyright 2012 - 2013 Xilinx, Inc. All rights reserved.
** This file contains confidential and proprietary information of Xilinx, Inc. and 
** is protected under U.S. and international copyright and other intellectual property laws.
*******************************************************************************
**   ____  ____ 
**  /   /\/   / 
** /___/  \  /   Vendor: Xilinx 
** \   \   \/    
**  \   \
**  /   /          
** /___/    \
** \   \  /  \   Kintex-7 PCIe-DMA-DDR3-10GMAC-10GBASER Targeted Reference Design
**  \___\/\___\
** 
**  Device: xc7k325t
**  Version: 1.0
**  Reference: UG927
**     
*******************************************************************************
**
**  Disclaimer: 
**
**    This disclaimer is not a license and does not grant any rights to the materials 
**    distributed herewith. Except as otherwise provided in a valid license issued to you 
**    by Xilinx, and to the maximum extent permitted by applicable law: 
**    (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND WITH ALL FAULTS, 
**    AND XILINX HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, 
**    INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, OR 
**    FITNESS FOR ANY PARTICULAR PURPOSE; and (2) Xilinx shall not be liable (whether in contract 
**    or tort, including negligence, or under any other theory of liability) for any loss or damage 
**    of any kind or nature related to, arising under or in connection with these materials, 
**    including for any direct, or any indirect, special, incidental, or consequential loss 
**    or damage (including loss of data, profits, goodwill, or any type of loss or damage suffered 
**    as a result of any action brought by a third party) even if such damage or loss was 
**    reasonably foreseeable or Xilinx had been advised of the possibility of the same.


**  Critical Applications:
**
**    Xilinx products are not designed or intended to be fail-safe, or for use in any application 
**    requiring fail-safe performance, such as life-support or safety devices or systems, 
**    Class III medical devices, nuclear facilities, applications related to the deployment of airbags,
**    or any other applications that could lead to death, personal injury, or severe property or 
**    environmental damage (individually and collectively, "Critical Applications"). Customer assumes 
**    the sole risk and liability of any use of Xilinx products in Critical Applications, subject only 
**    to applicable laws and regulations governing limitations on product liability.

**  THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS FILE AT ALL TIMES.

*******************************************************************************/
/*****************************************************************************/
/**
 *
 * @file LandingPage.java 
 *
 * Author: Xilinx, Inc.
 *
 * 2007-2010 (c) Xilinx, Inc. This file is licensed uner the terms of the GNU
 * General Public License version 2.1. This program is licensed "as is" without
 * any warranty of any kind, whether express or implied.
 *
 * MODIFICATION HISTORY:
 *
 * Ver   Date     Changes
 * ----- -------- -------------------------------------------------------
 * 1.0  5/15/12  First release
 *
 *****************************************************************************/

package com.xilinx.kintex7;

import com.xilinx.laf.NimbusLookAndFeel;
import java.awt.*;
import java.awt.Dialog.ModalityType;
import java.io.*;
import javax.swing.*;

public class LandingPage extends javax.swing.JFrame {

    /**
     * Creates new form LandingPage
     */
    public LandingPage() {
        // check for the existance of another instance
        initComponents();
        mode = PERFORMANCE_MODE_GENCHK;
        initCustomCode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton3 = new javax.swing.JRadioButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        device_id = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        installButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        performanceRB = new javax.swing.JRadioButton();
        genchkRadioButton = new javax.swing.JRadioButton();
        rawethRadioButton = new javax.swing.JRadioButton();
        dataVerifyCB = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        applicationRB = new javax.swing.JRadioButton();
        peer2peerCB = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();

        jRadioButton3.setText("jRadioButton3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 24)); // NOI18N
        jLabel1.setText("Kintex-7 Connectivity TRD");

        device_id.setText("Not yet Detected");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel3.setText("Driver Mode Selection");

        installButton.setText("Install");
        installButton.setToolTipText("This installs the drivers");
        installButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        buttonGroup1.add(performanceRB);
        performanceRB.setSelected(true);
        performanceRB.setText("Performance");
        performanceRB.setToolTipText("This selects the \"Performance Mode\" drivers");
        performanceRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performanceRBActionPerformed(evt);
            }
        });

        buttonGroup2.add(genchkRadioButton);
        genchkRadioButton.setSelected(true);
        genchkRadioButton.setText("GEN/CHK");
        genchkRadioButton.setToolTipText("Selects the PCIe-DMA driver with Generator and Checker in hardware");

        buttonGroup2.add(rawethRadioButton);
        rawethRadioButton.setText("Raw Ethernet");
        rawethRadioButton.setToolTipText("Selects the RAW Ethernet drivers exercising dual 10G links in hardware");

        dataVerifyCB.setText("Data Verify");
        dataVerifyCB.setToolTipText("Enables Data Verify in the driver for traffic generated by software");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(performanceRB)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 36, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(genchkRadioButton)
                                .addGap(36, 36, 36))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(rawethRadioButton)
                                .addContainerGap())))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(dataVerifyCB)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(performanceRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genchkRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rawethRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dataVerifyCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        buttonGroup1.add(applicationRB);
        applicationRB.setText("Application");
        applicationRB.setToolTipText("Selects the Application mode drivers which connect to the networking (TCP/IP) stack");
        applicationRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applicationRBActionPerformed(evt);
            }
        });

        peer2peerCB.setToolTipText(" Enables peer to peer settings");
        peer2peerCB.setEnabled(false);
        peer2peerCB.setLabel("Peer to Peer");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(peer2peerCB))
                    .addComponent(applicationRB, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(applicationRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peer2peerCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        peer2peerCB.getAccessibleContext().setAccessibleName("Peer to Peer");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(installButton)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(installButton))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel5.setText("Device:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(device_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 22, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(device_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void performanceRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performanceRBActionPerformed
        // TODO add your handling code here:
        if (performanceRB.isSelected()){
            genchkRadioButton.setEnabled(true);
            rawethRadioButton.setEnabled(true);
            dataVerifyCB.setEnabled(true);
            peer2peerCB.setSelected(false);
            peer2peerCB.setEnabled(false);
        }
    }//GEN-LAST:event_performanceRBActionPerformed

    private void applicationRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applicationRBActionPerformed
        // TODO add your handling code here:
        if (applicationRB.isSelected()){
            peer2peerCB.setEnabled(true);
            genchkRadioButton.setEnabled(false);
            rawethRadioButton.setEnabled(false);
            dataVerifyCB.setSelected(false);
            dataVerifyCB.setEnabled(false);
        }
    }//GEN-LAST:event_applicationRBActionPerformed

    private void installButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installButtonActionPerformed
               
        // TODO add your handling code here:
        if(installButton.getText().equals("Install")){
            // check for existance of another instance
            if (checkInstance()){
                 JOptionPane.showMessageDialog(null, 
                            "Another instance of GUI already running...", "Error", JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
            }else{
                InstallTask task = new InstallTask();
                task.execute();
                showLoadingScreen("Installing Device Drivers...Please wait...");
            }
            
        }else{
            
            UnInstallTask utask = new UnInstallTask();
            utask.execute();
            showLoadingScreen("Removing Device Drivers...Please wait...");
        }
    }//GEN-LAST:event_installButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        // First check whether the MainScreen is still open
        if (!installButton.getText().equals("Install"))
        {
            int confirmed = JOptionPane.showConfirmDialog(null, 
        //                    "Closing un-installs all the drivers. Do you want to continue?",
                    "Clicking on Yes will uninstall the drivers. Clicking on NO will not remove the drivers, but will exit the window",
                            "Exit", JOptionPane.YES_NO_OPTION);
            if (confirmed == JOptionPane.YES_OPTION)
            {
                UnInstallTask utask = new UnInstallTask();
                utask.execute();
                showLoadingScreen("Removing Device Drivers...Please wait...");
                dispose();
                System.exit(0); 
            }
        }else{
            dispose();
            System.exit(0); 
        }
                   
    }//GEN-LAST:event_formWindowClosing

    private int executeShellScript(String cmd){
        try{
            Runtime runtime = Runtime.getRuntime();
            Process process = runtime.exec(new String[] {"/bin/bash", "-c", cmd});
            int exitValue = process.waitFor();
            return exitValue;
        }catch(Exception e){
            //jTextArea1.append(e.getMessage());
            return -5;
        }
    }
    
    public void hideLP(){
        setVisible(false);
    }
    
    public void showLP(){
        /*UnInstallTask utask = new UnInstallTask();
        utask.execute();
        showLoadingScreen("Removing Device Drivers...Please wait...");*/
        setVisible(true);
    }
    
    public void uninstallDrivers(){
        UnInstallTask utask = new UnInstallTask();
        utask.execute();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
           /* for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }*/
            UIManager.setLookAndFeel(new NimbusLookAndFeel());
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(LandingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                LandingPage lp = new LandingPage();
                if (lp.checkInstance()){
                    JOptionPane.showMessageDialog(null, 
                            "Another instance of GUI already running...", "Error", JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                }else{
                    lp.setVisible(true);
                }
            }
        });
    }
    
    private void makeDialog(){
        modalDialog.setLayout(new BorderLayout());
        //Image loading = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/mobigesture/xpoc/loading.gif"));
        //ImagePanel ip = new ImagePanel(loading, false);
        //ip.setMinimumSize(new Dimension(300, 300));
        //modalDialog.add(ip, BorderLayout.CENTER);
        //Image loading = Toolkit.getDefaultToolkit().getImage(getClass().getResource(
        //              "/com/xilinx/kintex7/loading1.gif"));
        //JLabel limg = new JLabel("      ", new ImageIcon(loading), JLabel.CENTER);
        
        loadingMessage = new JLabel("", JLabel.CENTER);
       
        //modalDialog.add(limg, BorderLayout.LINE_START);
        modalDialog.add(loadingMessage, BorderLayout.CENTER);
        modalDialog.setSize(400, 150);
        modalDialog.setLocationRelativeTo(this);
    }
    
    private void showLoadingScreen(String message){
        loadingMessage.setText(message);
        modalDialog.setVisible(true);
    }
    
    public boolean checkInstance(){
       int res = executeShellScript("lsmod | grep xdma_k7");
       if (res == 0){
           return true;
       }
       return false;
    }
    
    private void initCustomCode(){
        setTitle("TRD Setup");
        jPanel2.setBackground(new Color(133, 133, 133));
        jPanel3.setBackground(new Color(133, 133, 133));
        setLocationRelativeTo(null);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/com/xilinx/kintex7/icon.png")));       
        device_id.setText("Getting Device ID...");
        // execute shell command to get the Device name
        try{
            Runtime runtime = Runtime.getRuntime();
            String cmd = "lspci | grep Xilinx 2>&1";
            Process process = runtime.exec(new String[] {"/bin/bash", "-c", cmd});
            int exitValue = process.waitFor();
            InputStream is = process.getInputStream();
            BufferedReader br =  new BufferedReader(new InputStreamReader(is));
            String line;
            String res = "";
            while((line = br.readLine()) != null){
                res += line;
            }
            //System.out.println(res);
            is.close();
            // remove the first time stamp
            if (res.length() > 2 && res.contains("7082")){ 
               device_id.setText(res.substring(res.indexOf(" ")+1, res.length()));
               makeDialog();
            }
            else
            {
                // disable all components
                device_id.setText("No Xilinx device found with device ID 7082");
                performanceRB.setEnabled(false);
                applicationRB.setEnabled(false);
                genchkRadioButton.setEnabled(false);
                rawethRadioButton.setEnabled(false);
                dataVerifyCB.setEnabled(false);
                peer2peerCB.setEnabled(false);
                installButton.setEnabled(false);
            }
        }catch(Exception e){
            //jTextArea1.append(e.getMessage());
        }
        
    }
    
    class InstallTask extends SwingWorker<Void, Void> {
        String imgName = "";
        @Override
        protected Void doInBackground() throws Exception {
            imgName = "appmode.png";
            if (applicationRB.isSelected()){
                
                if(peer2peerCB.isSelected())
                retVal = executeShellScript("./run_eth_app_p2p.sh 1>driver_log 2>&1");
                else
                retVal = executeShellScript("./run_eth_app.sh 1>driver_log 2>&1");
                //retVal = executeShellScript("./run_eth_app.sh");
                imgName = "appmode.png";
                if (peer2peerCB.isSelected())
                    mode = APPLICATION_MODE_P2P;
                else
                mode = APPLICATION_MODE;
            }
            else if (performanceRB.isSelected() && genchkRadioButton.isSelected()){
                retVal = executeShellScript("./run_perf_mode.sh 1>driver_log 2>&1");
                //retVal = executeShellScript("./run_perf_mode.sh");
                imgName = "gencheck.png";
                mode = PERFORMANCE_MODE_GENCHK;
                if (dataVerifyCB.isSelected())
                    mode = PERFORMANCE_MODE_GENCHK_DV;
            }
            else if (performanceRB.isSelected() && rawethRadioButton.isSelected()){
                retVal = executeShellScript("./run_raw_ethermode.sh 1>driver_log 2>&1");
                //retVal = executeShellScript("./run_raw_ethermode.sh");
                imgName = "rawethernet.png";
                mode = PERFORMANCE_MODE_RAW;
                if (dataVerifyCB.isSelected())
                    mode = PERFORMANCE_MODE_RAW_DV;
            }
            return null;
        }
        
         @Override
        public void done() {
            modalDialog.setVisible(false);
            Object[] options = {"View Log","Ok"};
            int n = 0;
            
            if (retVal != 0){
                if (retVal == COMPILATION_ERROR){
                    System.out.println("Compilation error");
                    n = JOptionPane.showOptionDialog(null,"Compilation of Drivers Failed...",
                             "Error",
                             JOptionPane.YES_NO_OPTION,
                             JOptionPane.ERROR_MESSAGE,
                                null,
                                options,
                                options[0]);
                    System.out.println("n = "+n);
                    if (n == 0){
                        showLog();
                    }
                }
                else  if (retVal == MODULE_INSERTION_ERROR){
                    System.out.println("insertion error");
                    n = JOptionPane.showOptionDialog(null,"Failed to insert driver modules...",
                             "Error",
                             JOptionPane.YES_NO_OPTION,
                             JOptionPane.ERROR_MESSAGE,
                                null,
                                options,
                                options[0]);
                    System.out.println("n = "+n);
                    if (n == 0){
                        showLog();
                    }
                }
                else  if (retVal == COMPILATION_CLEAN_ERROR){
                    System.out.println("Clean error");
                    n = JOptionPane.showOptionDialog(null,"Cleaning of Drivers failed...",
                             "Error",
                             JOptionPane.YES_NO_OPTION,
                             JOptionPane.ERROR_MESSAGE,
                                null,
                                options,
                                options[0]);
                    System.out.println("n = "+n);
                    if (n == 0){
                        showLog();
                    }
                }
                return;
            }
            retVal = -1;
            installButton.setText("Uninstall");
            // disable all
            performanceRB.setEnabled(false);
            applicationRB.setEnabled(false);
            genchkRadioButton.setEnabled(false);
            rawethRadioButton.setEnabled(false);
            dataVerifyCB.setEnabled(false);
            peer2peerCB.setEnabled(false);
            // launch mainscreen
            hideLP();
            ms =  MainScreen.getInstance();
            ms.initialize(LandingPage.this, imgName, mode);
        }
        
    }
    
    private void showLog(){
       /* System.out.println("Show log");
        String txt = "";
        try{
            // Open the file that is the first 
            // command line parameter
            FileInputStream fstream = new FileInputStream("driver_log");
            // Get the object of DataInputStream
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
            //Read File Line By Line
            while ((strLine = br.readLine()) != null)   {
                txt = txt + strLine;
            }
            //Close the input stream
            in.close();
                }catch (Exception e){//Catch exception if any
            System.err.println("Error: " + e.getMessage());
                }
        
        //custom title, warning icon
        JOptionPane.showMessageDialog(this,
            txt,
            "Log",
            JOptionPane.WARNING_MESSAGE);*/
        try{
                ProcessBuilder proc=new ProcessBuilder("/usr/bin/gedit","driver_log");
                proc.start();
        }catch(Exception hj){
            System.out.println("Error not present"+hj);
        }
    }
    
    class UnInstallTask extends SwingWorker<Void, Void> {
        String imgName = "";
        @Override
        protected Void doInBackground() throws Exception {
             // call uninstall script
            retVal = executeShellScript("./remove_modules.sh");
            return null;
        }
        
         @Override
        public void done() {
            modalDialog.setVisible(false);
            if (retVal != 0){
                if (retVal == COMPILATION_ERROR)
                    JOptionPane.showMessageDialog(null, 
                                "Compilation of Drivers Failed...", "Error", 
                                JOptionPane.ERROR_MESSAGE);
                else  if (retVal == MODULE_INSERTION_ERROR)
                    JOptionPane.showMessageDialog(null, 
                                "Failed to insert driver modules...", "Error", 
                                JOptionPane.ERROR_MESSAGE);
                else  if (retVal == COMPILATION_CLEAN_ERROR)
                    JOptionPane.showMessageDialog(null, 
                                "Cleaning of Drivers failed...", "Error", 
                                JOptionPane.ERROR_MESSAGE);
            }
            applicationRB.setEnabled(true);
            performanceRB.setEnabled(true);
            if(applicationRB.isSelected()){
                peer2peerCB.setEnabled(true);
            }
                
            if (performanceRB.isSelected()){
               genchkRadioButton.setEnabled(true);
               rawethRadioButton.setEnabled(true);
               dataVerifyCB.setEnabled(true);
               peer2peerCB.setEnabled(false);
               
            }
            installButton.setText("Install");
            ms.unInstallDone();
        }
        
    }
    
    
    
    class ImagePanel extends JPanel {
        Image image;
        boolean start;
        
        ImagePanel(Image image, boolean st) {
            this.image = image;
            this.start = st;
        }
 
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            if (start)
            {
                int x = (this.getWidth() - image.getWidth(null)) / 2;
                int y = 15;
                g.drawImage(image, x, y, this);
            }
            else{
                int x = (this.getWidth() - image.getWidth(null)) / 2;
                int y = (this.getHeight() - image.getHeight(null)) / 2;
                g.drawImage(image, x, y, this);
            }
        }
    }
    public static int PERFORMANCE_MODE_GENCHK = 1;
    public static int PERFORMANCE_MODE_RAW = 2;
    public static int PERFORMANCE_MODE_GENCHK_DV = 3;
    public static int PERFORMANCE_MODE_RAW_DV = 4;
    public static int APPLICATION_MODE = 5;
    public static int APPLICATION_MODE_P2P = 6;
    
    public static int COMPILATION_ERROR=1;
    public static int MODULE_INSERTION_ERROR=2;
    public static int COMPILATION_CLEAN_ERROR=3;

    int mode;
    int retVal = -1;
    JDialog modalDialog = new JDialog(this, "Busy", ModalityType.DOCUMENT_MODAL);
    JLabel loadingMessage;
    MainScreen ms;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton applicationRB;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox dataVerifyCB;
    private javax.swing.JLabel device_id;
    private javax.swing.JRadioButton genchkRadioButton;
    private javax.swing.JButton installButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox peer2peerCB;
    private javax.swing.JRadioButton performanceRB;
    private javax.swing.JRadioButton rawethRadioButton;
    // End of variables declaration//GEN-END:variables
}
